{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/extra/cv.html","path":"extra/cv.html","modified":0,"renderable":0},{"_id":"source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":0},{"_id":"source/img/wechatpay.jpg","path":"img/wechatpay.jpg","modified":0,"renderable":0},{"_id":"source/img/weapp-store.jpg","path":"img/weapp-store.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"c3d06de57b92718ddf82e5c52739bbd97693d171","modified":1527917217000},{"_id":"source/favicon.ico","hash":"a8623c9316a4adda34a37596f5d02125bfff6dc2","modified":1527917217000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1527917217000},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1527917217000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1527917217000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1527917217000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1527917217000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1527917217000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1527917217000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1527917217000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1527917217000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1527917217000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1527917217000},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1527917217000},{"_id":"themes/next/_config.yml","hash":"02699b97fd5415cd4acd026c150c173a588a0f98","modified":1544102537328},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1527917217000},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1527917217000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1527917217000},{"_id":"source/_drafts/golang-config.md","hash":"9e65aa0d9a42ff2a26485009926ccc25125c0d3f","modified":1536995596531},{"_id":"source/_drafts/add-newrelic.md","hash":"3bccfd54dcad68b5ccb55f3f2f7097944c6e18d6","modified":1538134033328},{"_id":"source/_drafts/mysql-master-slave.md","hash":"a2693448a27a4f0d11bee87d4e231d7d167ebfc4","modified":1527917217000},{"_id":"source/_drafts/golang-log-wheel.md","hash":"d48548c1eb3ad53a501fbc0a98a2c24fdf032002","modified":1547725843965},{"_id":"source/_drafts/url-hash.md","hash":"f267e4c94eac133a2674f32d5aa95f53f6e87a2d","modified":1538134379976},{"_id":"source/_posts/503-service-unavailable.md","hash":"fd7d11b43a1e273b61e31b5bcf446452984c1972","modified":1527917217000},{"_id":"source/_posts/a-maverick-pig.md","hash":"3482f827cfcf2da44cd5e7ba0af92e74df41a9d0","modified":1527917217000},{"_id":"source/_posts/book-recommond.md","hash":"fe7f74ad4ea6d64f9d8f8dab82e242c3f65c7ef7","modified":1527917217000},{"_id":"source/_posts/chrome-hot-key.md","hash":"b62cf10d5e8af3634acf19137b6bcfd3832ab151","modified":1527917217000},{"_id":"source/_posts/deep-shallow.md","hash":"a203d032d33ed8ae5be4fb00dec26945597121ba","modified":1527917217000},{"_id":"source/_posts/docker-data-management.md","hash":"841336ff461454b80c0fb0ed6bd4325c64ee52d6","modified":1536996551894},{"_id":"source/_posts/hexo-blog.md","hash":"beebdc1e5e01dc18123cfeb77cfb560773440974","modified":1527917217000},{"_id":"source/_posts/gitlab-build.md","hash":"cc69ffbf05376e67da5bcf06beeeb4d1adea21c5","modified":1544103969867},{"_id":"source/_posts/markdown-standard.md","hash":"a10724a3cade03e1772dd4f8f93e4562239b0d37","modified":1527917217000},{"_id":"source/_posts/most-of-silence.md","hash":"d351fe69cda568586814c69c063e2d02c216aaf7","modified":1527917217000},{"_id":"source/_posts/modern-operating-systems-c1-exercise.md","hash":"0c1ccec59c151ccbda322ddc3b67ebc919a3ae90","modified":1539483659279},{"_id":"source/_posts/mysql-index.md","hash":"4cf1b2cde37f8bcd04a7a223c8f97a80ca59419f","modified":1527917217000},{"_id":"source/_posts/mysql-optimization.md","hash":"6cde4e7f16ea211d68fbf2eeff977784ada8c9f0","modified":1527917217000},{"_id":"source/_posts/markdown-syntax-highlight.md","hash":"f1a2dacb79ed2d83a264a340d5af618b11dd917a","modified":1544104414736},{"_id":"source/_posts/node-circular-dependency.md","hash":"fc830eb7725f291970967c916d2af4046d6a6160","modified":1538143577113},{"_id":"source/_posts/protocol-buffer-introduction.md","hash":"2f6f6f444fca93f52e3c441b9bd4f703f1443d57","modified":1527917217000},{"_id":"source/_posts/node-v8.md","hash":"d99b26711c373c645e1ec21d50d6bf15e26d4b20","modified":1527917217000},{"_id":"source/_posts/weapp-store.md","hash":"f45a6752efd3507abae15ddfb5638d4b40c31a80","modified":1527917217000},{"_id":"source/_posts/protocol-buffer-encoding.md","hash":"a66d351fb282821aa515afe63be9c698ac0b6cca","modified":1540826630552},{"_id":"source/about/index.md","hash":"76353f861df989fa57796691a8b3f12a8eba6adb","modified":1527917217000},{"_id":"source/categories/index.md","hash":"e44b9381a6a2c27012511e61d35c75244cc1b45f","modified":1527917217000},{"_id":"source/extra/cv.html","hash":"40bd001563085fc35165329ea1ff5c5ecbdbbeef","modified":1527917217000},{"_id":"source/_posts/vscode-hot-key.md","hash":"0503f5d2a9742c31af8cd304b8c27b025bce45dc","modified":1527917217000},{"_id":"source/img/alipay.jpg","hash":"492e5f3d92fa69a1cc51d0e055f235963fd0d9e7","modified":1527917217000},{"_id":"source/tags/index.md","hash":"7bcf06b2c28de56d23c06c88075f04b3e7b1f5a7","modified":1527917217000},{"_id":"source/img/wechatpay.jpg","hash":"aeb65206b25edca9e56347995fcd0bc2a0fcf98f","modified":1527917217000},{"_id":"source/img/weapp-store.jpg","hash":"24120c3027c31ed2468de04d2e35a980d0193947","modified":1527917217000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1527917217000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1527917217000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1527917217000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1527917217000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1527917217000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1527917217000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1527917217000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1527917217000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1527917217000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1527917217000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1527917217000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1527917217000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1527917217000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1527917217000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1527917217000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1527917217000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1527917217000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1527917217000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1527917217000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1527917217000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1527917217000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1527917217000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1527917217000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1527917217000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1527917217000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1527917217000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1527917217000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1527917217000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1527917217000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1527917217000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1527917217000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1527917217000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1527917217000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527917217000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527917217000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1527917217000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1527917217000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1527917217000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1527917217000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1527917217000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1527917217000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1527917217000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1527917217000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1527917217000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1527917217000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1527917217000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1527917217000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1527917217000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1527917217000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1527917217000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1527917217000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1527917217000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1527917217000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1527917217000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1527917217000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1527917217000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1527917217000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1527917217000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1527917217000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1527917217000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1527917217000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1527917217000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1527917217000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1527917217000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1527917217000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1527917217000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1527917217000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1527917217000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1527917217000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527917217000},{"_id":"themes/next/source/images/alipay.jpg","hash":"492e5f3d92fa69a1cc51d0e055f235963fd0d9e7","modified":1527917217000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527917217000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1527917217000},{"_id":"themes/next/source/images/avatar.jpg","hash":"28aed5e4226de0dfc4080ab5712bfd9e4588f47f","modified":1544102627180},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527917217000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527917217000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527917217000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527917217000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527917217000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527917217000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527917217000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527917217000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527917217000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527917217000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527917217000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1527917217000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527917217000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527917217000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1527917217000},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"aeb65206b25edca9e56347995fcd0bc2a0fcf98f","modified":1527917217000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527917217000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527917217000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527917217000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527917217000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527917217000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527917217000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1527917217000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1527917217000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1527917217000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1527917217000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1527917217000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1527917217000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1527917217000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1527917217000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1527917217000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1527917217000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1527917217000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1527917217000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1527917217000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1527917217000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1527917217000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1527917217000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1527917217000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1527917217000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1527917217000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1527917217000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1527917217000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1527917217000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"2a850dfb09d62e2b5976f03a4ac35b839c99b6a6","modified":1547727774208},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1527917217000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1527917217000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1527917217000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"1fe0b6098804c9a4de5a524f2ca2f4744363c6ca","modified":1544104604428},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1527917217000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1527917217000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1527917217000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1527917217000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1527917217000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1527917217000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1527917217000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1527917217000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1527917217000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1527917217000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1527917217000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527917217000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1527917217000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527917217000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1527917217000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1527917217000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1527917217000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1527917217000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1527917217000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1527917217000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1527917217000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1527917217000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1527917217000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1527917217000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1527917217000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527917217000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527917217000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527917217000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527917217000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527917217000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527917217000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527917217000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1527917217000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1527917217000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527917217000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1527917217000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527917217000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1527917217000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1527917217000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1527917217000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1527917217000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1527917217000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1527917217000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1527917217000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1527917217000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1527917217000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1527917217000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1527917217000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527917217000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527917217000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1527917217000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527917217000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1527917217000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527917217000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527917217000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1527917217000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527917217000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1527917217000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527917217000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1527917217000}],"Category":[{"name":"码梦为生","_id":"cjr0l2cpa0004slm4pddmzcgj"},{"name":"书海无涯","_id":"cjr0l2cpl000islm426urj080"}],"Data":[],"Page":[{"title":"关于","date":"2017-07-21T03:11:27.000Z","comments":0,"_content":"\n### 关于我\n\n```yml\nname: Royeo\nemail: ljn6176@163.com\nwechat: LOL-antijungle\ncareer: Web Developer\nlocation: Guangzhou, China\n```\n\n### 标签\n\n```\nNodejs、Golang、Coding、Reading、Movies、Music、Traveling……\n```\n\n### 自我介绍\n\n```\n一个追求技术但又不局限于技术，喜欢涉猎各种新鲜的东西，同时又很怀旧的青年。\n```\n\n### 个人作品\n\n微信小程序 - 便利店在哪\n\n<img src=\"../img/weapp-store.jpg\" style=\"margin-left: 0; border: 0\">\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-07-21 11:11:27\ncomments: false\n---\n\n### 关于我\n\n```yml\nname: Royeo\nemail: ljn6176@163.com\nwechat: LOL-antijungle\ncareer: Web Developer\nlocation: Guangzhou, China\n```\n\n### 标签\n\n```\nNodejs、Golang、Coding、Reading、Movies、Music、Traveling……\n```\n\n### 自我介绍\n\n```\n一个追求技术但又不局限于技术，喜欢涉猎各种新鲜的东西，同时又很怀旧的青年。\n```\n\n### 个人作品\n\n微信小程序 - 便利店在哪\n\n<img src=\"../img/weapp-store.jpg\" style=\"margin-left: 0; border: 0\">\n","updated":"2018-06-02T05:26:57.000Z","path":"about/index.html","layout":"page","_id":"cjr0l2cp70001slm47ubmnv2y","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Royeo</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">ljn6176@163.com</span></span><br><span class=\"line\"><span class=\"attr\">wechat:</span> <span class=\"string\">LOL-antijungle</span></span><br><span class=\"line\"><span class=\"attr\">career:</span> <span class=\"string\">Web</span> <span class=\"string\">Developer</span></span><br><span class=\"line\"><span class=\"attr\">location:</span> <span class=\"string\">Guangzhou,</span> <span class=\"string\">China</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Nodejs、Golang、Coding、Reading、Movies、Music、Traveling……</span><br></pre></td></tr></table></figure>\n<h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">一个追求技术但又不局限于技术，喜欢涉猎各种新鲜的东西，同时又很怀旧的青年。</span><br></pre></td></tr></table></figure>\n<h3 id=\"个人作品\"><a href=\"#个人作品\" class=\"headerlink\" title=\"个人作品\"></a>个人作品</h3><p>微信小程序 - 便利店在哪</p>\n<p><img src=\"../img/weapp-store.jpg\" style=\"margin-left: 0; border: 0\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Royeo</span></span><br><span class=\"line\"><span class=\"attr\">email:</span> <span class=\"string\">ljn6176@163.com</span></span><br><span class=\"line\"><span class=\"attr\">wechat:</span> <span class=\"string\">LOL-antijungle</span></span><br><span class=\"line\"><span class=\"attr\">career:</span> <span class=\"string\">Web</span> <span class=\"string\">Developer</span></span><br><span class=\"line\"><span class=\"attr\">location:</span> <span class=\"string\">Guangzhou,</span> <span class=\"string\">China</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Nodejs、Golang、Coding、Reading、Movies、Music、Traveling……</span><br></pre></td></tr></table></figure>\n<h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">一个追求技术但又不局限于技术，喜欢涉猎各种新鲜的东西，同时又很怀旧的青年。</span><br></pre></td></tr></table></figure>\n<h3 id=\"个人作品\"><a href=\"#个人作品\" class=\"headerlink\" title=\"个人作品\"></a>个人作品</h3><p>微信小程序 - 便利店在哪</p>\n<p><img src=\"../img/weapp-store.jpg\" style=\"margin-left: 0; border: 0\"></p>\n"},{"title":"","date":"2017-07-21T03:16:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2017-07-21 11:16:50\ntype: categories\ncomments: false\n---\n","updated":"2018-06-02T05:26:57.000Z","path":"categories/index.html","layout":"page","_id":"cjr0l2cp90003slm4tqqi79pg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","date":"2017-07-21T03:11:27.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \ndate: 2017-07-21 11:11:27\ntype: tags\ncomments: false\n---\n","updated":"2018-06-02T05:26:57.000Z","path":"tags/index.html","layout":"page","_id":"cjr0l2cpd0007slm40jsg6xsi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Golang 配置方案","date":"2018-08-13T13:22:51.000Z","_content":"\n最近在用 Golang 写微服务，故而研究了一下 Golang 的各种配置方案，结合自己项目中的配置选型，来谈谈 Golang 中如何进行优雅地配置。\n\n## 前提\n\n在开发中，我们需要面对各种各样的环境，开发环境、测试环境、生产环境等。并且，各个环境的参数和配置各不相同，比如服务器配置、数据库连接等。那么我们就需要在不同的环境下使用不同的配置。\n\n提供配置数据的方式很多，但不外乎配置文件、环境变量以及命令行选项等。考虑到多个环境，一个良好的应用配置层次应该是这样的：\n- 程序里内置配置项的初始默认值。\n- 配置文件中的配置项值可以覆盖程序内配置项的默认值。\n- 命令行选项和参数值具有最高优先级，可以覆盖前两层的配置项值。\n\n## 常见的配置方案\n\n配置文件是一种常见的配置方案，通过创建多个配置文件，如 json 文件或 yaml 文件，然后以命名区分环境，开发环境为 `development.json`，测试环境为 `test.json`，生产环境为 `production.json`。之后在系统中设置环境变量，如 `export ENV_APP=development`，让程序根据环境变量读取相应的配置文件。\n\n这种配置方案使用起来很简单，也满足我们前面所说的良好的应用配置层次。但是在微服务的场景下，可能会遇到一些问题：\n\n- 假如有多个服务使用了同一个配置，如数据库、消息队列等配置，并且写在了各自的配置文件中，那么当我们需要更改这些配置时，不得不逐个更新这些服务的配置，非常不灵活。\n\n- 代码与配置放在一起，开发人员可以看到很多敏感的配置信息，比如生成环境的数据库地址、密码等，而这些敏感的配置信息应该只有少数人有权限能看到，这对系统的安全有重大影响。\n\n- 对于大量相同的配置（比如数据库配置），逻辑上我们应该存放在同一个地方，保证只有唯一可靠的数据来源。\n\n针对上述问题，我们很容易想到，可以将配置与程序分离，集中式管理配置。","source":"_drafts/golang-config.md","raw":"---\ntitle: Golang 配置方案\ndate: 2018-08-13 21:22:51\ntags:\n  - Golang\n  - 配置方案\n  - 微服务\ncategory: 码梦为生\n---\n\n最近在用 Golang 写微服务，故而研究了一下 Golang 的各种配置方案，结合自己项目中的配置选型，来谈谈 Golang 中如何进行优雅地配置。\n\n## 前提\n\n在开发中，我们需要面对各种各样的环境，开发环境、测试环境、生产环境等。并且，各个环境的参数和配置各不相同，比如服务器配置、数据库连接等。那么我们就需要在不同的环境下使用不同的配置。\n\n提供配置数据的方式很多，但不外乎配置文件、环境变量以及命令行选项等。考虑到多个环境，一个良好的应用配置层次应该是这样的：\n- 程序里内置配置项的初始默认值。\n- 配置文件中的配置项值可以覆盖程序内配置项的默认值。\n- 命令行选项和参数值具有最高优先级，可以覆盖前两层的配置项值。\n\n## 常见的配置方案\n\n配置文件是一种常见的配置方案，通过创建多个配置文件，如 json 文件或 yaml 文件，然后以命名区分环境，开发环境为 `development.json`，测试环境为 `test.json`，生产环境为 `production.json`。之后在系统中设置环境变量，如 `export ENV_APP=development`，让程序根据环境变量读取相应的配置文件。\n\n这种配置方案使用起来很简单，也满足我们前面所说的良好的应用配置层次。但是在微服务的场景下，可能会遇到一些问题：\n\n- 假如有多个服务使用了同一个配置，如数据库、消息队列等配置，并且写在了各自的配置文件中，那么当我们需要更改这些配置时，不得不逐个更新这些服务的配置，非常不灵活。\n\n- 代码与配置放在一起，开发人员可以看到很多敏感的配置信息，比如生成环境的数据库地址、密码等，而这些敏感的配置信息应该只有少数人有权限能看到，这对系统的安全有重大影响。\n\n- 对于大量相同的配置（比如数据库配置），逻辑上我们应该存放在同一个地方，保证只有唯一可靠的数据来源。\n\n针对上述问题，我们很容易想到，可以将配置与程序分离，集中式管理配置。","slug":"golang-config","published":0,"updated":"2018-09-15T07:13:16.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cp40000slm4fte7t9ms","content":"<p>最近在用 Golang 写微服务，故而研究了一下 Golang 的各种配置方案，结合自己项目中的配置选型，来谈谈 Golang 中如何进行优雅地配置。</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>在开发中，我们需要面对各种各样的环境，开发环境、测试环境、生产环境等。并且，各个环境的参数和配置各不相同，比如服务器配置、数据库连接等。那么我们就需要在不同的环境下使用不同的配置。</p>\n<p>提供配置数据的方式很多，但不外乎配置文件、环境变量以及命令行选项等。考虑到多个环境，一个良好的应用配置层次应该是这样的：</p>\n<ul>\n<li>程序里内置配置项的初始默认值。</li>\n<li>配置文件中的配置项值可以覆盖程序内配置项的默认值。</li>\n<li>命令行选项和参数值具有最高优先级，可以覆盖前两层的配置项值。</li>\n</ul>\n<h2 id=\"常见的配置方案\"><a href=\"#常见的配置方案\" class=\"headerlink\" title=\"常见的配置方案\"></a>常见的配置方案</h2><p>配置文件是一种常见的配置方案，通过创建多个配置文件，如 json 文件或 yaml 文件，然后以命名区分环境，开发环境为 <code>development.json</code>，测试环境为 <code>test.json</code>，生产环境为 <code>production.json</code>。之后在系统中设置环境变量，如 <code>export ENV_APP=development</code>，让程序根据环境变量读取相应的配置文件。</p>\n<p>这种配置方案使用起来很简单，也满足我们前面所说的良好的应用配置层次。但是在微服务的场景下，可能会遇到一些问题：</p>\n<ul>\n<li><p>假如有多个服务使用了同一个配置，如数据库、消息队列等配置，并且写在了各自的配置文件中，那么当我们需要更改这些配置时，不得不逐个更新这些服务的配置，非常不灵活。</p>\n</li>\n<li><p>代码与配置放在一起，开发人员可以看到很多敏感的配置信息，比如生成环境的数据库地址、密码等，而这些敏感的配置信息应该只有少数人有权限能看到，这对系统的安全有重大影响。</p>\n</li>\n<li><p>对于大量相同的配置（比如数据库配置），逻辑上我们应该存放在同一个地方，保证只有唯一可靠的数据来源。</p>\n</li>\n</ul>\n<p>针对上述问题，我们很容易想到，可以将配置与程序分离，集中式管理配置。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在用 Golang 写微服务，故而研究了一下 Golang 的各种配置方案，结合自己项目中的配置选型，来谈谈 Golang 中如何进行优雅地配置。</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>在开发中，我们需要面对各种各样的环境，开发环境、测试环境、生产环境等。并且，各个环境的参数和配置各不相同，比如服务器配置、数据库连接等。那么我们就需要在不同的环境下使用不同的配置。</p>\n<p>提供配置数据的方式很多，但不外乎配置文件、环境变量以及命令行选项等。考虑到多个环境，一个良好的应用配置层次应该是这样的：</p>\n<ul>\n<li>程序里内置配置项的初始默认值。</li>\n<li>配置文件中的配置项值可以覆盖程序内配置项的默认值。</li>\n<li>命令行选项和参数值具有最高优先级，可以覆盖前两层的配置项值。</li>\n</ul>\n<h2 id=\"常见的配置方案\"><a href=\"#常见的配置方案\" class=\"headerlink\" title=\"常见的配置方案\"></a>常见的配置方案</h2><p>配置文件是一种常见的配置方案，通过创建多个配置文件，如 json 文件或 yaml 文件，然后以命名区分环境，开发环境为 <code>development.json</code>，测试环境为 <code>test.json</code>，生产环境为 <code>production.json</code>。之后在系统中设置环境变量，如 <code>export ENV_APP=development</code>，让程序根据环境变量读取相应的配置文件。</p>\n<p>这种配置方案使用起来很简单，也满足我们前面所说的良好的应用配置层次。但是在微服务的场景下，可能会遇到一些问题：</p>\n<ul>\n<li><p>假如有多个服务使用了同一个配置，如数据库、消息队列等配置，并且写在了各自的配置文件中，那么当我们需要更改这些配置时，不得不逐个更新这些服务的配置，非常不灵活。</p>\n</li>\n<li><p>代码与配置放在一起，开发人员可以看到很多敏感的配置信息，比如生成环境的数据库地址、密码等，而这些敏感的配置信息应该只有少数人有权限能看到，这对系统的安全有重大影响。</p>\n</li>\n<li><p>对于大量相同的配置（比如数据库配置），逻辑上我们应该存放在同一个地方，保证只有唯一可靠的数据来源。</p>\n</li>\n</ul>\n<p>针对上述问题，我们很容易想到，可以将配置与程序分离，集中式管理配置。</p>\n"},{"title":"在 Node 应用中部署 New Relic","date":"2017-04-12T13:25:16.000Z","_content":"\n[New Relic](https://newrelic.com/) 是一个很强大的应用性能监控工具，目前专注于SaaS和App性能管理业务，它支持支持agent和API传送数据，能够对部署在本地或在云中的web应用程序进行监控、故障修复、诊断、线程分析以及容量计划。\n\n文档：https://docs.newrelic.com/docs/agents/nodejs-agent\n\n一. 注册帐号\n\nhttps://newrelic.com/signup\n\n获取自己的 `license key`：\n\n\n二. 安装 New Relic\n\n1. 首先要确保满足 New Relic 的[系统要求](https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent)，尤其是要确认你正在使用的 Node 版本是否受支持。\n\n2. 在要监控的项目里安装 newrelic：\n\n    ```bash\n    npm install newrelic --save\n    ```\n\n3. 把 `node_modules/newrelic` 目录下的 `newrelic.js` 拷贝到项目的根目录，并编辑 `newrelic.js`，设置 `license_key` 为自己的 `license key`，然后设置一个有意义的 `app_name`。\n\n4. 在程序入口文件的第一行加上：\n\n    ```js\n    require('newrelic');\n    ```\n\n5. 重启项目","source":"_drafts/add-newrelic.md","raw":"---\ntitle: 在 Node 应用中部署 New Relic\ndate: 2017-04-12 21:25:16\ntags: \n    - Node.js\n    - APM\ncategory: 码梦为生\n---\n\n[New Relic](https://newrelic.com/) 是一个很强大的应用性能监控工具，目前专注于SaaS和App性能管理业务，它支持支持agent和API传送数据，能够对部署在本地或在云中的web应用程序进行监控、故障修复、诊断、线程分析以及容量计划。\n\n文档：https://docs.newrelic.com/docs/agents/nodejs-agent\n\n一. 注册帐号\n\nhttps://newrelic.com/signup\n\n获取自己的 `license key`：\n\n\n二. 安装 New Relic\n\n1. 首先要确保满足 New Relic 的[系统要求](https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent)，尤其是要确认你正在使用的 Node 版本是否受支持。\n\n2. 在要监控的项目里安装 newrelic：\n\n    ```bash\n    npm install newrelic --save\n    ```\n\n3. 把 `node_modules/newrelic` 目录下的 `newrelic.js` 拷贝到项目的根目录，并编辑 `newrelic.js`，设置 `license_key` 为自己的 `license key`，然后设置一个有意义的 `app_name`。\n\n4. 在程序入口文件的第一行加上：\n\n    ```js\n    require('newrelic');\n    ```\n\n5. 重启项目","slug":"add-newrelic","published":0,"updated":"2018-09-28T11:27:13.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cp80002slm42y9oetv7","content":"<p><a href=\"https://newrelic.com/\" target=\"_blank\" rel=\"noopener\">New Relic</a> 是一个很强大的应用性能监控工具，目前专注于SaaS和App性能管理业务，它支持支持agent和API传送数据，能够对部署在本地或在云中的web应用程序进行监控、故障修复、诊断、线程分析以及容量计划。</p>\n<p>文档：<a href=\"https://docs.newrelic.com/docs/agents/nodejs-agent\" target=\"_blank\" rel=\"noopener\">https://docs.newrelic.com/docs/agents/nodejs-agent</a></p>\n<p>一. 注册帐号</p>\n<p><a href=\"https://newrelic.com/signup\" target=\"_blank\" rel=\"noopener\">https://newrelic.com/signup</a></p>\n<p>获取自己的 <code>license key</code>：</p>\n<p>二. 安装 New Relic</p>\n<ol>\n<li><p>首先要确保满足 New Relic 的<a href=\"https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent\" target=\"_blank\" rel=\"noopener\">系统要求</a>，尤其是要确认你正在使用的 Node 版本是否受支持。</p>\n</li>\n<li><p>在要监控的项目里安装 newrelic：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install newrelic --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把 <code>node_modules/newrelic</code> 目录下的 <code>newrelic.js</code> 拷贝到项目的根目录，并编辑 <code>newrelic.js</code>，设置 <code>license_key</code> 为自己的 <code>license key</code>，然后设置一个有意义的 <code>app_name</code>。</p>\n</li>\n<li><p>在程序入口文件的第一行加上：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'newrelic'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启项目</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://newrelic.com/\" target=\"_blank\" rel=\"noopener\">New Relic</a> 是一个很强大的应用性能监控工具，目前专注于SaaS和App性能管理业务，它支持支持agent和API传送数据，能够对部署在本地或在云中的web应用程序进行监控、故障修复、诊断、线程分析以及容量计划。</p>\n<p>文档：<a href=\"https://docs.newrelic.com/docs/agents/nodejs-agent\" target=\"_blank\" rel=\"noopener\">https://docs.newrelic.com/docs/agents/nodejs-agent</a></p>\n<p>一. 注册帐号</p>\n<p><a href=\"https://newrelic.com/signup\" target=\"_blank\" rel=\"noopener\">https://newrelic.com/signup</a></p>\n<p>获取自己的 <code>license key</code>：</p>\n<p>二. 安装 New Relic</p>\n<ol>\n<li><p>首先要确保满足 New Relic 的<a href=\"https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/compatibility-requirements-nodejs-agent\" target=\"_blank\" rel=\"noopener\">系统要求</a>，尤其是要确认你正在使用的 Node 版本是否受支持。</p>\n</li>\n<li><p>在要监控的项目里安装 newrelic：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install newrelic --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把 <code>node_modules/newrelic</code> 目录下的 <code>newrelic.js</code> 拷贝到项目的根目录，并编辑 <code>newrelic.js</code>，设置 <code>license_key</code> 为自己的 <code>license key</code>，然后设置一个有意义的 <code>app_name</code>。</p>\n</li>\n<li><p>在程序入口文件的第一行加上：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'newrelic'</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启项目</p>\n</li>\n</ol>\n"},{"title":"基于二进制日志文件的 MySQL 复制实践","date":"2017-12-04T07:12:51.000Z","_content":"\n本篇介绍基于二进制日志文件的 MySQL 复制，不谈原理，只讲实践。\n\n1. 创建复制账号\n2. 配置 master\n3. 获取 master 二进制文件坐标\n4. 配置 slave\n5. 配置 slave 和 master 的通信\n6. 开始复制\n\n<!--more-->\n\n## 1. 在 master 创建复制账号\n\n每个 slave 都会使用 MySQL 用户名和密码连接到 master ，所以 master 上必须有一个用户帐户，并且被授予 `REPLICATION SLAVE` 权限。建议创建单独的复制账号。\n\n```sh\nmysql> CREATE USER 'repl'@'%' IDENTIFIED BY 'replpass';\nmysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';\n```\n\n## 2. 配置 master\n\nmaster 需要开启二进制日志，以及指定一个独一无二的服务器 ID。在主库的 `my.cnf` 文件中增加或修改如下内容。修改完之后，需要重启 MySQL。\n\n```cnf\n[mysqld]\nlog-bin = mysql-bin\nserver-id = 10\n```\n\n- `log-bin`: 二进制文件的名称前缀。\n- `server_id`: 复制组中的每个服务器都必须配置唯一的服务器标识。此 ID 用于标识组中的单个服务器，并且必须是 1 到 2^32 - 1 之间的正整数。一种通用的做法是使用服务器IP地址的末8位。\n\n## 3. 获取 master 二进制文件坐标\n\n为了配置 slave 在正确的位置启动复制过程，需要 master 的二进制日志中的当前坐标。\n\n如果 master 没有数据，直接使用 `SHOW MASTER STATUS` 获取 master 的二进制文件名和位置（File & Position）。\n\n如果 master 有数据，并且只包含InnoDB表，使用下面命令备份（前提是 master 配置好并重启）：\n\n```sh\nmysqldump -uroot -p123 -h127.0.0.1 -P3306 --single-transaction --master-data=2 --default-character-set=utf8mb4 --quick --triggers --hex-blob -B weibo_service > /root/weibo_service.sql\n```\n\n- 使用 `--master-data=2` 选项后，`CHANGE MASTER TO` 语句将写在备份文件开头的SQL注释中，如：\n\n  ```sql\n  -- CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=313;\n  ```\n\n  在 slave 导入备份后，配置 slave 时，就可以直接使用上面的 master 二进制文件名和位置。\n\n## 4. 配置 slave\n\n如果 slave 的 server ID 尚未设置，或者当前值与 master 的值冲突，关闭 slave 并编辑配置文件的 [mysqld] 部分以指定一个唯一的 server ID，然后重启。\n\n```config\n[mysqld]\nlog_bin = mysql-bin\nserver_id = 2\nrelay-log = /var/lib/mysql/mysql-relay-bin\nlog-slave-updates = 1\nread-only = 1\nrelicate-do-db = test\n```\n\n只有 `serve_id` 是必需的。其中一些选项只是显式地列出了默认值。\n\n- `server-id`: 为了简便起见，我们将主库和备库上的log-bin设置为相同的值。如果省略server-id（或者将其明确设置为默认值0），则 slave 拒绝连接到 master。\n\n- `log-bin`: 其实不需要在从站上启用二进制日志记录（log_bin）以进行复制设置，但是，如果在从站上启用二进制日志记录，则可以使用从站的二进制日志进行数据备份和崩溃恢复，还可以使用从站作为更复杂的复制拓扑的一部分。例如，这 slave 作为其他 slave 的 master。\n\n- `relay-log`: 指定中继日志的位置和命名。通过设置relay_log可以避免中继日志文件基于机器名来命名。推荐设置。\n\n- `log-slave-updates`: 允许备库将其重放的事件也记录到自身的二进制日志中。这会给备库增加额外的工作，但有时候只开启了二进制日志，却没有开启 log_slave_updates 可 能会碰到一些奇怪的现象。例如，当配置错误时可能会导致备库数据被修改。如果可能的话，最好使用 read_only 配置选项。\n\n- `read-only`: 配置备库为只读。可以阻止大部分用户更改非临时表，除了复制SQL线程和其他拥有超级权限的用户之外，这也是要尽量避免给正常账号授予超级权限的原因之一。\n\n- `relicate-do-db`: 指定主从复制的数据库\n\n## 5. 配置 slave 和 master 通信进行复制\n\n在 slave 上执行以下语句：\n\n```sh\nmysql> CHANGE MASTER TO\n    ->     MASTER_HOST='master_host_name',              # master ip\n    ->     MASTER_USER='replication_user_name',         # 复制账号\n    ->     MASTER_PASSWORD='replication_password',      # 复制密码\n    ->     MASTER_LOG_FILE='recorded_log_file_name',    # master 二进制日志文件名\n    ->     MASTER_LOG_POS=recorded_log_position;        # master 二进制日志文件位置\n```\n\n## 6. 开始复制\n\n在 slave 上执行以下语句：\n\n```sh\nmysql> START SLAVE;\n```\n\n再次检查复制是否正确执行：\n\n```sh\nmysql> SHOW SLAVE STATUS\\G\n******************************* 1. row **************************\n      Slave一IO_State : Waiting for master to send event\n          Master_Host : serverl\n          Master_User : repl\n            MasterPort: 3306\n          ConnectRetry: 60\n      Master_Log_File : mysql-bin.000001\n  Read_Master_Log_Pos : 164\n        Relay_Log_File: mysql-relay-bin.000001\n        Relay_Log_Pos : 164\nRelayJ1aster_Log_File : mysql-bin.000001\n      Slave_IO_Running: Yes\n    Slave_SQL_Running : Yes \n                    ......\nSeconds_Behind_Master : 0\n```\n","source":"_drafts/mysql-master-slave.md","raw":"---\ntitle: 基于二进制日志文件的 MySQL 复制实践\ndate: 2017-12-04 15:12:51\ntags: \n  - MySQL\n  - 主从复制\n  - 码梦为生\n---\n\n本篇介绍基于二进制日志文件的 MySQL 复制，不谈原理，只讲实践。\n\n1. 创建复制账号\n2. 配置 master\n3. 获取 master 二进制文件坐标\n4. 配置 slave\n5. 配置 slave 和 master 的通信\n6. 开始复制\n\n<!--more-->\n\n## 1. 在 master 创建复制账号\n\n每个 slave 都会使用 MySQL 用户名和密码连接到 master ，所以 master 上必须有一个用户帐户，并且被授予 `REPLICATION SLAVE` 权限。建议创建单独的复制账号。\n\n```sh\nmysql> CREATE USER 'repl'@'%' IDENTIFIED BY 'replpass';\nmysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';\n```\n\n## 2. 配置 master\n\nmaster 需要开启二进制日志，以及指定一个独一无二的服务器 ID。在主库的 `my.cnf` 文件中增加或修改如下内容。修改完之后，需要重启 MySQL。\n\n```cnf\n[mysqld]\nlog-bin = mysql-bin\nserver-id = 10\n```\n\n- `log-bin`: 二进制文件的名称前缀。\n- `server_id`: 复制组中的每个服务器都必须配置唯一的服务器标识。此 ID 用于标识组中的单个服务器，并且必须是 1 到 2^32 - 1 之间的正整数。一种通用的做法是使用服务器IP地址的末8位。\n\n## 3. 获取 master 二进制文件坐标\n\n为了配置 slave 在正确的位置启动复制过程，需要 master 的二进制日志中的当前坐标。\n\n如果 master 没有数据，直接使用 `SHOW MASTER STATUS` 获取 master 的二进制文件名和位置（File & Position）。\n\n如果 master 有数据，并且只包含InnoDB表，使用下面命令备份（前提是 master 配置好并重启）：\n\n```sh\nmysqldump -uroot -p123 -h127.0.0.1 -P3306 --single-transaction --master-data=2 --default-character-set=utf8mb4 --quick --triggers --hex-blob -B weibo_service > /root/weibo_service.sql\n```\n\n- 使用 `--master-data=2` 选项后，`CHANGE MASTER TO` 语句将写在备份文件开头的SQL注释中，如：\n\n  ```sql\n  -- CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=313;\n  ```\n\n  在 slave 导入备份后，配置 slave 时，就可以直接使用上面的 master 二进制文件名和位置。\n\n## 4. 配置 slave\n\n如果 slave 的 server ID 尚未设置，或者当前值与 master 的值冲突，关闭 slave 并编辑配置文件的 [mysqld] 部分以指定一个唯一的 server ID，然后重启。\n\n```config\n[mysqld]\nlog_bin = mysql-bin\nserver_id = 2\nrelay-log = /var/lib/mysql/mysql-relay-bin\nlog-slave-updates = 1\nread-only = 1\nrelicate-do-db = test\n```\n\n只有 `serve_id` 是必需的。其中一些选项只是显式地列出了默认值。\n\n- `server-id`: 为了简便起见，我们将主库和备库上的log-bin设置为相同的值。如果省略server-id（或者将其明确设置为默认值0），则 slave 拒绝连接到 master。\n\n- `log-bin`: 其实不需要在从站上启用二进制日志记录（log_bin）以进行复制设置，但是，如果在从站上启用二进制日志记录，则可以使用从站的二进制日志进行数据备份和崩溃恢复，还可以使用从站作为更复杂的复制拓扑的一部分。例如，这 slave 作为其他 slave 的 master。\n\n- `relay-log`: 指定中继日志的位置和命名。通过设置relay_log可以避免中继日志文件基于机器名来命名。推荐设置。\n\n- `log-slave-updates`: 允许备库将其重放的事件也记录到自身的二进制日志中。这会给备库增加额外的工作，但有时候只开启了二进制日志，却没有开启 log_slave_updates 可 能会碰到一些奇怪的现象。例如，当配置错误时可能会导致备库数据被修改。如果可能的话，最好使用 read_only 配置选项。\n\n- `read-only`: 配置备库为只读。可以阻止大部分用户更改非临时表，除了复制SQL线程和其他拥有超级权限的用户之外，这也是要尽量避免给正常账号授予超级权限的原因之一。\n\n- `relicate-do-db`: 指定主从复制的数据库\n\n## 5. 配置 slave 和 master 通信进行复制\n\n在 slave 上执行以下语句：\n\n```sh\nmysql> CHANGE MASTER TO\n    ->     MASTER_HOST='master_host_name',              # master ip\n    ->     MASTER_USER='replication_user_name',         # 复制账号\n    ->     MASTER_PASSWORD='replication_password',      # 复制密码\n    ->     MASTER_LOG_FILE='recorded_log_file_name',    # master 二进制日志文件名\n    ->     MASTER_LOG_POS=recorded_log_position;        # master 二进制日志文件位置\n```\n\n## 6. 开始复制\n\n在 slave 上执行以下语句：\n\n```sh\nmysql> START SLAVE;\n```\n\n再次检查复制是否正确执行：\n\n```sh\nmysql> SHOW SLAVE STATUS\\G\n******************************* 1. row **************************\n      Slave一IO_State : Waiting for master to send event\n          Master_Host : serverl\n          Master_User : repl\n            MasterPort: 3306\n          ConnectRetry: 60\n      Master_Log_File : mysql-bin.000001\n  Read_Master_Log_Pos : 164\n        Relay_Log_File: mysql-relay-bin.000001\n        Relay_Log_Pos : 164\nRelayJ1aster_Log_File : mysql-bin.000001\n      Slave_IO_Running: Yes\n    Slave_SQL_Running : Yes \n                    ......\nSeconds_Behind_Master : 0\n```\n","slug":"mysql-master-slave","published":0,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpc0006slm4tnmcuu6k","content":"<p>本篇介绍基于二进制日志文件的 MySQL 复制，不谈原理，只讲实践。</p>\n<ol>\n<li>创建复制账号</li>\n<li>配置 master</li>\n<li>获取 master 二进制文件坐标</li>\n<li>配置 slave</li>\n<li>配置 slave 和 master 的通信</li>\n<li>开始复制</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"1-在-master-创建复制账号\"><a href=\"#1-在-master-创建复制账号\" class=\"headerlink\" title=\"1. 在 master 创建复制账号\"></a>1. 在 master 创建复制账号</h2><p>每个 slave 都会使用 MySQL 用户名和密码连接到 master ，所以 master 上必须有一个用户帐户，并且被授予 <code>REPLICATION SLAVE</code> 权限。建议创建单独的复制账号。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER <span class=\"string\">'repl'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'replpass'</span>;</span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class=\"string\">'repl'</span>@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置-master\"><a href=\"#2-配置-master\" class=\"headerlink\" title=\"2. 配置 master\"></a>2. 配置 master</h2><p>master 需要开启二进制日志，以及指定一个独一无二的服务器 ID。在主库的 <code>my.cnf</code> 文件中增加或修改如下内容。修改完之后，需要重启 MySQL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin = mysql-bin</span><br><span class=\"line\">server-id = 10</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>log-bin</code>: 二进制文件的名称前缀。</li>\n<li><code>server_id</code>: 复制组中的每个服务器都必须配置唯一的服务器标识。此 ID 用于标识组中的单个服务器，并且必须是 1 到 2^32 - 1 之间的正整数。一种通用的做法是使用服务器IP地址的末8位。</li>\n</ul>\n<h2 id=\"3-获取-master-二进制文件坐标\"><a href=\"#3-获取-master-二进制文件坐标\" class=\"headerlink\" title=\"3. 获取 master 二进制文件坐标\"></a>3. 获取 master 二进制文件坐标</h2><p>为了配置 slave 在正确的位置启动复制过程，需要 master 的二进制日志中的当前坐标。</p>\n<p>如果 master 没有数据，直接使用 <code>SHOW MASTER STATUS</code> 获取 master 的二进制文件名和位置（File &amp; Position）。</p>\n<p>如果 master 有数据，并且只包含InnoDB表，使用下面命令备份（前提是 master 配置好并重启）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -p123 -h127.0.0.1 -P3306 --single-transaction --master-data=2 --default-character-set=utf8mb4 --quick --triggers --hex-blob -B weibo_service &gt; /root/weibo_service.sql</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用 <code>--master-data=2</code> 选项后，<code>CHANGE MASTER TO</code> 语句将写在备份文件开头的SQL注释中，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=313;</span></span><br></pre></td></tr></table></figure>\n<p>在 slave 导入备份后，配置 slave 时，就可以直接使用上面的 master 二进制文件名和位置。</p>\n</li>\n</ul>\n<h2 id=\"4-配置-slave\"><a href=\"#4-配置-slave\" class=\"headerlink\" title=\"4. 配置 slave\"></a>4. 配置 slave</h2><p>如果 slave 的 server ID 尚未设置，或者当前值与 master 的值冲突，关闭 slave 并编辑配置文件的 [mysqld] 部分以指定一个唯一的 server ID，然后重启。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log_bin = mysql-bin</span><br><span class=\"line\">server_id = 2</span><br><span class=\"line\">relay-log = /var/lib/mysql/mysql-relay-bin</span><br><span class=\"line\">log-slave-updates = 1</span><br><span class=\"line\">read-only = 1</span><br><span class=\"line\">relicate-do-db = test</span><br></pre></td></tr></table></figure>\n<p>只有 <code>serve_id</code> 是必需的。其中一些选项只是显式地列出了默认值。</p>\n<ul>\n<li><p><code>server-id</code>: 为了简便起见，我们将主库和备库上的log-bin设置为相同的值。如果省略server-id（或者将其明确设置为默认值0），则 slave 拒绝连接到 master。</p>\n</li>\n<li><p><code>log-bin</code>: 其实不需要在从站上启用二进制日志记录（log_bin）以进行复制设置，但是，如果在从站上启用二进制日志记录，则可以使用从站的二进制日志进行数据备份和崩溃恢复，还可以使用从站作为更复杂的复制拓扑的一部分。例如，这 slave 作为其他 slave 的 master。</p>\n</li>\n<li><p><code>relay-log</code>: 指定中继日志的位置和命名。通过设置relay_log可以避免中继日志文件基于机器名来命名。推荐设置。</p>\n</li>\n<li><p><code>log-slave-updates</code>: 允许备库将其重放的事件也记录到自身的二进制日志中。这会给备库增加额外的工作，但有时候只开启了二进制日志，却没有开启 log_slave_updates 可 能会碰到一些奇怪的现象。例如，当配置错误时可能会导致备库数据被修改。如果可能的话，最好使用 read_only 配置选项。</p>\n</li>\n<li><p><code>read-only</code>: 配置备库为只读。可以阻止大部分用户更改非临时表，除了复制SQL线程和其他拥有超级权限的用户之外，这也是要尽量避免给正常账号授予超级权限的原因之一。</p>\n</li>\n<li><p><code>relicate-do-db</code>: 指定主从复制的数据库</p>\n</li>\n</ul>\n<h2 id=\"5-配置-slave-和-master-通信进行复制\"><a href=\"#5-配置-slave-和-master-通信进行复制\" class=\"headerlink\" title=\"5. 配置 slave 和 master 通信进行复制\"></a>5. 配置 slave 和 master 通信进行复制</h2><p>在 slave 上执行以下语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CHANGE MASTER TO</span><br><span class=\"line\">    -&gt;     MASTER_HOST=<span class=\"string\">'master_host_name'</span>,              <span class=\"comment\"># master ip</span></span><br><span class=\"line\">    -&gt;     MASTER_USER=<span class=\"string\">'replication_user_name'</span>,         <span class=\"comment\"># 复制账号</span></span><br><span class=\"line\">    -&gt;     MASTER_PASSWORD=<span class=\"string\">'replication_password'</span>,      <span class=\"comment\"># 复制密码</span></span><br><span class=\"line\">    -&gt;     MASTER_LOG_FILE=<span class=\"string\">'recorded_log_file_name'</span>,    <span class=\"comment\"># master 二进制日志文件名</span></span><br><span class=\"line\">    -&gt;     MASTER_LOG_POS=recorded_log_position;        <span class=\"comment\"># master 二进制日志文件位置</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-开始复制\"><a href=\"#6-开始复制\" class=\"headerlink\" title=\"6. 开始复制\"></a>6. 开始复制</h2><p>在 slave 上执行以下语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; START SLAVE;</span><br></pre></td></tr></table></figure>\n<p>再次检查复制是否正确执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW SLAVE STATUS\\G</span><br><span class=\"line\">******************************* 1. row **************************</span><br><span class=\"line\">      Slave一IO_State : Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">          Master_Host : serverl</span><br><span class=\"line\">          Master_User : repl</span><br><span class=\"line\">            MasterPort: 3306</span><br><span class=\"line\">          ConnectRetry: 60</span><br><span class=\"line\">      Master_Log_File : mysql-bin.000001</span><br><span class=\"line\">  Read_Master_Log_Pos : 164</span><br><span class=\"line\">        Relay_Log_File: mysql-relay-bin.000001</span><br><span class=\"line\">        Relay_Log_Pos : 164</span><br><span class=\"line\">RelayJ1aster_Log_File : mysql-bin.000001</span><br><span class=\"line\">      Slave_IO_Running: Yes</span><br><span class=\"line\">    Slave_SQL_Running : Yes </span><br><span class=\"line\">                    ......</span><br><span class=\"line\">Seconds_Behind_Master : 0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>本篇介绍基于二进制日志文件的 MySQL 复制，不谈原理，只讲实践。</p>\n<ol>\n<li>创建复制账号</li>\n<li>配置 master</li>\n<li>获取 master 二进制文件坐标</li>\n<li>配置 slave</li>\n<li>配置 slave 和 master 的通信</li>\n<li>开始复制</li>\n</ol>","more":"<h2 id=\"1-在-master-创建复制账号\"><a href=\"#1-在-master-创建复制账号\" class=\"headerlink\" title=\"1. 在 master 创建复制账号\"></a>1. 在 master 创建复制账号</h2><p>每个 slave 都会使用 MySQL 用户名和密码连接到 master ，所以 master 上必须有一个用户帐户，并且被授予 <code>REPLICATION SLAVE</code> 权限。建议创建单独的复制账号。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE USER <span class=\"string\">'repl'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'replpass'</span>;</span><br><span class=\"line\">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO <span class=\"string\">'repl'</span>@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置-master\"><a href=\"#2-配置-master\" class=\"headerlink\" title=\"2. 配置 master\"></a>2. 配置 master</h2><p>master 需要开启二进制日志，以及指定一个独一无二的服务器 ID。在主库的 <code>my.cnf</code> 文件中增加或修改如下内容。修改完之后，需要重启 MySQL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin = mysql-bin</span><br><span class=\"line\">server-id = 10</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>log-bin</code>: 二进制文件的名称前缀。</li>\n<li><code>server_id</code>: 复制组中的每个服务器都必须配置唯一的服务器标识。此 ID 用于标识组中的单个服务器，并且必须是 1 到 2^32 - 1 之间的正整数。一种通用的做法是使用服务器IP地址的末8位。</li>\n</ul>\n<h2 id=\"3-获取-master-二进制文件坐标\"><a href=\"#3-获取-master-二进制文件坐标\" class=\"headerlink\" title=\"3. 获取 master 二进制文件坐标\"></a>3. 获取 master 二进制文件坐标</h2><p>为了配置 slave 在正确的位置启动复制过程，需要 master 的二进制日志中的当前坐标。</p>\n<p>如果 master 没有数据，直接使用 <code>SHOW MASTER STATUS</code> 获取 master 的二进制文件名和位置（File &amp; Position）。</p>\n<p>如果 master 有数据，并且只包含InnoDB表，使用下面命令备份（前提是 master 配置好并重启）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uroot -p123 -h127.0.0.1 -P3306 --single-transaction --master-data=2 --default-character-set=utf8mb4 --quick --triggers --hex-blob -B weibo_service &gt; /root/weibo_service.sql</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用 <code>--master-data=2</code> 选项后，<code>CHANGE MASTER TO</code> 语句将写在备份文件开头的SQL注释中，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=313;</span></span><br></pre></td></tr></table></figure>\n<p>在 slave 导入备份后，配置 slave 时，就可以直接使用上面的 master 二进制文件名和位置。</p>\n</li>\n</ul>\n<h2 id=\"4-配置-slave\"><a href=\"#4-配置-slave\" class=\"headerlink\" title=\"4. 配置 slave\"></a>4. 配置 slave</h2><p>如果 slave 的 server ID 尚未设置，或者当前值与 master 的值冲突，关闭 slave 并编辑配置文件的 [mysqld] 部分以指定一个唯一的 server ID，然后重启。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log_bin = mysql-bin</span><br><span class=\"line\">server_id = 2</span><br><span class=\"line\">relay-log = /var/lib/mysql/mysql-relay-bin</span><br><span class=\"line\">log-slave-updates = 1</span><br><span class=\"line\">read-only = 1</span><br><span class=\"line\">relicate-do-db = test</span><br></pre></td></tr></table></figure>\n<p>只有 <code>serve_id</code> 是必需的。其中一些选项只是显式地列出了默认值。</p>\n<ul>\n<li><p><code>server-id</code>: 为了简便起见，我们将主库和备库上的log-bin设置为相同的值。如果省略server-id（或者将其明确设置为默认值0），则 slave 拒绝连接到 master。</p>\n</li>\n<li><p><code>log-bin</code>: 其实不需要在从站上启用二进制日志记录（log_bin）以进行复制设置，但是，如果在从站上启用二进制日志记录，则可以使用从站的二进制日志进行数据备份和崩溃恢复，还可以使用从站作为更复杂的复制拓扑的一部分。例如，这 slave 作为其他 slave 的 master。</p>\n</li>\n<li><p><code>relay-log</code>: 指定中继日志的位置和命名。通过设置relay_log可以避免中继日志文件基于机器名来命名。推荐设置。</p>\n</li>\n<li><p><code>log-slave-updates</code>: 允许备库将其重放的事件也记录到自身的二进制日志中。这会给备库增加额外的工作，但有时候只开启了二进制日志，却没有开启 log_slave_updates 可 能会碰到一些奇怪的现象。例如，当配置错误时可能会导致备库数据被修改。如果可能的话，最好使用 read_only 配置选项。</p>\n</li>\n<li><p><code>read-only</code>: 配置备库为只读。可以阻止大部分用户更改非临时表，除了复制SQL线程和其他拥有超级权限的用户之外，这也是要尽量避免给正常账号授予超级权限的原因之一。</p>\n</li>\n<li><p><code>relicate-do-db</code>: 指定主从复制的数据库</p>\n</li>\n</ul>\n<h2 id=\"5-配置-slave-和-master-通信进行复制\"><a href=\"#5-配置-slave-和-master-通信进行复制\" class=\"headerlink\" title=\"5. 配置 slave 和 master 通信进行复制\"></a>5. 配置 slave 和 master 通信进行复制</h2><p>在 slave 上执行以下语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CHANGE MASTER TO</span><br><span class=\"line\">    -&gt;     MASTER_HOST=<span class=\"string\">'master_host_name'</span>,              <span class=\"comment\"># master ip</span></span><br><span class=\"line\">    -&gt;     MASTER_USER=<span class=\"string\">'replication_user_name'</span>,         <span class=\"comment\"># 复制账号</span></span><br><span class=\"line\">    -&gt;     MASTER_PASSWORD=<span class=\"string\">'replication_password'</span>,      <span class=\"comment\"># 复制密码</span></span><br><span class=\"line\">    -&gt;     MASTER_LOG_FILE=<span class=\"string\">'recorded_log_file_name'</span>,    <span class=\"comment\"># master 二进制日志文件名</span></span><br><span class=\"line\">    -&gt;     MASTER_LOG_POS=recorded_log_position;        <span class=\"comment\"># master 二进制日志文件位置</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-开始复制\"><a href=\"#6-开始复制\" class=\"headerlink\" title=\"6. 开始复制\"></a>6. 开始复制</h2><p>在 slave 上执行以下语句：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; START SLAVE;</span><br></pre></td></tr></table></figure>\n<p>再次检查复制是否正确执行：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SHOW SLAVE STATUS\\G</span><br><span class=\"line\">******************************* 1. row **************************</span><br><span class=\"line\">      Slave一IO_State : Waiting <span class=\"keyword\">for</span> master to send event</span><br><span class=\"line\">          Master_Host : serverl</span><br><span class=\"line\">          Master_User : repl</span><br><span class=\"line\">            MasterPort: 3306</span><br><span class=\"line\">          ConnectRetry: 60</span><br><span class=\"line\">      Master_Log_File : mysql-bin.000001</span><br><span class=\"line\">  Read_Master_Log_Pos : 164</span><br><span class=\"line\">        Relay_Log_File: mysql-relay-bin.000001</span><br><span class=\"line\">        Relay_Log_Pos : 164</span><br><span class=\"line\">RelayJ1aster_Log_File : mysql-bin.000001</span><br><span class=\"line\">      Slave_IO_Running: Yes</span><br><span class=\"line\">    Slave_SQL_Running : Yes </span><br><span class=\"line\">                    ......</span><br><span class=\"line\">Seconds_Behind_Master : 0</span><br></pre></td></tr></table></figure>"},{"title":"如何写一个 golang 日志库","date":"2018-12-05T15:41:10.000Z","_content":"\nGolang 的日志库有很多，例如：logrus、gokit 的 log、uber 的 zap 等，在观察了这几个比较流行的日志库后，决定自己造一个日志库的轮子。\n\n## 日志设计\n\n设计一个好的日志库首先需要考虑以下几个\b问题：\n\n1. 日志格式\n2. 日志级别\n3. 并发安全\n2. 性能问题\n\n接下来我们一个个来讨论。\n\n### 日志格式\n\n常见的日志格式分为两种：\n- 非结构化的：字符串形式\n- 结构化的：JSON形式、logfmt形式\n\n#### 非结构化的日志\n\n非结构化的日志通常记录一个字符串，或者\b是类似 fmt.Printf 的格式化输出，如：\n\n```go\nlog.Printf(\"something happened: %v\", \"unknown error\")\n\n// Output:\n// 2018/12/07 20:05:50 something happened: unknown error\n```\n\b\n使用非结构化日志的问题在于，每次写日志都需要\b硬编码一个特定的字符串，没有一个固定的格式，也难以被其他程序解析。\n\n#### 结构化的日志\n\n结构化的日志记录通常使用 JSON 格式或 Logfmt 格式\n\n### 日志级别\n\n日志级别用于标识事件的严重性，同时也可以过滤日志的输出。\n\n在实际项目开发中，我们经常需要写不同级别的日志，比如调试的时候我们会写 debug 日志，错误\b处理时我们会写 error 日志。并且，在开发环境中，我们希望能输出所有级别的日志，而在生产环境中，我们一般只希望输出 error 日志。\n\n这里我们首先要了解下有哪些日志级别，参考 [log4j](https://logging.apache.org/log4j/2.x/) 日志库，log4j 定义\b了8种日志级别：\n\n|级别|描述|\n|-|-|-|\n|ALL    |记录所有事件|\n|TRACE  |比 DEBUG \b粒度更细的事件，用于调试应用程序|\n|DEBUG  |细粒度的事件，用于调试应用程序|\n|INFO   |粗粒度的事件，用于显示应用程序的进度|\n|WARN   |可能导致错误的事件|\n|ERROR  |错误事件，但应用程序可能还能继续运行|\n|FATAL  |严重的错误事件，可能会导致应用程序终止运行|\n|OFF    |不会记录任何事件|\n\n上面的日志级别从低到高排序，ALL 级别最低，OFF 级别最高。log4j 建议只使用四个级别，分别是 DEBUG、INFO、WARN、ERROR，一般项目里常用的也就这几个。\n\n当你设置了一个日志级别之后，只有比这个级别高的或者相等的日志才会输出。例如，如果设置当前的日志级别为 WARN，那么 OFF、FATAL、ERROR、WARN 4个级别的日志能正常输出，而 INFO、DEBUG、TRACE、 ALL 级别的日志则会被忽略。\n\n下面使用 Logrus 的例子来展示如何过滤 DEBUG \b和 INFO 级别的日志，使用 `log.SetLevel(log.X)` 来设置期望的日志级别。\n\n```go\npackage main\n\nimport log \"github.com/sirupsen/logrus\"\n\nfunc main() {\n\tlog.SetLevel(log.WarnLevel)\n\n\tlog.Trace(\"Trace Message!\")\n\tlog.Debug(\"Debug Message!\")\n\tlog.Info(\"Info Message!\")\n\tlog.Warn(\"Warn Message!\")\n\tlog.Error(\"Error Message!\")\n\tlog.Fatal(\"Fatal Message!\")\n}\n```\n\n运行程序后\b打印出：\n\n```sh\nWARN[0000] Warn Message!\nERRO[0000] Error Message!\nFATA[0000] Fatal Message!\n```\n\n### 并发安全\n\nasd\n\n### 性能问题\n\n\nGolang 的log包内容不多，说实话，直接用来做日志开发有些简易。主要是缺少一些功能：\n按日志级别打印和控制日志；\n日志文件自动分割；\n异步打印日志。\n\n## 开始造轮子\n\n首先\b我们需要定义一个日志的结构体：\n\n```go\ntype Logger struct {\n    level int\n    buf []byte\n}\n```\n\n我们实现的日志库将会支持4个常用的日志级别：\n\n```go\ntype Level byte\n\nconst (\n\tLevelDebug Level = 1 << iota\n\tLevelInfo\n\tLevelWarn\n\tLevelError\n)\n\nfunc (l *Logger) SetLevel(level Level) {\n\tl.mu.Lock()\n\tl.level = level\n\tl.mu.Unlock()\n}\n```\n\n## 参考\n\n- [Log4j - Wiki](https://en.wikipedia.org/wiki/Log4j)","source":"_drafts/golang-log-wheel.md","raw":"---\ntitle: 如何写一个 golang 日志库\ndate: 2018-12-05 23:41:10\ntags:\n---\n\nGolang 的日志库有很多，例如：logrus、gokit 的 log、uber 的 zap 等，在观察了这几个比较流行的日志库后，决定自己造一个日志库的轮子。\n\n## 日志设计\n\n设计一个好的日志库首先需要考虑以下几个\b问题：\n\n1. 日志格式\n2. 日志级别\n3. 并发安全\n2. 性能问题\n\n接下来我们一个个来讨论。\n\n### 日志格式\n\n常见的日志格式分为两种：\n- 非结构化的：字符串形式\n- 结构化的：JSON形式、logfmt形式\n\n#### 非结构化的日志\n\n非结构化的日志通常记录一个字符串，或者\b是类似 fmt.Printf 的格式化输出，如：\n\n```go\nlog.Printf(\"something happened: %v\", \"unknown error\")\n\n// Output:\n// 2018/12/07 20:05:50 something happened: unknown error\n```\n\b\n使用非结构化日志的问题在于，每次写日志都需要\b硬编码一个特定的字符串，没有一个固定的格式，也难以被其他程序解析。\n\n#### 结构化的日志\n\n结构化的日志记录通常使用 JSON 格式或 Logfmt 格式\n\n### 日志级别\n\n日志级别用于标识事件的严重性，同时也可以过滤日志的输出。\n\n在实际项目开发中，我们经常需要写不同级别的日志，比如调试的时候我们会写 debug 日志，错误\b处理时我们会写 error 日志。并且，在开发环境中，我们希望能输出所有级别的日志，而在生产环境中，我们一般只希望输出 error 日志。\n\n这里我们首先要了解下有哪些日志级别，参考 [log4j](https://logging.apache.org/log4j/2.x/) 日志库，log4j 定义\b了8种日志级别：\n\n|级别|描述|\n|-|-|-|\n|ALL    |记录所有事件|\n|TRACE  |比 DEBUG \b粒度更细的事件，用于调试应用程序|\n|DEBUG  |细粒度的事件，用于调试应用程序|\n|INFO   |粗粒度的事件，用于显示应用程序的进度|\n|WARN   |可能导致错误的事件|\n|ERROR  |错误事件，但应用程序可能还能继续运行|\n|FATAL  |严重的错误事件，可能会导致应用程序终止运行|\n|OFF    |不会记录任何事件|\n\n上面的日志级别从低到高排序，ALL 级别最低，OFF 级别最高。log4j 建议只使用四个级别，分别是 DEBUG、INFO、WARN、ERROR，一般项目里常用的也就这几个。\n\n当你设置了一个日志级别之后，只有比这个级别高的或者相等的日志才会输出。例如，如果设置当前的日志级别为 WARN，那么 OFF、FATAL、ERROR、WARN 4个级别的日志能正常输出，而 INFO、DEBUG、TRACE、 ALL 级别的日志则会被忽略。\n\n下面使用 Logrus 的例子来展示如何过滤 DEBUG \b和 INFO 级别的日志，使用 `log.SetLevel(log.X)` 来设置期望的日志级别。\n\n```go\npackage main\n\nimport log \"github.com/sirupsen/logrus\"\n\nfunc main() {\n\tlog.SetLevel(log.WarnLevel)\n\n\tlog.Trace(\"Trace Message!\")\n\tlog.Debug(\"Debug Message!\")\n\tlog.Info(\"Info Message!\")\n\tlog.Warn(\"Warn Message!\")\n\tlog.Error(\"Error Message!\")\n\tlog.Fatal(\"Fatal Message!\")\n}\n```\n\n运行程序后\b打印出：\n\n```sh\nWARN[0000] Warn Message!\nERRO[0000] Error Message!\nFATA[0000] Fatal Message!\n```\n\n### 并发安全\n\nasd\n\n### 性能问题\n\n\nGolang 的log包内容不多，说实话，直接用来做日志开发有些简易。主要是缺少一些功能：\n按日志级别打印和控制日志；\n日志文件自动分割；\n异步打印日志。\n\n## 开始造轮子\n\n首先\b我们需要定义一个日志的结构体：\n\n```go\ntype Logger struct {\n    level int\n    buf []byte\n}\n```\n\n我们实现的日志库将会支持4个常用的日志级别：\n\n```go\ntype Level byte\n\nconst (\n\tLevelDebug Level = 1 << iota\n\tLevelInfo\n\tLevelWarn\n\tLevelError\n)\n\nfunc (l *Logger) SetLevel(level Level) {\n\tl.mu.Lock()\n\tl.level = level\n\tl.mu.Unlock()\n}\n```\n\n## 参考\n\n- [Log4j - Wiki](https://en.wikipedia.org/wiki/Log4j)","slug":"golang-log-wheel","published":0,"updated":"2019-01-17T11:50:43.965Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpd0008slm4qva3lhwv","content":"<p>Golang 的日志库有很多，例如：logrus、gokit 的 log、uber 的 zap 等，在观察了这几个比较流行的日志库后，决定自己造一个日志库的轮子。</p>\n<h2 id=\"日志设计\"><a href=\"#日志设计\" class=\"headerlink\" title=\"日志设计\"></a>日志设计</h2><p>设计一个好的日志库首先需要考虑以下几个\b问题：</p>\n<ol>\n<li>日志格式</li>\n<li>日志级别</li>\n<li>并发安全</li>\n<li>性能问题</li>\n</ol>\n<p>接下来我们一个个来讨论。</p>\n<h3 id=\"日志格式\"><a href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"></a>日志格式</h3><p>常见的日志格式分为两种：</p>\n<ul>\n<li>非结构化的：字符串形式</li>\n<li>结构化的：JSON形式、logfmt形式</li>\n</ul>\n<h4 id=\"非结构化的日志\"><a href=\"#非结构化的日志\" class=\"headerlink\" title=\"非结构化的日志\"></a>非结构化的日志</h4><p>非结构化的日志通常记录一个字符串，或者\b是类似 fmt.Printf 的格式化输出，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">log.Printf(<span class=\"string\">\"something happened: %v\"</span>, <span class=\"string\">\"unknown error\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// 2018/12/07 20:05:50 something happened: unknown error</span></span><br></pre></td></tr></table></figure>\n<p>\b<br>使用非结构化日志的问题在于，每次写日志都需要\b硬编码一个特定的字符串，没有一个固定的格式，也难以被其他程序解析。</p>\n<h4 id=\"结构化的日志\"><a href=\"#结构化的日志\" class=\"headerlink\" title=\"结构化的日志\"></a>结构化的日志</h4><p>结构化的日志记录通常使用 JSON 格式或 Logfmt 格式</p>\n<h3 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h3><p>日志级别用于标识事件的严重性，同时也可以过滤日志的输出。</p>\n<p>在实际项目开发中，我们经常需要写不同级别的日志，比如调试的时候我们会写 debug 日志，错误\b处理时我们会写 error 日志。并且，在开发环境中，我们希望能输出所有级别的日志，而在生产环境中，我们一般只希望输出 error 日志。</p>\n<p>这里我们首先要了解下有哪些日志级别，参考 <a href=\"https://logging.apache.org/log4j/2.x/\" target=\"_blank\" rel=\"noopener\">log4j</a> 日志库，log4j 定义\b了8种日志级别：</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ALL</td>\n<td>记录所有事件</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>比 DEBUG \b粒度更细的事件，用于调试应用程序</td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>细粒度的事件，用于调试应用程序</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>粗粒度的事件，用于显示应用程序的进度</td>\n</tr>\n<tr>\n<td>WARN</td>\n<td>可能导致错误的事件</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>错误事件，但应用程序可能还能继续运行</td>\n</tr>\n<tr>\n<td>FATAL</td>\n<td>严重的错误事件，可能会导致应用程序终止运行</td>\n</tr>\n<tr>\n<td>OFF</td>\n<td>不会记录任何事件</td>\n</tr>\n</tbody>\n</table>\n<p>上面的日志级别从低到高排序，ALL 级别最低，OFF 级别最高。log4j 建议只使用四个级别，分别是 DEBUG、INFO、WARN、ERROR，一般项目里常用的也就这几个。</p>\n<p>当你设置了一个日志级别之后，只有比这个级别高的或者相等的日志才会输出。例如，如果设置当前的日志级别为 WARN，那么 OFF、FATAL、ERROR、WARN 4个级别的日志能正常输出，而 INFO、DEBUG、TRACE、 ALL 级别的日志则会被忽略。</p>\n<p>下面使用 Logrus 的例子来展示如何过滤 DEBUG \b和 INFO 级别的日志，使用 <code>log.SetLevel(log.X)</code> 来设置期望的日志级别。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> log <span class=\"string\">\"github.com/sirupsen/logrus\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.SetLevel(log.WarnLevel)</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Trace(<span class=\"string\">\"Trace Message!\"</span>)</span><br><span class=\"line\">\tlog.Debug(<span class=\"string\">\"Debug Message!\"</span>)</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"Info Message!\"</span>)</span><br><span class=\"line\">\tlog.Warn(<span class=\"string\">\"Warn Message!\"</span>)</span><br><span class=\"line\">\tlog.Error(<span class=\"string\">\"Error Message!\"</span>)</span><br><span class=\"line\">\tlog.Fatal(<span class=\"string\">\"Fatal Message!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行程序后\b打印出：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">WARN[0000] Warn Message!</span><br><span class=\"line\">ERRO[0000] Error Message!</span><br><span class=\"line\">FATA[0000] Fatal Message!</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发安全\"><a href=\"#并发安全\" class=\"headerlink\" title=\"并发安全\"></a>并发安全</h3><p>asd</p>\n<h3 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h3><p>Golang 的log包内容不多，说实话，直接用来做日志开发有些简易。主要是缺少一些功能：<br>按日志级别打印和控制日志；<br>日志文件自动分割；<br>异步打印日志。</p>\n<h2 id=\"开始造轮子\"><a href=\"#开始造轮子\" class=\"headerlink\" title=\"开始造轮子\"></a>开始造轮子</h2><p>首先\b我们需要定义一个日志的结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    level <span class=\"keyword\">int</span></span><br><span class=\"line\">    buf []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们实现的日志库将会支持4个常用的日志级别：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Level <span class=\"keyword\">byte</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tLevelDebug Level = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span></span><br><span class=\"line\">\tLevelInfo</span><br><span class=\"line\">\tLevelWarn</span><br><span class=\"line\">\tLevelError</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">SetLevel</span><span class=\"params\">(level Level)</span></span> &#123;</span><br><span class=\"line\">\tl.mu.Lock()</span><br><span class=\"line\">\tl.level = level</span><br><span class=\"line\">\tl.mu.Unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Log4j\" target=\"_blank\" rel=\"noopener\">Log4j - Wiki</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Golang 的日志库有很多，例如：logrus、gokit 的 log、uber 的 zap 等，在观察了这几个比较流行的日志库后，决定自己造一个日志库的轮子。</p>\n<h2 id=\"日志设计\"><a href=\"#日志设计\" class=\"headerlink\" title=\"日志设计\"></a>日志设计</h2><p>设计一个好的日志库首先需要考虑以下几个\b问题：</p>\n<ol>\n<li>日志格式</li>\n<li>日志级别</li>\n<li>并发安全</li>\n<li>性能问题</li>\n</ol>\n<p>接下来我们一个个来讨论。</p>\n<h3 id=\"日志格式\"><a href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"></a>日志格式</h3><p>常见的日志格式分为两种：</p>\n<ul>\n<li>非结构化的：字符串形式</li>\n<li>结构化的：JSON形式、logfmt形式</li>\n</ul>\n<h4 id=\"非结构化的日志\"><a href=\"#非结构化的日志\" class=\"headerlink\" title=\"非结构化的日志\"></a>非结构化的日志</h4><p>非结构化的日志通常记录一个字符串，或者\b是类似 fmt.Printf 的格式化输出，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">log.Printf(<span class=\"string\">\"something happened: %v\"</span>, <span class=\"string\">\"unknown error\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// 2018/12/07 20:05:50 something happened: unknown error</span></span><br></pre></td></tr></table></figure>\n<p>\b<br>使用非结构化日志的问题在于，每次写日志都需要\b硬编码一个特定的字符串，没有一个固定的格式，也难以被其他程序解析。</p>\n<h4 id=\"结构化的日志\"><a href=\"#结构化的日志\" class=\"headerlink\" title=\"结构化的日志\"></a>结构化的日志</h4><p>结构化的日志记录通常使用 JSON 格式或 Logfmt 格式</p>\n<h3 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h3><p>日志级别用于标识事件的严重性，同时也可以过滤日志的输出。</p>\n<p>在实际项目开发中，我们经常需要写不同级别的日志，比如调试的时候我们会写 debug 日志，错误\b处理时我们会写 error 日志。并且，在开发环境中，我们希望能输出所有级别的日志，而在生产环境中，我们一般只希望输出 error 日志。</p>\n<p>这里我们首先要了解下有哪些日志级别，参考 <a href=\"https://logging.apache.org/log4j/2.x/\" target=\"_blank\" rel=\"noopener\">log4j</a> 日志库，log4j 定义\b了8种日志级别：</p>\n<table>\n<thead>\n<tr>\n<th>级别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ALL</td>\n<td>记录所有事件</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>比 DEBUG \b粒度更细的事件，用于调试应用程序</td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>细粒度的事件，用于调试应用程序</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>粗粒度的事件，用于显示应用程序的进度</td>\n</tr>\n<tr>\n<td>WARN</td>\n<td>可能导致错误的事件</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>错误事件，但应用程序可能还能继续运行</td>\n</tr>\n<tr>\n<td>FATAL</td>\n<td>严重的错误事件，可能会导致应用程序终止运行</td>\n</tr>\n<tr>\n<td>OFF</td>\n<td>不会记录任何事件</td>\n</tr>\n</tbody>\n</table>\n<p>上面的日志级别从低到高排序，ALL 级别最低，OFF 级别最高。log4j 建议只使用四个级别，分别是 DEBUG、INFO、WARN、ERROR，一般项目里常用的也就这几个。</p>\n<p>当你设置了一个日志级别之后，只有比这个级别高的或者相等的日志才会输出。例如，如果设置当前的日志级别为 WARN，那么 OFF、FATAL、ERROR、WARN 4个级别的日志能正常输出，而 INFO、DEBUG、TRACE、 ALL 级别的日志则会被忽略。</p>\n<p>下面使用 Logrus 的例子来展示如何过滤 DEBUG \b和 INFO 级别的日志，使用 <code>log.SetLevel(log.X)</code> 来设置期望的日志级别。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> log <span class=\"string\">\"github.com/sirupsen/logrus\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.SetLevel(log.WarnLevel)</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Trace(<span class=\"string\">\"Trace Message!\"</span>)</span><br><span class=\"line\">\tlog.Debug(<span class=\"string\">\"Debug Message!\"</span>)</span><br><span class=\"line\">\tlog.Info(<span class=\"string\">\"Info Message!\"</span>)</span><br><span class=\"line\">\tlog.Warn(<span class=\"string\">\"Warn Message!\"</span>)</span><br><span class=\"line\">\tlog.Error(<span class=\"string\">\"Error Message!\"</span>)</span><br><span class=\"line\">\tlog.Fatal(<span class=\"string\">\"Fatal Message!\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行程序后\b打印出：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">WARN[0000] Warn Message!</span><br><span class=\"line\">ERRO[0000] Error Message!</span><br><span class=\"line\">FATA[0000] Fatal Message!</span><br></pre></td></tr></table></figure>\n<h3 id=\"并发安全\"><a href=\"#并发安全\" class=\"headerlink\" title=\"并发安全\"></a>并发安全</h3><p>asd</p>\n<h3 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h3><p>Golang 的log包内容不多，说实话，直接用来做日志开发有些简易。主要是缺少一些功能：<br>按日志级别打印和控制日志；<br>日志文件自动分割；<br>异步打印日志。</p>\n<h2 id=\"开始造轮子\"><a href=\"#开始造轮子\" class=\"headerlink\" title=\"开始造轮子\"></a>开始造轮子</h2><p>首先\b我们需要定义一个日志的结构体：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Logger <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    level <span class=\"keyword\">int</span></span><br><span class=\"line\">    buf []<span class=\"keyword\">byte</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们实现的日志库将会支持4个常用的日志级别：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Level <span class=\"keyword\">byte</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tLevelDebug Level = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span></span><br><span class=\"line\">\tLevelInfo</span><br><span class=\"line\">\tLevelWarn</span><br><span class=\"line\">\tLevelError</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(l *Logger)</span> <span class=\"title\">SetLevel</span><span class=\"params\">(level Level)</span></span> &#123;</span><br><span class=\"line\">\tl.mu.Lock()</span><br><span class=\"line\">\tl.level = level</span><br><span class=\"line\">\tl.mu.Unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Log4j\" target=\"_blank\" rel=\"noopener\">Log4j - Wiki</a></li>\n</ul>\n"},{"title":"URL中的#号","date":"2018-10-25T07:52:53.000Z","_content":"\n今天用 postman 调试一个 GET 接口，接口 url 的 query 中有一个 color 参数，如：`http://example.com/?color=#ffffff`。请求一下失败了，查看日志发现后端接收到 URL 很奇怪，# 号及其后面的所有字符都消失了，如：`http://example.com?color=`。因为对 URL 中的 # 没什么了解，然后就去查了下资料，下面整理了一些 # 号相关的资料。\n\n## 《HTTP权威指南》中的描述\n\n《HTTP权威指南》称 URL 中的 # 号为片段：\n\n> 为了引用部分资源或资源的一个片段，URL 支持使用片段（frag）组件来表示一个资源内部的片段。比如，URL 可以指向 HTML 文档中一个特定的图片或小节。\n\n\n> HTTP 服务器通常只处理整个对象，而不是对象的片段，客户端不能将片段传送给服务器。浏览器从服务器获得了整个资源之后，会根据片段来显示你感兴趣的那部分资源。\n\n这样就清楚了，原来是客户端或浏览器在请求的时候，对 # 号做了处理，\n\n\n## #的含义\n\n#代表网页中的一个位置。其右面的字符，就是该位置的标识符。比如：\n\n```url\nhttp://www.example.com/index.html#print\n```\n\n就代表网页index.html的print位置。浏览器读取这个URL后，会自动将print位置滚动至可视区域。\n\n为网页位置指定标识符，有两个方法。一是使用锚点，比如 `<a name=\"print\"></a>` ，二是使用id属性，比如 `<div id=\"print\" >` 。\n\n## HTTP请求不包括#\n\n#是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。\n\n比如，访问下面的网址，\n\n```\nhttp://www.example.com/index.html#print\n```\n\n浏览器实际发出的请求是这样的：\n\n```\nGET /index.html HTTP/1.1\nHost: www.example.com\n```\n\n可以看到，只是请求index.html，根本没有\"#print\"的部分。\n\n## #后的字符\n\n在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。\n比如，下面URL的原意是指定一个颜色值：\n\n```\nhttp://www.example.com/?color=#fff\n```\n\n但是，浏览器实际发出的请求是：\n\n```\nGET /?color= HTTP/1.1\nHost: www.example.com/?color=\n```\n\n可以看到，\"#fff\"被省略了。只有将#转码为%23，浏览器才会将其作为实义字符处理。也就是说，上面的网址应该被写成：\n\n```\nhttp://example.com/?color=%23fff\n```\n\n## 改变#不触发网页重载\n\n单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。\n\n比如，从\n\n```\nhttp://www.example.com/index.html#location1\n```\n\n改成\n\n```\nhttp://www.example.com/index.html#location2\n```\n\n浏览器不会重新向服务器请求index.html。\n\n## 改变#会改变浏览器的访问历史\n\n每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用\"后退\"按钮，就可以回到上一个位置。\n\n这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。\n\n值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。\n\n","source":"_drafts/url-hash.md","raw":"---\ntitle: URL中的#号\ndate: 2018-10-25 15:52:53\ntags: URL\ncategory: 码梦为生\n---\n\n今天用 postman 调试一个 GET 接口，接口 url 的 query 中有一个 color 参数，如：`http://example.com/?color=#ffffff`。请求一下失败了，查看日志发现后端接收到 URL 很奇怪，# 号及其后面的所有字符都消失了，如：`http://example.com?color=`。因为对 URL 中的 # 没什么了解，然后就去查了下资料，下面整理了一些 # 号相关的资料。\n\n## 《HTTP权威指南》中的描述\n\n《HTTP权威指南》称 URL 中的 # 号为片段：\n\n> 为了引用部分资源或资源的一个片段，URL 支持使用片段（frag）组件来表示一个资源内部的片段。比如，URL 可以指向 HTML 文档中一个特定的图片或小节。\n\n\n> HTTP 服务器通常只处理整个对象，而不是对象的片段，客户端不能将片段传送给服务器。浏览器从服务器获得了整个资源之后，会根据片段来显示你感兴趣的那部分资源。\n\n这样就清楚了，原来是客户端或浏览器在请求的时候，对 # 号做了处理，\n\n\n## #的含义\n\n#代表网页中的一个位置。其右面的字符，就是该位置的标识符。比如：\n\n```url\nhttp://www.example.com/index.html#print\n```\n\n就代表网页index.html的print位置。浏览器读取这个URL后，会自动将print位置滚动至可视区域。\n\n为网页位置指定标识符，有两个方法。一是使用锚点，比如 `<a name=\"print\"></a>` ，二是使用id属性，比如 `<div id=\"print\" >` 。\n\n## HTTP请求不包括#\n\n#是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。\n\n比如，访问下面的网址，\n\n```\nhttp://www.example.com/index.html#print\n```\n\n浏览器实际发出的请求是这样的：\n\n```\nGET /index.html HTTP/1.1\nHost: www.example.com\n```\n\n可以看到，只是请求index.html，根本没有\"#print\"的部分。\n\n## #后的字符\n\n在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。\n比如，下面URL的原意是指定一个颜色值：\n\n```\nhttp://www.example.com/?color=#fff\n```\n\n但是，浏览器实际发出的请求是：\n\n```\nGET /?color= HTTP/1.1\nHost: www.example.com/?color=\n```\n\n可以看到，\"#fff\"被省略了。只有将#转码为%23，浏览器才会将其作为实义字符处理。也就是说，上面的网址应该被写成：\n\n```\nhttp://example.com/?color=%23fff\n```\n\n## 改变#不触发网页重载\n\n单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。\n\n比如，从\n\n```\nhttp://www.example.com/index.html#location1\n```\n\n改成\n\n```\nhttp://www.example.com/index.html#location2\n```\n\n浏览器不会重新向服务器请求index.html。\n\n## 改变#会改变浏览器的访问历史\n\n每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用\"后退\"按钮，就可以回到上一个位置。\n\n这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。\n\n值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。\n\n","slug":"url-hash","published":0,"updated":"2018-09-28T11:32:59.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpf0009slm4u02axt2t","content":"<p>今天用 postman 调试一个 GET 接口，接口 url 的 query 中有一个 color 参数，如：<code>http://example.com/?color=#ffffff</code>。请求一下失败了，查看日志发现后端接收到 URL 很奇怪，# 号及其后面的所有字符都消失了，如：<code>http://example.com?color=</code>。因为对 URL 中的 # 没什么了解，然后就去查了下资料，下面整理了一些 # 号相关的资料。</p>\n<h2 id=\"《HTTP权威指南》中的描述\"><a href=\"#《HTTP权威指南》中的描述\" class=\"headerlink\" title=\"《HTTP权威指南》中的描述\"></a>《HTTP权威指南》中的描述</h2><p>《HTTP权威指南》称 URL 中的 # 号为片段：</p>\n<blockquote>\n<p>为了引用部分资源或资源的一个片段，URL 支持使用片段（frag）组件来表示一个资源内部的片段。比如，URL 可以指向 HTML 文档中一个特定的图片或小节。</p>\n</blockquote>\n<blockquote>\n<p>HTTP 服务器通常只处理整个对象，而不是对象的片段，客户端不能将片段传送给服务器。浏览器从服务器获得了整个资源之后，会根据片段来显示你感兴趣的那部分资源。</p>\n</blockquote>\n<p>这样就清楚了，原来是客户端或浏览器在请求的时候，对 # 号做了处理，</p>\n<h2 id=\"的含义\"><a href=\"#的含义\" class=\"headerlink\" title=\"#的含义\"></a>#的含义</h2><p>#代表网页中的一个位置。其右面的字符，就是该位置的标识符。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#print</span><br></pre></td></tr></table></figure>\n<p>就代表网页index.html的print位置。浏览器读取这个URL后，会自动将print位置滚动至可视区域。</p>\n<p>为网页位置指定标识符，有两个方法。一是使用锚点，比如 <code>&lt;a name=&quot;print&quot;&gt;&lt;/a&gt;</code> ，二是使用id属性，比如 <code>&lt;div id=&quot;print&quot; &gt;</code> 。</p>\n<h2 id=\"HTTP请求不包括\"><a href=\"#HTTP请求不包括\" class=\"headerlink\" title=\"HTTP请求不包括\"></a>HTTP请求不包括</h2><p>#是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。</p>\n<p>比如，访问下面的网址，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#print</span><br></pre></td></tr></table></figure>\n<p>浏览器实际发出的请求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /index.html HTTP/1.1</span><br><span class=\"line\">Host: www.example.com</span><br></pre></td></tr></table></figure>\n<p>可以看到，只是请求index.html，根本没有”#print”的部分。</p>\n<h2 id=\"后的字符\"><a href=\"#后的字符\" class=\"headerlink\" title=\"#后的字符\"></a>#后的字符</h2><p>在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。<br>比如，下面URL的原意是指定一个颜色值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/?color=#fff</span><br></pre></td></tr></table></figure>\n<p>但是，浏览器实际发出的请求是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /?color= HTTP/1.1</span><br><span class=\"line\">Host: www.example.com/?color=</span><br></pre></td></tr></table></figure>\n<p>可以看到，”#fff”被省略了。只有将#转码为%23，浏览器才会将其作为实义字符处理。也就是说，上面的网址应该被写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://example.com/?color=%23fff</span><br></pre></td></tr></table></figure>\n<h2 id=\"改变-不触发网页重载\"><a href=\"#改变-不触发网页重载\" class=\"headerlink\" title=\"改变#不触发网页重载\"></a>改变#不触发网页重载</h2><p>单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</p>\n<p>比如，从</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#location1</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#location2</span><br></pre></td></tr></table></figure>\n<p>浏览器不会重新向服务器请求index.html。</p>\n<h2 id=\"改变-会改变浏览器的访问历史\"><a href=\"#改变-会改变浏览器的访问历史\" class=\"headerlink\" title=\"改变#会改变浏览器的访问历史\"></a>改变#会改变浏览器的访问历史</h2><p>每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。</p>\n<p>这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。</p>\n<p>值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天用 postman 调试一个 GET 接口，接口 url 的 query 中有一个 color 参数，如：<code>http://example.com/?color=#ffffff</code>。请求一下失败了，查看日志发现后端接收到 URL 很奇怪，# 号及其后面的所有字符都消失了，如：<code>http://example.com?color=</code>。因为对 URL 中的 # 没什么了解，然后就去查了下资料，下面整理了一些 # 号相关的资料。</p>\n<h2 id=\"《HTTP权威指南》中的描述\"><a href=\"#《HTTP权威指南》中的描述\" class=\"headerlink\" title=\"《HTTP权威指南》中的描述\"></a>《HTTP权威指南》中的描述</h2><p>《HTTP权威指南》称 URL 中的 # 号为片段：</p>\n<blockquote>\n<p>为了引用部分资源或资源的一个片段，URL 支持使用片段（frag）组件来表示一个资源内部的片段。比如，URL 可以指向 HTML 文档中一个特定的图片或小节。</p>\n</blockquote>\n<blockquote>\n<p>HTTP 服务器通常只处理整个对象，而不是对象的片段，客户端不能将片段传送给服务器。浏览器从服务器获得了整个资源之后，会根据片段来显示你感兴趣的那部分资源。</p>\n</blockquote>\n<p>这样就清楚了，原来是客户端或浏览器在请求的时候，对 # 号做了处理，</p>\n<h2 id=\"的含义\"><a href=\"#的含义\" class=\"headerlink\" title=\"#的含义\"></a>#的含义</h2><p>#代表网页中的一个位置。其右面的字符，就是该位置的标识符。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#print</span><br></pre></td></tr></table></figure>\n<p>就代表网页index.html的print位置。浏览器读取这个URL后，会自动将print位置滚动至可视区域。</p>\n<p>为网页位置指定标识符，有两个方法。一是使用锚点，比如 <code>&lt;a name=&quot;print&quot;&gt;&lt;/a&gt;</code> ，二是使用id属性，比如 <code>&lt;div id=&quot;print&quot; &gt;</code> 。</p>\n<h2 id=\"HTTP请求不包括\"><a href=\"#HTTP请求不包括\" class=\"headerlink\" title=\"HTTP请求不包括\"></a>HTTP请求不包括</h2><p>#是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。</p>\n<p>比如，访问下面的网址，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#print</span><br></pre></td></tr></table></figure>\n<p>浏览器实际发出的请求是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /index.html HTTP/1.1</span><br><span class=\"line\">Host: www.example.com</span><br></pre></td></tr></table></figure>\n<p>可以看到，只是请求index.html，根本没有”#print”的部分。</p>\n<h2 id=\"后的字符\"><a href=\"#后的字符\" class=\"headerlink\" title=\"#后的字符\"></a>#后的字符</h2><p>在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。<br>比如，下面URL的原意是指定一个颜色值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/?color=#fff</span><br></pre></td></tr></table></figure>\n<p>但是，浏览器实际发出的请求是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GET /?color= HTTP/1.1</span><br><span class=\"line\">Host: www.example.com/?color=</span><br></pre></td></tr></table></figure>\n<p>可以看到，”#fff”被省略了。只有将#转码为%23，浏览器才会将其作为实义字符处理。也就是说，上面的网址应该被写成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://example.com/?color=%23fff</span><br></pre></td></tr></table></figure>\n<h2 id=\"改变-不触发网页重载\"><a href=\"#改变-不触发网页重载\" class=\"headerlink\" title=\"改变#不触发网页重载\"></a>改变#不触发网页重载</h2><p>单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。</p>\n<p>比如，从</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#location1</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http://www.example.com/index.html#location2</span><br></pre></td></tr></table></figure>\n<p>浏览器不会重新向服务器请求index.html。</p>\n<h2 id=\"改变-会改变浏览器的访问历史\"><a href=\"#改变-会改变浏览器的访问历史\" class=\"headerlink\" title=\"改变#会改变浏览器的访问历史\"></a>改变#会改变浏览器的访问历史</h2><p>每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置。</p>\n<p>这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。</p>\n<p>值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。</p>\n"},{"title":"如何修复 503 Service Unavailable 错误","date":"2016-08-24T03:52:37.000Z","_content":"\n{% note class_name %} 本文翻译自: [How to Fix a 503 Service Unavailable Error](https://www.lifewire.com/503-service-unavailable-explained-2622940) {% endnote %}\n\n503 Service Unavailable 是一个 HTTP 状态码，表示 Web 服务器目前不可用。\n\n<!--more-->\n\n## 你可能看到的 503 错误信息\n\n网站和服务器软件可以定制 503 错误信息，所以你可能看到不一样的错误信息。\n\n以下是常见的 503 错误信息：\n\n- 503 Service Unavailable\n- 503 Service Temporarily Unavailable\n- Http/1.1 Service Unavailable\n- HTTP Server Error 503\n- Service Unavailable - DNS Failure\n- 503 Error\n- HTTP 503\n- HTTP Error 503\n- Error 503 Service Unavailable \n\n503 Service Unavailable 错误可能会出现在所有浏览器和所有操作系统上，包括 Window 10 / Window XP，MacOS，Linux等，甚至是你的手机和其他非主流操作系统。只要接入了互联网，那么你就有可能在某些情况下看到 503 错误。浏览器窗口会像显示网页一样显示 503 Service Unavailable 错误。\n\n## 503 Service Unavailable 的错误原因\n\n大多数情况下，导致 503 错误的原因是服务器达到负载或正在进行维护。\n\n**Note：**使用 Microsoft IIS 的站点可以通过在 503 后面加一个后缀数字来提供有关 503 Service Unavailable 错误原因的更多具体信息，如 HTTP 错误 503.2 - 服务不可用，这意味着超出并发请求限制。\n\n## 如何修复 503 Service Unavailable\n\n503 Service Unavailable 是一个服务端的错误，意味着问题经常出在网站的服务器上，不太可能因为你的电脑的某种问题导致 503 错误。\n\n无论如何，您可以尝试下面几件事情：\n\n1. 通过点击重新加载/刷新按钮或按 F5 再次访问地址栏的 url。\n    \n    尽管 503 Service Unavailable 错误意味着服务器出现错误，但是这个问题可能只是暂时的，有时只要重新访问该页面就会起作用。\n\n    **重要提示：**如果在支付在线购买时出现 503 Service Unavailable 错误消息，请注意，多次尝试结帐可能会导致创建多个订单，并收取多笔费用！大多数支付系统和一些信用卡公司都有这种情况的保护措施，但仍然需要注意。\n\n2. 重启你的路由器和调制解调器，然后重启你的计算机或设备，尤其是当你看到 “Service Unavailable - DNS Failure” 的时候。\n\n    虽然 503 错误最可能是你访问的网站导致的，但也有可能是你的路由器或计算机上的 DNS 服务器配置有问题，这两个简单的重启可能会修复这个问题。\n\n    **提示：**如果重启设备没有修复 503 DNS Failure 错误，那么可能是 DNS 服务器本身出现了临时问题。在这种情况下，从 [免费和公共DNS服务器列表](https://www.lifewire.com/free-and-public-dns-servers-2626062) 中选择新的 DNS 服务器，并在计算机或路由器上进行修改。如果需要帮助，请参阅 [如何更改DNS服务器](https://www.lifewire.com/how-to-change-dns-server-settings-2617979) 。\n\n3. 另一个选择是直接联系网站寻求帮助。网站的管理员很有可能已经知道 503 错误，但告知他们检查问题的状态，这不是一个坏主意。\n\n    有关热门网站的联系信息，请参阅 [网站联系信息列表](https://www.lifewire.com/website-contact-information-2625174) 。大多数网站都有基于支持的社交网络帐户，有些甚至有电话号码和电子邮件地址。\n\n4. 稍后再访问。当访问者流量大幅增加导致服务器负载的时候，经常会出现 503 Service Unavailable 错误，这时候只需要等待一段时间再访问。随着越来越多的访问者离开网站，您的页面加载成功的可能性将会增加。\n","source":"_posts/503-service-unavailable.md","raw":"---\ntitle: 如何修复 503 Service Unavailable 错误\ndate: 2016-08-24 11:52:37\ntags: HTTP\ncategory: 码梦为生\n---\n\n{% note class_name %} 本文翻译自: [How to Fix a 503 Service Unavailable Error](https://www.lifewire.com/503-service-unavailable-explained-2622940) {% endnote %}\n\n503 Service Unavailable 是一个 HTTP 状态码，表示 Web 服务器目前不可用。\n\n<!--more-->\n\n## 你可能看到的 503 错误信息\n\n网站和服务器软件可以定制 503 错误信息，所以你可能看到不一样的错误信息。\n\n以下是常见的 503 错误信息：\n\n- 503 Service Unavailable\n- 503 Service Temporarily Unavailable\n- Http/1.1 Service Unavailable\n- HTTP Server Error 503\n- Service Unavailable - DNS Failure\n- 503 Error\n- HTTP 503\n- HTTP Error 503\n- Error 503 Service Unavailable \n\n503 Service Unavailable 错误可能会出现在所有浏览器和所有操作系统上，包括 Window 10 / Window XP，MacOS，Linux等，甚至是你的手机和其他非主流操作系统。只要接入了互联网，那么你就有可能在某些情况下看到 503 错误。浏览器窗口会像显示网页一样显示 503 Service Unavailable 错误。\n\n## 503 Service Unavailable 的错误原因\n\n大多数情况下，导致 503 错误的原因是服务器达到负载或正在进行维护。\n\n**Note：**使用 Microsoft IIS 的站点可以通过在 503 后面加一个后缀数字来提供有关 503 Service Unavailable 错误原因的更多具体信息，如 HTTP 错误 503.2 - 服务不可用，这意味着超出并发请求限制。\n\n## 如何修复 503 Service Unavailable\n\n503 Service Unavailable 是一个服务端的错误，意味着问题经常出在网站的服务器上，不太可能因为你的电脑的某种问题导致 503 错误。\n\n无论如何，您可以尝试下面几件事情：\n\n1. 通过点击重新加载/刷新按钮或按 F5 再次访问地址栏的 url。\n    \n    尽管 503 Service Unavailable 错误意味着服务器出现错误，但是这个问题可能只是暂时的，有时只要重新访问该页面就会起作用。\n\n    **重要提示：**如果在支付在线购买时出现 503 Service Unavailable 错误消息，请注意，多次尝试结帐可能会导致创建多个订单，并收取多笔费用！大多数支付系统和一些信用卡公司都有这种情况的保护措施，但仍然需要注意。\n\n2. 重启你的路由器和调制解调器，然后重启你的计算机或设备，尤其是当你看到 “Service Unavailable - DNS Failure” 的时候。\n\n    虽然 503 错误最可能是你访问的网站导致的，但也有可能是你的路由器或计算机上的 DNS 服务器配置有问题，这两个简单的重启可能会修复这个问题。\n\n    **提示：**如果重启设备没有修复 503 DNS Failure 错误，那么可能是 DNS 服务器本身出现了临时问题。在这种情况下，从 [免费和公共DNS服务器列表](https://www.lifewire.com/free-and-public-dns-servers-2626062) 中选择新的 DNS 服务器，并在计算机或路由器上进行修改。如果需要帮助，请参阅 [如何更改DNS服务器](https://www.lifewire.com/how-to-change-dns-server-settings-2617979) 。\n\n3. 另一个选择是直接联系网站寻求帮助。网站的管理员很有可能已经知道 503 错误，但告知他们检查问题的状态，这不是一个坏主意。\n\n    有关热门网站的联系信息，请参阅 [网站联系信息列表](https://www.lifewire.com/website-contact-information-2625174) 。大多数网站都有基于支持的社交网络帐户，有些甚至有电话号码和电子邮件地址。\n\n4. 稍后再访问。当访问者流量大幅增加导致服务器负载的时候，经常会出现 503 Service Unavailable 错误，这时候只需要等待一段时间再访问。随着越来越多的访问者离开网站，您的页面加载成功的可能性将会增加。\n","slug":"503-service-unavailable","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cph000cslm4jnjumubw","content":"<div class=\"note class_name\"><p>本文翻译自: <a href=\"https://www.lifewire.com/503-service-unavailable-explained-2622940\" target=\"_blank\" rel=\"noopener\">How to Fix a 503 Service Unavailable Error</a> </p></div>\n<p>503 Service Unavailable 是一个 HTTP 状态码，表示 Web 服务器目前不可用。</p>\n<a id=\"more\"></a>\n<h2 id=\"你可能看到的-503-错误信息\"><a href=\"#你可能看到的-503-错误信息\" class=\"headerlink\" title=\"你可能看到的 503 错误信息\"></a>你可能看到的 503 错误信息</h2><p>网站和服务器软件可以定制 503 错误信息，所以你可能看到不一样的错误信息。</p>\n<p>以下是常见的 503 错误信息：</p>\n<ul>\n<li>503 Service Unavailable</li>\n<li>503 Service Temporarily Unavailable</li>\n<li>Http/1.1 Service Unavailable</li>\n<li>HTTP Server Error 503</li>\n<li>Service Unavailable - DNS Failure</li>\n<li>503 Error</li>\n<li>HTTP 503</li>\n<li>HTTP Error 503</li>\n<li>Error 503 Service Unavailable </li>\n</ul>\n<p>503 Service Unavailable 错误可能会出现在所有浏览器和所有操作系统上，包括 Window 10 / Window XP，MacOS，Linux等，甚至是你的手机和其他非主流操作系统。只要接入了互联网，那么你就有可能在某些情况下看到 503 错误。浏览器窗口会像显示网页一样显示 503 Service Unavailable 错误。</p>\n<h2 id=\"503-Service-Unavailable-的错误原因\"><a href=\"#503-Service-Unavailable-的错误原因\" class=\"headerlink\" title=\"503 Service Unavailable 的错误原因\"></a>503 Service Unavailable 的错误原因</h2><p>大多数情况下，导致 503 错误的原因是服务器达到负载或正在进行维护。</p>\n<p><strong>Note：</strong>使用 Microsoft IIS 的站点可以通过在 503 后面加一个后缀数字来提供有关 503 Service Unavailable 错误原因的更多具体信息，如 HTTP 错误 503.2 - 服务不可用，这意味着超出并发请求限制。</p>\n<h2 id=\"如何修复-503-Service-Unavailable\"><a href=\"#如何修复-503-Service-Unavailable\" class=\"headerlink\" title=\"如何修复 503 Service Unavailable\"></a>如何修复 503 Service Unavailable</h2><p>503 Service Unavailable 是一个服务端的错误，意味着问题经常出在网站的服务器上，不太可能因为你的电脑的某种问题导致 503 错误。</p>\n<p>无论如何，您可以尝试下面几件事情：</p>\n<ol>\n<li><p>通过点击重新加载/刷新按钮或按 F5 再次访问地址栏的 url。</p>\n<p> 尽管 503 Service Unavailable 错误意味着服务器出现错误，但是这个问题可能只是暂时的，有时只要重新访问该页面就会起作用。</p>\n<p> <strong>重要提示：</strong>如果在支付在线购买时出现 503 Service Unavailable 错误消息，请注意，多次尝试结帐可能会导致创建多个订单，并收取多笔费用！大多数支付系统和一些信用卡公司都有这种情况的保护措施，但仍然需要注意。</p>\n</li>\n<li><p>重启你的路由器和调制解调器，然后重启你的计算机或设备，尤其是当你看到 “Service Unavailable - DNS Failure” 的时候。</p>\n<p> 虽然 503 错误最可能是你访问的网站导致的，但也有可能是你的路由器或计算机上的 DNS 服务器配置有问题，这两个简单的重启可能会修复这个问题。</p>\n<p> <strong>提示：</strong>如果重启设备没有修复 503 DNS Failure 错误，那么可能是 DNS 服务器本身出现了临时问题。在这种情况下，从 <a href=\"https://www.lifewire.com/free-and-public-dns-servers-2626062\" target=\"_blank\" rel=\"noopener\">免费和公共DNS服务器列表</a> 中选择新的 DNS 服务器，并在计算机或路由器上进行修改。如果需要帮助，请参阅 <a href=\"https://www.lifewire.com/how-to-change-dns-server-settings-2617979\" target=\"_blank\" rel=\"noopener\">如何更改DNS服务器</a> 。</p>\n</li>\n<li><p>另一个选择是直接联系网站寻求帮助。网站的管理员很有可能已经知道 503 错误，但告知他们检查问题的状态，这不是一个坏主意。</p>\n<p> 有关热门网站的联系信息，请参阅 <a href=\"https://www.lifewire.com/website-contact-information-2625174\" target=\"_blank\" rel=\"noopener\">网站联系信息列表</a> 。大多数网站都有基于支持的社交网络帐户，有些甚至有电话号码和电子邮件地址。</p>\n</li>\n<li><p>稍后再访问。当访问者流量大幅增加导致服务器负载的时候，经常会出现 503 Service Unavailable 错误，这时候只需要等待一段时间再访问。随着越来越多的访问者离开网站，您的页面加载成功的可能性将会增加。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<div class=\"note class_name\"><p>本文翻译自: <a href=\"https://www.lifewire.com/503-service-unavailable-explained-2622940\" target=\"_blank\" rel=\"noopener\">How to Fix a 503 Service Unavailable Error</a> </p></div>\n<p>503 Service Unavailable 是一个 HTTP 状态码，表示 Web 服务器目前不可用。</p>","more":"<h2 id=\"你可能看到的-503-错误信息\"><a href=\"#你可能看到的-503-错误信息\" class=\"headerlink\" title=\"你可能看到的 503 错误信息\"></a>你可能看到的 503 错误信息</h2><p>网站和服务器软件可以定制 503 错误信息，所以你可能看到不一样的错误信息。</p>\n<p>以下是常见的 503 错误信息：</p>\n<ul>\n<li>503 Service Unavailable</li>\n<li>503 Service Temporarily Unavailable</li>\n<li>Http/1.1 Service Unavailable</li>\n<li>HTTP Server Error 503</li>\n<li>Service Unavailable - DNS Failure</li>\n<li>503 Error</li>\n<li>HTTP 503</li>\n<li>HTTP Error 503</li>\n<li>Error 503 Service Unavailable </li>\n</ul>\n<p>503 Service Unavailable 错误可能会出现在所有浏览器和所有操作系统上，包括 Window 10 / Window XP，MacOS，Linux等，甚至是你的手机和其他非主流操作系统。只要接入了互联网，那么你就有可能在某些情况下看到 503 错误。浏览器窗口会像显示网页一样显示 503 Service Unavailable 错误。</p>\n<h2 id=\"503-Service-Unavailable-的错误原因\"><a href=\"#503-Service-Unavailable-的错误原因\" class=\"headerlink\" title=\"503 Service Unavailable 的错误原因\"></a>503 Service Unavailable 的错误原因</h2><p>大多数情况下，导致 503 错误的原因是服务器达到负载或正在进行维护。</p>\n<p><strong>Note：</strong>使用 Microsoft IIS 的站点可以通过在 503 后面加一个后缀数字来提供有关 503 Service Unavailable 错误原因的更多具体信息，如 HTTP 错误 503.2 - 服务不可用，这意味着超出并发请求限制。</p>\n<h2 id=\"如何修复-503-Service-Unavailable\"><a href=\"#如何修复-503-Service-Unavailable\" class=\"headerlink\" title=\"如何修复 503 Service Unavailable\"></a>如何修复 503 Service Unavailable</h2><p>503 Service Unavailable 是一个服务端的错误，意味着问题经常出在网站的服务器上，不太可能因为你的电脑的某种问题导致 503 错误。</p>\n<p>无论如何，您可以尝试下面几件事情：</p>\n<ol>\n<li><p>通过点击重新加载/刷新按钮或按 F5 再次访问地址栏的 url。</p>\n<p> 尽管 503 Service Unavailable 错误意味着服务器出现错误，但是这个问题可能只是暂时的，有时只要重新访问该页面就会起作用。</p>\n<p> <strong>重要提示：</strong>如果在支付在线购买时出现 503 Service Unavailable 错误消息，请注意，多次尝试结帐可能会导致创建多个订单，并收取多笔费用！大多数支付系统和一些信用卡公司都有这种情况的保护措施，但仍然需要注意。</p>\n</li>\n<li><p>重启你的路由器和调制解调器，然后重启你的计算机或设备，尤其是当你看到 “Service Unavailable - DNS Failure” 的时候。</p>\n<p> 虽然 503 错误最可能是你访问的网站导致的，但也有可能是你的路由器或计算机上的 DNS 服务器配置有问题，这两个简单的重启可能会修复这个问题。</p>\n<p> <strong>提示：</strong>如果重启设备没有修复 503 DNS Failure 错误，那么可能是 DNS 服务器本身出现了临时问题。在这种情况下，从 <a href=\"https://www.lifewire.com/free-and-public-dns-servers-2626062\" target=\"_blank\" rel=\"noopener\">免费和公共DNS服务器列表</a> 中选择新的 DNS 服务器，并在计算机或路由器上进行修改。如果需要帮助，请参阅 <a href=\"https://www.lifewire.com/how-to-change-dns-server-settings-2617979\" target=\"_blank\" rel=\"noopener\">如何更改DNS服务器</a> 。</p>\n</li>\n<li><p>另一个选择是直接联系网站寻求帮助。网站的管理员很有可能已经知道 503 错误，但告知他们检查问题的状态，这不是一个坏主意。</p>\n<p> 有关热门网站的联系信息，请参阅 <a href=\"https://www.lifewire.com/website-contact-information-2625174\" target=\"_blank\" rel=\"noopener\">网站联系信息列表</a> 。大多数网站都有基于支持的社交网络帐户，有些甚至有电话号码和电子邮件地址。</p>\n</li>\n<li><p>稍后再访问。当访问者流量大幅增加导致服务器负载的时候，经常会出现 503 Service Unavailable 错误，这时候只需要等待一段时间再访问。随着越来越多的访问者离开网站，您的页面加载成功的可能性将会增加。</p>\n</li>\n</ol>"},{"title":"读后感：《 一只特立独行的猪 》 — 王小波","date":"2017-12-16T14:15:46.000Z","_content":"\n第一次看到这个书名《一只特立独行的猪》，我觉得很有意思，一只猪如何做到特立独行？带着这个问题我读了王小波的这本杂文。\n\n猪给我的印象就是被圈养在又脏又臭的狭小环境中（此处自动忽略网易的味央猪...），吃了睡，睡了吃，直到它成为餐桌上的食物，被广罗大众花式烹饪。但其实很多人不知道，猪其实是很聪明的生物，甚至比狗和黑猩猩都聪明，而且它们很爱干净。但因为长期活在人类的“统治”之下，猪接受了这样的设置，过着“井井有条”的生活。\n\n<!--more-->\n\n书中的一篇杂文讲述了作者与这只特立独行的猪的经历，那是一个趣味十足又耐人寻味的故事。故事中猪是一只非常有灵性的猪，有山羊般的敏捷，也有猫一样的灵活，活的竟然有些潇洒。它没有配合宿命的安排，而是选择了抗争，即使是在面对惨烈的杀猪现场也能镇定自若，机智逃脱，重新主宰了自己的命运。这里特别想引用一下《乔布斯传》里提到的一句广告语：\n\n{% blockquote%}\n致疯狂的人。他们特立独行。他们桀骜不驯。他们惹是生非。他们格格不入。他们用与众不同的眼光看待事物。他们不喜欢墨守成规。他们也不愿安于现状。你可以认同他们，反对他们，颂扬或是诋毁他们。但唯独不能漠视他们。\n{% endblockquote %}\n\n动物也好，人类也好，生存是亘古不变的话题，生存之下则有不同的活法。王小波写这只猪的故事仿佛也是在写他自己，他自己的特立独行，他的自由主义理念，与“猪兄”都不谋而合。恰逢那时候刚看完电影“猩球崛起”，感觉电影里的凯撒和这只猪有很多相似之处，它们都在打破常规，对设置好的生活勇敢的 say “no”，自己掌控着自己命运的方向盘，不怕风越大浪越高。反而是我们自己，可能还不如它们 。。。\n\n{% blockquote 《 一只特立独行的猪 》,王小波 %}\n我已经四十岁了，除了这只猪，还没见过谁敢于如此无视对生活的设置。相反，我倒见过很多想要设置别人生活的人，还有对被设置的生活安之若素的人。因为这个缘故，我一直怀念这只特立独行的猪。\n{% endblockquote %}\n\n<br>\n\n![image](http://ovu6j7kst.bkt.clouddn.com/%E7%81%AB%E6%98%9F%E6%88%AA%E5%9B%BE_20171223_203016.png)\n","source":"_posts/a-maverick-pig.md","raw":"---\ntitle: 读后感：《 一只特立独行的猪 》 — 王小波\ndate: 2017-12-16 22:15:46\ntags: \n  - 王小波\n  - 一只特立独行的猪\ncategory: 书海无涯\n---\n\n第一次看到这个书名《一只特立独行的猪》，我觉得很有意思，一只猪如何做到特立独行？带着这个问题我读了王小波的这本杂文。\n\n猪给我的印象就是被圈养在又脏又臭的狭小环境中（此处自动忽略网易的味央猪...），吃了睡，睡了吃，直到它成为餐桌上的食物，被广罗大众花式烹饪。但其实很多人不知道，猪其实是很聪明的生物，甚至比狗和黑猩猩都聪明，而且它们很爱干净。但因为长期活在人类的“统治”之下，猪接受了这样的设置，过着“井井有条”的生活。\n\n<!--more-->\n\n书中的一篇杂文讲述了作者与这只特立独行的猪的经历，那是一个趣味十足又耐人寻味的故事。故事中猪是一只非常有灵性的猪，有山羊般的敏捷，也有猫一样的灵活，活的竟然有些潇洒。它没有配合宿命的安排，而是选择了抗争，即使是在面对惨烈的杀猪现场也能镇定自若，机智逃脱，重新主宰了自己的命运。这里特别想引用一下《乔布斯传》里提到的一句广告语：\n\n{% blockquote%}\n致疯狂的人。他们特立独行。他们桀骜不驯。他们惹是生非。他们格格不入。他们用与众不同的眼光看待事物。他们不喜欢墨守成规。他们也不愿安于现状。你可以认同他们，反对他们，颂扬或是诋毁他们。但唯独不能漠视他们。\n{% endblockquote %}\n\n动物也好，人类也好，生存是亘古不变的话题，生存之下则有不同的活法。王小波写这只猪的故事仿佛也是在写他自己，他自己的特立独行，他的自由主义理念，与“猪兄”都不谋而合。恰逢那时候刚看完电影“猩球崛起”，感觉电影里的凯撒和这只猪有很多相似之处，它们都在打破常规，对设置好的生活勇敢的 say “no”，自己掌控着自己命运的方向盘，不怕风越大浪越高。反而是我们自己，可能还不如它们 。。。\n\n{% blockquote 《 一只特立独行的猪 》,王小波 %}\n我已经四十岁了，除了这只猪，还没见过谁敢于如此无视对生活的设置。相反，我倒见过很多想要设置别人生活的人，还有对被设置的生活安之若素的人。因为这个缘故，我一直怀念这只特立独行的猪。\n{% endblockquote %}\n\n<br>\n\n![image](http://ovu6j7kst.bkt.clouddn.com/%E7%81%AB%E6%98%9F%E6%88%AA%E5%9B%BE_20171223_203016.png)\n","slug":"a-maverick-pig","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpi000dslm4o1uazgex","content":"<p>第一次看到这个书名《一只特立独行的猪》，我觉得很有意思，一只猪如何做到特立独行？带着这个问题我读了王小波的这本杂文。</p>\n<p>猪给我的印象就是被圈养在又脏又臭的狭小环境中（此处自动忽略网易的味央猪…），吃了睡，睡了吃，直到它成为餐桌上的食物，被广罗大众花式烹饪。但其实很多人不知道，猪其实是很聪明的生物，甚至比狗和黑猩猩都聪明，而且它们很爱干净。但因为长期活在人类的“统治”之下，猪接受了这样的设置，过着“井井有条”的生活。</p>\n<a id=\"more\"></a>\n<p>书中的一篇杂文讲述了作者与这只特立独行的猪的经历，那是一个趣味十足又耐人寻味的故事。故事中猪是一只非常有灵性的猪，有山羊般的敏捷，也有猫一样的灵活，活的竟然有些潇洒。它没有配合宿命的安排，而是选择了抗争，即使是在面对惨烈的杀猪现场也能镇定自若，机智逃脱，重新主宰了自己的命运。这里特别想引用一下《乔布斯传》里提到的一句广告语：</p>\n<blockquote><p>致疯狂的人。他们特立独行。他们桀骜不驯。他们惹是生非。他们格格不入。他们用与众不同的眼光看待事物。他们不喜欢墨守成规。他们也不愿安于现状。你可以认同他们，反对他们，颂扬或是诋毁他们。但唯独不能漠视他们。</p>\n</blockquote>\n<p>动物也好，人类也好，生存是亘古不变的话题，生存之下则有不同的活法。王小波写这只猪的故事仿佛也是在写他自己，他自己的特立独行，他的自由主义理念，与“猪兄”都不谋而合。恰逢那时候刚看完电影“猩球崛起”，感觉电影里的凯撒和这只猪有很多相似之处，它们都在打破常规，对设置好的生活勇敢的 say “no”，自己掌控着自己命运的方向盘，不怕风越大浪越高。反而是我们自己，可能还不如它们 。。。</p>\n<blockquote><p>我已经四十岁了，除了这只猪，还没见过谁敢于如此无视对生活的设置。相反，我倒见过很多想要设置别人生活的人，还有对被设置的生活安之若素的人。因为这个缘故，我一直怀念这只特立独行的猪。</p>\n<footer><strong>《 一只特立独行的猪 》</strong><cite>王小波</cite></footer></blockquote>\n<p><br></p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/%E7%81%AB%E6%98%9F%E6%88%AA%E5%9B%BE_20171223_203016.png\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<p>第一次看到这个书名《一只特立独行的猪》，我觉得很有意思，一只猪如何做到特立独行？带着这个问题我读了王小波的这本杂文。</p>\n<p>猪给我的印象就是被圈养在又脏又臭的狭小环境中（此处自动忽略网易的味央猪…），吃了睡，睡了吃，直到它成为餐桌上的食物，被广罗大众花式烹饪。但其实很多人不知道，猪其实是很聪明的生物，甚至比狗和黑猩猩都聪明，而且它们很爱干净。但因为长期活在人类的“统治”之下，猪接受了这样的设置，过着“井井有条”的生活。</p>","more":"<p>书中的一篇杂文讲述了作者与这只特立独行的猪的经历，那是一个趣味十足又耐人寻味的故事。故事中猪是一只非常有灵性的猪，有山羊般的敏捷，也有猫一样的灵活，活的竟然有些潇洒。它没有配合宿命的安排，而是选择了抗争，即使是在面对惨烈的杀猪现场也能镇定自若，机智逃脱，重新主宰了自己的命运。这里特别想引用一下《乔布斯传》里提到的一句广告语：</p>\n<blockquote><p>致疯狂的人。他们特立独行。他们桀骜不驯。他们惹是生非。他们格格不入。他们用与众不同的眼光看待事物。他们不喜欢墨守成规。他们也不愿安于现状。你可以认同他们，反对他们，颂扬或是诋毁他们。但唯独不能漠视他们。</p>\n</blockquote>\n<p>动物也好，人类也好，生存是亘古不变的话题，生存之下则有不同的活法。王小波写这只猪的故事仿佛也是在写他自己，他自己的特立独行，他的自由主义理念，与“猪兄”都不谋而合。恰逢那时候刚看完电影“猩球崛起”，感觉电影里的凯撒和这只猪有很多相似之处，它们都在打破常规，对设置好的生活勇敢的 say “no”，自己掌控着自己命运的方向盘，不怕风越大浪越高。反而是我们自己，可能还不如它们 。。。</p>\n<blockquote><p>我已经四十岁了，除了这只猪，还没见过谁敢于如此无视对生活的设置。相反，我倒见过很多想要设置别人生活的人，还有对被设置的生活安之若素的人。因为这个缘故，我一直怀念这只特立独行的猪。</p>\n<footer><strong>《 一只特立独行的猪 》</strong><cite>王小波</cite></footer></blockquote>\n<p><br></p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/%E7%81%AB%E6%98%9F%E6%88%AA%E5%9B%BE_20171223_203016.png\" alt=\"image\"></p>"},{"title":"Node.js 相关技术书籍推荐","date":"2017-12-03T12:54:24.000Z","_content":"\n接触 Node.js 也有段时间了，从一开始对 Node.js 一无所知，到现在能在项目中熟练使用，书籍、文档和实战缺一不可。在学习初期，书籍扮演着一个非常重要的角色，让我对 Node.js 有了一个系统的认识。从看《JavaScript高级程序设计》开始，陆陆续续看了不少 JavaScript、Node.js 以及后端技术的相关书籍。书看的越多，会越发觉得自己知识匮乏，然后就会去寻找更多的书来充实自己。下面就是我整理的 Node.js 后端开发相关的经典技术书籍，排名不分先后，括号内是豆瓣评分，仅作参考。部分书籍的 pdf 文件可以到我的 [Github](https://github.com/LemonSprite/free-programming-books.pdf) 上去下载。\n\n<!--more-->\n\n## JavaScript\n\n- 《JavaScript高级程序设计第三版》（9.3）\n- 《你不知道的JavaScript》（9.4）\n- 《JavaScript语言精粹》（9.1）\n- 《JavaScript设计模式与开发实践》（9.2）\n- 《JavaScript语言精髓与编程实践》（9.1）\n- 《JavaScript面向对象精要》（9.0）\n- 《JavaScript权威指南》（8.7）\n- 《JavaScript函数式编程》（7.3）\n- 《JavaScript设计模式》（8.4）\n- 《JavaScript模式》（8.6）\n- 《Effective JavaScript》（8.4）\n- 《JavaScript忍者秘籍》（8.7）\n- 《高性能JavaScript》（8.9）\n- 《精通JavaScript》（8.6）  \n\n## Node.js\n\n- 《Node.js实战》（8.4）\n- 《深入浅出node.js》（8.7）\n- 《The Node Beginner Book》（8.7）\n- 《Node学习指南》（7.6）\n- 《Node与Express开发》（7.5）\n- 《Node.js开发指南》（7.5）\n- 《Node.js权威指南》（7.3）\n- 《Node即学即用》（7.3）\n\n## MySql\n\n- 《高性能MySQL（第3版）》（9.3）\n- 《MySQL技术内幕：InnoDB存储引擎（第2版）》（8.6）\n- 《深入浅出MySQL 数据库开发 优化与管理维护 第2版》（8.3）\n- 《高可用MySQL（第2版）》（8.0）\n- 《SQL基础教程（第3版）》（8.8）\n\n## Redis\n\n- 《Redis实战》（8.3）\n- 《Redis设计与实现》（8.5）\n\n## MongoDB\n\n- 《MongoDB权威指南 第2版》（8.1）\n- 《MongoDB应用设计模式》（6.1）\n\n## HTTP\n- 《HTTP权威指南》（8.7）\n- 《Web性能权威指南》（8.8）\n\n## 其他\n\n* 《程序员修炼之道-从小工到大家》\n* 《高效程序员的45个习惯 敏捷开发修炼之道》\n* 《软件随想录》\n* 《重构-改善既有代码的设计》\n* 《代码简洁之道》\n* 《高效团队开发的工具与方法》\n* 《GitHub入门与实践》\n* 《技术管理之巅》\n* 《架构即未来》\n* 《持续交付-发布可靠软件的系统方法》\n* 《设计模式-可复用面向对象软件基础》\n* 《设计模式之禅（第2版）》\n* 《企业应用架构模式》\n* 《领域驱动设计 软件核心复杂性应对之道》\n* 《实现领域驱动设计》\n* 《ZooKeeper：分布式过程协同技术详解》\n* 《RabbitMQ实战：高效部署分布式消息队列》\n* 《Redis设计与实现》\n* 《实战Nginx：取代Apache的高性能Web服务器》\n* 《大型网站技术架构 核心原理与案例分析》\n* 《大型分布式网站架构设计与实践》\n* 《微服务架构与实践》\n* 《分布式服务框架原理与实践》\n","source":"_posts/book-recommond.md","raw":"---\ntitle: Node.js 相关技术书籍推荐\ndate: 2017-12-03 20:54:24\ntags: \n  - 技术书籍\n  - Node.js\ncategory: 码梦为生\n---\n\n接触 Node.js 也有段时间了，从一开始对 Node.js 一无所知，到现在能在项目中熟练使用，书籍、文档和实战缺一不可。在学习初期，书籍扮演着一个非常重要的角色，让我对 Node.js 有了一个系统的认识。从看《JavaScript高级程序设计》开始，陆陆续续看了不少 JavaScript、Node.js 以及后端技术的相关书籍。书看的越多，会越发觉得自己知识匮乏，然后就会去寻找更多的书来充实自己。下面就是我整理的 Node.js 后端开发相关的经典技术书籍，排名不分先后，括号内是豆瓣评分，仅作参考。部分书籍的 pdf 文件可以到我的 [Github](https://github.com/LemonSprite/free-programming-books.pdf) 上去下载。\n\n<!--more-->\n\n## JavaScript\n\n- 《JavaScript高级程序设计第三版》（9.3）\n- 《你不知道的JavaScript》（9.4）\n- 《JavaScript语言精粹》（9.1）\n- 《JavaScript设计模式与开发实践》（9.2）\n- 《JavaScript语言精髓与编程实践》（9.1）\n- 《JavaScript面向对象精要》（9.0）\n- 《JavaScript权威指南》（8.7）\n- 《JavaScript函数式编程》（7.3）\n- 《JavaScript设计模式》（8.4）\n- 《JavaScript模式》（8.6）\n- 《Effective JavaScript》（8.4）\n- 《JavaScript忍者秘籍》（8.7）\n- 《高性能JavaScript》（8.9）\n- 《精通JavaScript》（8.6）  \n\n## Node.js\n\n- 《Node.js实战》（8.4）\n- 《深入浅出node.js》（8.7）\n- 《The Node Beginner Book》（8.7）\n- 《Node学习指南》（7.6）\n- 《Node与Express开发》（7.5）\n- 《Node.js开发指南》（7.5）\n- 《Node.js权威指南》（7.3）\n- 《Node即学即用》（7.3）\n\n## MySql\n\n- 《高性能MySQL（第3版）》（9.3）\n- 《MySQL技术内幕：InnoDB存储引擎（第2版）》（8.6）\n- 《深入浅出MySQL 数据库开发 优化与管理维护 第2版》（8.3）\n- 《高可用MySQL（第2版）》（8.0）\n- 《SQL基础教程（第3版）》（8.8）\n\n## Redis\n\n- 《Redis实战》（8.3）\n- 《Redis设计与实现》（8.5）\n\n## MongoDB\n\n- 《MongoDB权威指南 第2版》（8.1）\n- 《MongoDB应用设计模式》（6.1）\n\n## HTTP\n- 《HTTP权威指南》（8.7）\n- 《Web性能权威指南》（8.8）\n\n## 其他\n\n* 《程序员修炼之道-从小工到大家》\n* 《高效程序员的45个习惯 敏捷开发修炼之道》\n* 《软件随想录》\n* 《重构-改善既有代码的设计》\n* 《代码简洁之道》\n* 《高效团队开发的工具与方法》\n* 《GitHub入门与实践》\n* 《技术管理之巅》\n* 《架构即未来》\n* 《持续交付-发布可靠软件的系统方法》\n* 《设计模式-可复用面向对象软件基础》\n* 《设计模式之禅（第2版）》\n* 《企业应用架构模式》\n* 《领域驱动设计 软件核心复杂性应对之道》\n* 《实现领域驱动设计》\n* 《ZooKeeper：分布式过程协同技术详解》\n* 《RabbitMQ实战：高效部署分布式消息队列》\n* 《Redis设计与实现》\n* 《实战Nginx：取代Apache的高性能Web服务器》\n* 《大型网站技术架构 核心原理与案例分析》\n* 《大型分布式网站架构设计与实践》\n* 《微服务架构与实践》\n* 《分布式服务框架原理与实践》\n","slug":"book-recommond","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpl000gslm43m36ry0q","content":"<p>接触 Node.js 也有段时间了，从一开始对 Node.js 一无所知，到现在能在项目中熟练使用，书籍、文档和实战缺一不可。在学习初期，书籍扮演着一个非常重要的角色，让我对 Node.js 有了一个系统的认识。从看《JavaScript高级程序设计》开始，陆陆续续看了不少 JavaScript、Node.js 以及后端技术的相关书籍。书看的越多，会越发觉得自己知识匮乏，然后就会去寻找更多的书来充实自己。下面就是我整理的 Node.js 后端开发相关的经典技术书籍，排名不分先后，括号内是豆瓣评分，仅作参考。部分书籍的 pdf 文件可以到我的 <a href=\"https://github.com/LemonSprite/free-programming-books.pdf\" target=\"_blank\" rel=\"noopener\">Github</a> 上去下载。</p>\n<a id=\"more\"></a>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li>《JavaScript高级程序设计第三版》（9.3）</li>\n<li>《你不知道的JavaScript》（9.4）</li>\n<li>《JavaScript语言精粹》（9.1）</li>\n<li>《JavaScript设计模式与开发实践》（9.2）</li>\n<li>《JavaScript语言精髓与编程实践》（9.1）</li>\n<li>《JavaScript面向对象精要》（9.0）</li>\n<li>《JavaScript权威指南》（8.7）</li>\n<li>《JavaScript函数式编程》（7.3）</li>\n<li>《JavaScript设计模式》（8.4）</li>\n<li>《JavaScript模式》（8.6）</li>\n<li>《Effective JavaScript》（8.4）</li>\n<li>《JavaScript忍者秘籍》（8.7）</li>\n<li>《高性能JavaScript》（8.9）</li>\n<li>《精通JavaScript》（8.6）  </li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li>《Node.js实战》（8.4）</li>\n<li>《深入浅出node.js》（8.7）</li>\n<li>《The Node Beginner Book》（8.7）</li>\n<li>《Node学习指南》（7.6）</li>\n<li>《Node与Express开发》（7.5）</li>\n<li>《Node.js开发指南》（7.5）</li>\n<li>《Node.js权威指南》（7.3）</li>\n<li>《Node即学即用》（7.3）</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>《高性能MySQL（第3版）》（9.3）</li>\n<li>《MySQL技术内幕：InnoDB存储引擎（第2版）》（8.6）</li>\n<li>《深入浅出MySQL 数据库开发 优化与管理维护 第2版》（8.3）</li>\n<li>《高可用MySQL（第2版）》（8.0）</li>\n<li>《SQL基础教程（第3版）》（8.8）</li>\n</ul>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><ul>\n<li>《Redis实战》（8.3）</li>\n<li>《Redis设计与实现》（8.5）</li>\n</ul>\n<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><ul>\n<li>《MongoDB权威指南 第2版》（8.1）</li>\n<li>《MongoDB应用设计模式》（6.1）</li>\n</ul>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><ul>\n<li>《HTTP权威指南》（8.7）</li>\n<li>《Web性能权威指南》（8.8）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>《程序员修炼之道-从小工到大家》</li>\n<li>《高效程序员的45个习惯 敏捷开发修炼之道》</li>\n<li>《软件随想录》</li>\n<li>《重构-改善既有代码的设计》</li>\n<li>《代码简洁之道》</li>\n<li>《高效团队开发的工具与方法》</li>\n<li>《GitHub入门与实践》</li>\n<li>《技术管理之巅》</li>\n<li>《架构即未来》</li>\n<li>《持续交付-发布可靠软件的系统方法》</li>\n<li>《设计模式-可复用面向对象软件基础》</li>\n<li>《设计模式之禅（第2版）》</li>\n<li>《企业应用架构模式》</li>\n<li>《领域驱动设计 软件核心复杂性应对之道》</li>\n<li>《实现领域驱动设计》</li>\n<li>《ZooKeeper：分布式过程协同技术详解》</li>\n<li>《RabbitMQ实战：高效部署分布式消息队列》</li>\n<li>《Redis设计与实现》</li>\n<li>《实战Nginx：取代Apache的高性能Web服务器》</li>\n<li>《大型网站技术架构 核心原理与案例分析》</li>\n<li>《大型分布式网站架构设计与实践》</li>\n<li>《微服务架构与实践》</li>\n<li>《分布式服务框架原理与实践》</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>接触 Node.js 也有段时间了，从一开始对 Node.js 一无所知，到现在能在项目中熟练使用，书籍、文档和实战缺一不可。在学习初期，书籍扮演着一个非常重要的角色，让我对 Node.js 有了一个系统的认识。从看《JavaScript高级程序设计》开始，陆陆续续看了不少 JavaScript、Node.js 以及后端技术的相关书籍。书看的越多，会越发觉得自己知识匮乏，然后就会去寻找更多的书来充实自己。下面就是我整理的 Node.js 后端开发相关的经典技术书籍，排名不分先后，括号内是豆瓣评分，仅作参考。部分书籍的 pdf 文件可以到我的 <a href=\"https://github.com/LemonSprite/free-programming-books.pdf\" target=\"_blank\" rel=\"noopener\">Github</a> 上去下载。</p>","more":"<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h2><ul>\n<li>《JavaScript高级程序设计第三版》（9.3）</li>\n<li>《你不知道的JavaScript》（9.4）</li>\n<li>《JavaScript语言精粹》（9.1）</li>\n<li>《JavaScript设计模式与开发实践》（9.2）</li>\n<li>《JavaScript语言精髓与编程实践》（9.1）</li>\n<li>《JavaScript面向对象精要》（9.0）</li>\n<li>《JavaScript权威指南》（8.7）</li>\n<li>《JavaScript函数式编程》（7.3）</li>\n<li>《JavaScript设计模式》（8.4）</li>\n<li>《JavaScript模式》（8.6）</li>\n<li>《Effective JavaScript》（8.4）</li>\n<li>《JavaScript忍者秘籍》（8.7）</li>\n<li>《高性能JavaScript》（8.9）</li>\n<li>《精通JavaScript》（8.6）  </li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li>《Node.js实战》（8.4）</li>\n<li>《深入浅出node.js》（8.7）</li>\n<li>《The Node Beginner Book》（8.7）</li>\n<li>《Node学习指南》（7.6）</li>\n<li>《Node与Express开发》（7.5）</li>\n<li>《Node.js开发指南》（7.5）</li>\n<li>《Node.js权威指南》（7.3）</li>\n<li>《Node即学即用》（7.3）</li>\n</ul>\n<h2 id=\"MySql\"><a href=\"#MySql\" class=\"headerlink\" title=\"MySql\"></a>MySql</h2><ul>\n<li>《高性能MySQL（第3版）》（9.3）</li>\n<li>《MySQL技术内幕：InnoDB存储引擎（第2版）》（8.6）</li>\n<li>《深入浅出MySQL 数据库开发 优化与管理维护 第2版》（8.3）</li>\n<li>《高可用MySQL（第2版）》（8.0）</li>\n<li>《SQL基础教程（第3版）》（8.8）</li>\n</ul>\n<h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><ul>\n<li>《Redis实战》（8.3）</li>\n<li>《Redis设计与实现》（8.5）</li>\n</ul>\n<h2 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h2><ul>\n<li>《MongoDB权威指南 第2版》（8.1）</li>\n<li>《MongoDB应用设计模式》（6.1）</li>\n</ul>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><ul>\n<li>《HTTP权威指南》（8.7）</li>\n<li>《Web性能权威指南》（8.8）</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>《程序员修炼之道-从小工到大家》</li>\n<li>《高效程序员的45个习惯 敏捷开发修炼之道》</li>\n<li>《软件随想录》</li>\n<li>《重构-改善既有代码的设计》</li>\n<li>《代码简洁之道》</li>\n<li>《高效团队开发的工具与方法》</li>\n<li>《GitHub入门与实践》</li>\n<li>《技术管理之巅》</li>\n<li>《架构即未来》</li>\n<li>《持续交付-发布可靠软件的系统方法》</li>\n<li>《设计模式-可复用面向对象软件基础》</li>\n<li>《设计模式之禅（第2版）》</li>\n<li>《企业应用架构模式》</li>\n<li>《领域驱动设计 软件核心复杂性应对之道》</li>\n<li>《实现领域驱动设计》</li>\n<li>《ZooKeeper：分布式过程协同技术详解》</li>\n<li>《RabbitMQ实战：高效部署分布式消息队列》</li>\n<li>《Redis设计与实现》</li>\n<li>《实战Nginx：取代Apache的高性能Web服务器》</li>\n<li>《大型网站技术架构 核心原理与案例分析》</li>\n<li>《大型分布式网站架构设计与实践》</li>\n<li>《微服务架构与实践》</li>\n<li>《分布式服务框架原理与实践》</li>\n</ul>"},{"title":"Chrome 常用快捷键","date":"2016-06-21T08:29:53.000Z","_content":"\nChrome 的一些常用快捷键。\n\n<!--more-->\n\n## 窗口与标签页\n\n|操作|快捷键|\n|-|-|\n|打开新窗口|Ctrl + n|\n|在隐身模式下打开新窗口|\tCtrl + Shift + n|\n|打开新的标签页|\tCtrl + t|\n|恢复最后关闭的标签页|Ctrl + Shift + t|\n|关闭当前标签页\t|Ctrl + w 或 Ctrl + F4|\n|关闭所有打开的标签页和浏览器\t|Ctrl + Shift + w|\n|跳转到下一个打开的标签页\t|Ctrl + Tab 或 Ctrl + PgDn|\n|跳转到上一个打开的标签页\t|Ctrl + Shift + Tab 或 Ctrl + PgUp|\n|跳转到特定标签页\t|Ctrl + 1 到 Ctrl + 8|\n|跳转到最后一个标签页|\tCtrl + 9|\n|在当前标签页中打开主页|\tAlt + Home|\n|最小化当前窗口|\tAlt + 空格键 + n|\n|最大化当前窗口|\tAlt + 空格键 + x|\n|开启或关闭全屏模式|\tF11|\n|退出 Chrome | Alt + F4 或 Ctrl + Shift + q|\n\n## 网页操作\n\n|操作|快捷键|\n|-|-|\n|重新加载当前网页\t|F5 或 Ctrl + r|\n|重新加载当前网页（忽略缓存的内容）|\tShift + F5 或 Ctrl + Shift  + r|\n|停止加载网页\t|Esc|\n|打开查找栏搜索当前网页\t|Ctrl + f 或 F3|\n|跳转到与查找栏中搜索字词相匹配的下一条内容\t|Ctrl + g|\n|跳转到与查找栏中搜索字词相匹配的上一条内容\t|Ctrl + Shift + g|\n|将当前网页保存为书签\t|Ctrl + d|\n|将所有打开的标签页保持为书签|\tCtrl + Shift + d|\n|显示或隐藏书签栏\t|Ctrl + Shift + b|\n|放大网页上的所有内容\t|Ctrl + + 或 按住 Ctrl 键的同时向上滚动鼠标滚轮|\n|缩小网页上的所有内容|\tCtrl + - 或 按住 Ctrl 键的同时向下滚动鼠标滚轮|\n|将网页上的所有内容恢复到默认大小\t|Ctrl + 0|\n|将焦点放置在 Chrome 工具栏中的第一项上|\tShift + Alt + t|\n|浏览下一个可点击项\t|Tab|\n|浏览上一个可点击项\t|Shift + Tab| \n|向下滚动网页，一次一个屏幕\t|空格键或 PgDn|\n|向上滚动网页，一次一个屏幕\t|Shift + 空格键或 PgUp|\n|在网页上水平滚动\t|按住 Shift 键并滚动鼠标滚轮|\n|删除文本字段中的上一个字词|\tCtrl + Backspace|\n|将焦点移到通知上|\tAlt + n|\n|在通知中允许|\tAlt + Shift + a|\n|在通知中拒绝\t|Alt + Shift + d|\n|显示当前网页的 HTML 源代码（不可修改）|\tCtrl + u|\n|使用 Chrome 打开计算机中的文件|\t按住 Ctrl + o 键并选择文件|\n|打印当前网页\t|Ctrl + p|\n|保存当前网页|\tCtrl + s|\n\n## 地址栏操作\n\n|操作\t|快捷键|\n|-|-|\n|使用默认搜索引擎进行搜索\t|输入搜索字词并按 Enter 键|\n|使用其他搜索引擎进行搜索\t|输入搜索引擎名称并按 Tab 键|\n|为网站名称添加 www. 和 .com，并在当前标签页中 / 新标签页中打开该网站\t|输入网站名称并按 Ctrl + Enter 键 / Alt + Enter 键|\n|跳转到地址栏\t|Ctrl + l、Alt + d 或 F6|\n|在地址栏、书签栏和页面内容之间向前/向后切换焦点\t|F6 / Shift + F6|\n|从页面中的任意位置搜索|Ctrl + k 或 Ctrl + e|\n\n## 其他功能\n\n|操作|快捷键|\n|-|-|\n|打开“菜单”\t|Alt + e 或 F10|\n|打开开发者工具|\tCtrl + Shift + j 或 F12|\n|打开清除浏览数据选项\t|Ctrl + Shift + Delete|\n|打开书签管理器|\tCtrl + Shift + o|\n|打开历史记录页\t|Ctrl + h|\n|打开下载内容页|\tCtrl + j|\n|打开 Chrome 帮助中心|\tF1|\n|打开 Chrome 任务管理器|\tShift + Esc|\n|使用其他帐户登录或进入隐身模式|\tCtrl + Shift + m|\n","source":"_posts/chrome-hot-key.md","raw":"---\ntitle: Chrome 常用快捷键\ndate: 2016-06-21 16:29:53\ntags:\n  - Chrome\n  - 快捷键\ncategory: 码梦为生\n---\n\nChrome 的一些常用快捷键。\n\n<!--more-->\n\n## 窗口与标签页\n\n|操作|快捷键|\n|-|-|\n|打开新窗口|Ctrl + n|\n|在隐身模式下打开新窗口|\tCtrl + Shift + n|\n|打开新的标签页|\tCtrl + t|\n|恢复最后关闭的标签页|Ctrl + Shift + t|\n|关闭当前标签页\t|Ctrl + w 或 Ctrl + F4|\n|关闭所有打开的标签页和浏览器\t|Ctrl + Shift + w|\n|跳转到下一个打开的标签页\t|Ctrl + Tab 或 Ctrl + PgDn|\n|跳转到上一个打开的标签页\t|Ctrl + Shift + Tab 或 Ctrl + PgUp|\n|跳转到特定标签页\t|Ctrl + 1 到 Ctrl + 8|\n|跳转到最后一个标签页|\tCtrl + 9|\n|在当前标签页中打开主页|\tAlt + Home|\n|最小化当前窗口|\tAlt + 空格键 + n|\n|最大化当前窗口|\tAlt + 空格键 + x|\n|开启或关闭全屏模式|\tF11|\n|退出 Chrome | Alt + F4 或 Ctrl + Shift + q|\n\n## 网页操作\n\n|操作|快捷键|\n|-|-|\n|重新加载当前网页\t|F5 或 Ctrl + r|\n|重新加载当前网页（忽略缓存的内容）|\tShift + F5 或 Ctrl + Shift  + r|\n|停止加载网页\t|Esc|\n|打开查找栏搜索当前网页\t|Ctrl + f 或 F3|\n|跳转到与查找栏中搜索字词相匹配的下一条内容\t|Ctrl + g|\n|跳转到与查找栏中搜索字词相匹配的上一条内容\t|Ctrl + Shift + g|\n|将当前网页保存为书签\t|Ctrl + d|\n|将所有打开的标签页保持为书签|\tCtrl + Shift + d|\n|显示或隐藏书签栏\t|Ctrl + Shift + b|\n|放大网页上的所有内容\t|Ctrl + + 或 按住 Ctrl 键的同时向上滚动鼠标滚轮|\n|缩小网页上的所有内容|\tCtrl + - 或 按住 Ctrl 键的同时向下滚动鼠标滚轮|\n|将网页上的所有内容恢复到默认大小\t|Ctrl + 0|\n|将焦点放置在 Chrome 工具栏中的第一项上|\tShift + Alt + t|\n|浏览下一个可点击项\t|Tab|\n|浏览上一个可点击项\t|Shift + Tab| \n|向下滚动网页，一次一个屏幕\t|空格键或 PgDn|\n|向上滚动网页，一次一个屏幕\t|Shift + 空格键或 PgUp|\n|在网页上水平滚动\t|按住 Shift 键并滚动鼠标滚轮|\n|删除文本字段中的上一个字词|\tCtrl + Backspace|\n|将焦点移到通知上|\tAlt + n|\n|在通知中允许|\tAlt + Shift + a|\n|在通知中拒绝\t|Alt + Shift + d|\n|显示当前网页的 HTML 源代码（不可修改）|\tCtrl + u|\n|使用 Chrome 打开计算机中的文件|\t按住 Ctrl + o 键并选择文件|\n|打印当前网页\t|Ctrl + p|\n|保存当前网页|\tCtrl + s|\n\n## 地址栏操作\n\n|操作\t|快捷键|\n|-|-|\n|使用默认搜索引擎进行搜索\t|输入搜索字词并按 Enter 键|\n|使用其他搜索引擎进行搜索\t|输入搜索引擎名称并按 Tab 键|\n|为网站名称添加 www. 和 .com，并在当前标签页中 / 新标签页中打开该网站\t|输入网站名称并按 Ctrl + Enter 键 / Alt + Enter 键|\n|跳转到地址栏\t|Ctrl + l、Alt + d 或 F6|\n|在地址栏、书签栏和页面内容之间向前/向后切换焦点\t|F6 / Shift + F6|\n|从页面中的任意位置搜索|Ctrl + k 或 Ctrl + e|\n\n## 其他功能\n\n|操作|快捷键|\n|-|-|\n|打开“菜单”\t|Alt + e 或 F10|\n|打开开发者工具|\tCtrl + Shift + j 或 F12|\n|打开清除浏览数据选项\t|Ctrl + Shift + Delete|\n|打开书签管理器|\tCtrl + Shift + o|\n|打开历史记录页\t|Ctrl + h|\n|打开下载内容页|\tCtrl + j|\n|打开 Chrome 帮助中心|\tF1|\n|打开 Chrome 任务管理器|\tShift + Esc|\n|使用其他帐户登录或进入隐身模式|\tCtrl + Shift + m|\n","slug":"chrome-hot-key","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpm000jslm42grqferx","content":"<p>Chrome 的一些常用快捷键。</p>\n<a id=\"more\"></a>\n<h2 id=\"窗口与标签页\"><a href=\"#窗口与标签页\" class=\"headerlink\" title=\"窗口与标签页\"></a>窗口与标签页</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开新窗口</td>\n<td>Ctrl + n</td>\n</tr>\n<tr>\n<td>在隐身模式下打开新窗口</td>\n<td>Ctrl + Shift + n</td>\n</tr>\n<tr>\n<td>打开新的标签页</td>\n<td>Ctrl + t</td>\n</tr>\n<tr>\n<td>恢复最后关闭的标签页</td>\n<td>Ctrl + Shift + t</td>\n</tr>\n<tr>\n<td>关闭当前标签页</td>\n<td>Ctrl + w 或 Ctrl + F4</td>\n</tr>\n<tr>\n<td>关闭所有打开的标签页和浏览器</td>\n<td>Ctrl + Shift + w</td>\n</tr>\n<tr>\n<td>跳转到下一个打开的标签页</td>\n<td>Ctrl + Tab 或 Ctrl + PgDn</td>\n</tr>\n<tr>\n<td>跳转到上一个打开的标签页</td>\n<td>Ctrl + Shift + Tab 或 Ctrl + PgUp</td>\n</tr>\n<tr>\n<td>跳转到特定标签页</td>\n<td>Ctrl + 1 到 Ctrl + 8</td>\n</tr>\n<tr>\n<td>跳转到最后一个标签页</td>\n<td>Ctrl + 9</td>\n</tr>\n<tr>\n<td>在当前标签页中打开主页</td>\n<td>Alt + Home</td>\n</tr>\n<tr>\n<td>最小化当前窗口</td>\n<td>Alt + 空格键 + n</td>\n</tr>\n<tr>\n<td>最大化当前窗口</td>\n<td>Alt + 空格键 + x</td>\n</tr>\n<tr>\n<td>开启或关闭全屏模式</td>\n<td>F11</td>\n</tr>\n<tr>\n<td>退出 Chrome</td>\n<td>Alt + F4 或 Ctrl + Shift + q</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"网页操作\"><a href=\"#网页操作\" class=\"headerlink\" title=\"网页操作\"></a>网页操作</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>重新加载当前网页</td>\n<td>F5 或 Ctrl + r</td>\n</tr>\n<tr>\n<td>重新加载当前网页（忽略缓存的内容）</td>\n<td>Shift + F5 或 Ctrl + Shift  + r</td>\n</tr>\n<tr>\n<td>停止加载网页</td>\n<td>Esc</td>\n</tr>\n<tr>\n<td>打开查找栏搜索当前网页</td>\n<td>Ctrl + f 或 F3</td>\n</tr>\n<tr>\n<td>跳转到与查找栏中搜索字词相匹配的下一条内容</td>\n<td>Ctrl + g</td>\n</tr>\n<tr>\n<td>跳转到与查找栏中搜索字词相匹配的上一条内容</td>\n<td>Ctrl + Shift + g</td>\n</tr>\n<tr>\n<td>将当前网页保存为书签</td>\n<td>Ctrl + d</td>\n</tr>\n<tr>\n<td>将所有打开的标签页保持为书签</td>\n<td>Ctrl + Shift + d</td>\n</tr>\n<tr>\n<td>显示或隐藏书签栏</td>\n<td>Ctrl + Shift + b</td>\n</tr>\n<tr>\n<td>放大网页上的所有内容</td>\n<td>Ctrl + + 或 按住 Ctrl 键的同时向上滚动鼠标滚轮</td>\n</tr>\n<tr>\n<td>缩小网页上的所有内容</td>\n<td>Ctrl + - 或 按住 Ctrl 键的同时向下滚动鼠标滚轮</td>\n</tr>\n<tr>\n<td>将网页上的所有内容恢复到默认大小</td>\n<td>Ctrl + 0</td>\n</tr>\n<tr>\n<td>将焦点放置在 Chrome 工具栏中的第一项上</td>\n<td>Shift + Alt + t</td>\n</tr>\n<tr>\n<td>浏览下一个可点击项</td>\n<td>Tab</td>\n</tr>\n<tr>\n<td>浏览上一个可点击项</td>\n<td>Shift + Tab</td>\n</tr>\n<tr>\n<td>向下滚动网页，一次一个屏幕</td>\n<td>空格键或 PgDn</td>\n</tr>\n<tr>\n<td>向上滚动网页，一次一个屏幕</td>\n<td>Shift + 空格键或 PgUp</td>\n</tr>\n<tr>\n<td>在网页上水平滚动</td>\n<td>按住 Shift 键并滚动鼠标滚轮</td>\n</tr>\n<tr>\n<td>删除文本字段中的上一个字词</td>\n<td>Ctrl + Backspace</td>\n</tr>\n<tr>\n<td>将焦点移到通知上</td>\n<td>Alt + n</td>\n</tr>\n<tr>\n<td>在通知中允许</td>\n<td>Alt + Shift + a</td>\n</tr>\n<tr>\n<td>在通知中拒绝</td>\n<td>Alt + Shift + d</td>\n</tr>\n<tr>\n<td>显示当前网页的 HTML 源代码（不可修改）</td>\n<td>Ctrl + u</td>\n</tr>\n<tr>\n<td>使用 Chrome 打开计算机中的文件</td>\n<td>按住 Ctrl + o 键并选择文件</td>\n</tr>\n<tr>\n<td>打印当前网页</td>\n<td>Ctrl + p</td>\n</tr>\n<tr>\n<td>保存当前网页</td>\n<td>Ctrl + s</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"地址栏操作\"><a href=\"#地址栏操作\" class=\"headerlink\" title=\"地址栏操作\"></a>地址栏操作</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>使用默认搜索引擎进行搜索</td>\n<td>输入搜索字词并按 Enter 键</td>\n</tr>\n<tr>\n<td>使用其他搜索引擎进行搜索</td>\n<td>输入搜索引擎名称并按 Tab 键</td>\n</tr>\n<tr>\n<td>为网站名称添加 www. 和 .com，并在当前标签页中 / 新标签页中打开该网站</td>\n<td>输入网站名称并按 Ctrl + Enter 键 / Alt + Enter 键</td>\n</tr>\n<tr>\n<td>跳转到地址栏</td>\n<td>Ctrl + l、Alt + d 或 F6</td>\n</tr>\n<tr>\n<td>在地址栏、书签栏和页面内容之间向前/向后切换焦点</td>\n<td>F6 / Shift + F6</td>\n</tr>\n<tr>\n<td>从页面中的任意位置搜索</td>\n<td>Ctrl + k 或 Ctrl + e</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开“菜单”</td>\n<td>Alt + e 或 F10</td>\n</tr>\n<tr>\n<td>打开开发者工具</td>\n<td>Ctrl + Shift + j 或 F12</td>\n</tr>\n<tr>\n<td>打开清除浏览数据选项</td>\n<td>Ctrl + Shift + Delete</td>\n</tr>\n<tr>\n<td>打开书签管理器</td>\n<td>Ctrl + Shift + o</td>\n</tr>\n<tr>\n<td>打开历史记录页</td>\n<td>Ctrl + h</td>\n</tr>\n<tr>\n<td>打开下载内容页</td>\n<td>Ctrl + j</td>\n</tr>\n<tr>\n<td>打开 Chrome 帮助中心</td>\n<td>F1</td>\n</tr>\n<tr>\n<td>打开 Chrome 任务管理器</td>\n<td>Shift + Esc</td>\n</tr>\n<tr>\n<td>使用其他帐户登录或进入隐身模式</td>\n<td>Ctrl + Shift + m</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>Chrome 的一些常用快捷键。</p>","more":"<h2 id=\"窗口与标签页\"><a href=\"#窗口与标签页\" class=\"headerlink\" title=\"窗口与标签页\"></a>窗口与标签页</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开新窗口</td>\n<td>Ctrl + n</td>\n</tr>\n<tr>\n<td>在隐身模式下打开新窗口</td>\n<td>Ctrl + Shift + n</td>\n</tr>\n<tr>\n<td>打开新的标签页</td>\n<td>Ctrl + t</td>\n</tr>\n<tr>\n<td>恢复最后关闭的标签页</td>\n<td>Ctrl + Shift + t</td>\n</tr>\n<tr>\n<td>关闭当前标签页</td>\n<td>Ctrl + w 或 Ctrl + F4</td>\n</tr>\n<tr>\n<td>关闭所有打开的标签页和浏览器</td>\n<td>Ctrl + Shift + w</td>\n</tr>\n<tr>\n<td>跳转到下一个打开的标签页</td>\n<td>Ctrl + Tab 或 Ctrl + PgDn</td>\n</tr>\n<tr>\n<td>跳转到上一个打开的标签页</td>\n<td>Ctrl + Shift + Tab 或 Ctrl + PgUp</td>\n</tr>\n<tr>\n<td>跳转到特定标签页</td>\n<td>Ctrl + 1 到 Ctrl + 8</td>\n</tr>\n<tr>\n<td>跳转到最后一个标签页</td>\n<td>Ctrl + 9</td>\n</tr>\n<tr>\n<td>在当前标签页中打开主页</td>\n<td>Alt + Home</td>\n</tr>\n<tr>\n<td>最小化当前窗口</td>\n<td>Alt + 空格键 + n</td>\n</tr>\n<tr>\n<td>最大化当前窗口</td>\n<td>Alt + 空格键 + x</td>\n</tr>\n<tr>\n<td>开启或关闭全屏模式</td>\n<td>F11</td>\n</tr>\n<tr>\n<td>退出 Chrome</td>\n<td>Alt + F4 或 Ctrl + Shift + q</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"网页操作\"><a href=\"#网页操作\" class=\"headerlink\" title=\"网页操作\"></a>网页操作</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>重新加载当前网页</td>\n<td>F5 或 Ctrl + r</td>\n</tr>\n<tr>\n<td>重新加载当前网页（忽略缓存的内容）</td>\n<td>Shift + F5 或 Ctrl + Shift  + r</td>\n</tr>\n<tr>\n<td>停止加载网页</td>\n<td>Esc</td>\n</tr>\n<tr>\n<td>打开查找栏搜索当前网页</td>\n<td>Ctrl + f 或 F3</td>\n</tr>\n<tr>\n<td>跳转到与查找栏中搜索字词相匹配的下一条内容</td>\n<td>Ctrl + g</td>\n</tr>\n<tr>\n<td>跳转到与查找栏中搜索字词相匹配的上一条内容</td>\n<td>Ctrl + Shift + g</td>\n</tr>\n<tr>\n<td>将当前网页保存为书签</td>\n<td>Ctrl + d</td>\n</tr>\n<tr>\n<td>将所有打开的标签页保持为书签</td>\n<td>Ctrl + Shift + d</td>\n</tr>\n<tr>\n<td>显示或隐藏书签栏</td>\n<td>Ctrl + Shift + b</td>\n</tr>\n<tr>\n<td>放大网页上的所有内容</td>\n<td>Ctrl + + 或 按住 Ctrl 键的同时向上滚动鼠标滚轮</td>\n</tr>\n<tr>\n<td>缩小网页上的所有内容</td>\n<td>Ctrl + - 或 按住 Ctrl 键的同时向下滚动鼠标滚轮</td>\n</tr>\n<tr>\n<td>将网页上的所有内容恢复到默认大小</td>\n<td>Ctrl + 0</td>\n</tr>\n<tr>\n<td>将焦点放置在 Chrome 工具栏中的第一项上</td>\n<td>Shift + Alt + t</td>\n</tr>\n<tr>\n<td>浏览下一个可点击项</td>\n<td>Tab</td>\n</tr>\n<tr>\n<td>浏览上一个可点击项</td>\n<td>Shift + Tab</td>\n</tr>\n<tr>\n<td>向下滚动网页，一次一个屏幕</td>\n<td>空格键或 PgDn</td>\n</tr>\n<tr>\n<td>向上滚动网页，一次一个屏幕</td>\n<td>Shift + 空格键或 PgUp</td>\n</tr>\n<tr>\n<td>在网页上水平滚动</td>\n<td>按住 Shift 键并滚动鼠标滚轮</td>\n</tr>\n<tr>\n<td>删除文本字段中的上一个字词</td>\n<td>Ctrl + Backspace</td>\n</tr>\n<tr>\n<td>将焦点移到通知上</td>\n<td>Alt + n</td>\n</tr>\n<tr>\n<td>在通知中允许</td>\n<td>Alt + Shift + a</td>\n</tr>\n<tr>\n<td>在通知中拒绝</td>\n<td>Alt + Shift + d</td>\n</tr>\n<tr>\n<td>显示当前网页的 HTML 源代码（不可修改）</td>\n<td>Ctrl + u</td>\n</tr>\n<tr>\n<td>使用 Chrome 打开计算机中的文件</td>\n<td>按住 Ctrl + o 键并选择文件</td>\n</tr>\n<tr>\n<td>打印当前网页</td>\n<td>Ctrl + p</td>\n</tr>\n<tr>\n<td>保存当前网页</td>\n<td>Ctrl + s</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"地址栏操作\"><a href=\"#地址栏操作\" class=\"headerlink\" title=\"地址栏操作\"></a>地址栏操作</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>使用默认搜索引擎进行搜索</td>\n<td>输入搜索字词并按 Enter 键</td>\n</tr>\n<tr>\n<td>使用其他搜索引擎进行搜索</td>\n<td>输入搜索引擎名称并按 Tab 键</td>\n</tr>\n<tr>\n<td>为网站名称添加 www. 和 .com，并在当前标签页中 / 新标签页中打开该网站</td>\n<td>输入网站名称并按 Ctrl + Enter 键 / Alt + Enter 键</td>\n</tr>\n<tr>\n<td>跳转到地址栏</td>\n<td>Ctrl + l、Alt + d 或 F6</td>\n</tr>\n<tr>\n<td>在地址栏、书签栏和页面内容之间向前/向后切换焦点</td>\n<td>F6 / Shift + F6</td>\n</tr>\n<tr>\n<td>从页面中的任意位置搜索</td>\n<td>Ctrl + k 或 Ctrl + e</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他功能\"><a href=\"#其他功能\" class=\"headerlink\" title=\"其他功能\"></a>其他功能</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开“菜单”</td>\n<td>Alt + e 或 F10</td>\n</tr>\n<tr>\n<td>打开开发者工具</td>\n<td>Ctrl + Shift + j 或 F12</td>\n</tr>\n<tr>\n<td>打开清除浏览数据选项</td>\n<td>Ctrl + Shift + Delete</td>\n</tr>\n<tr>\n<td>打开书签管理器</td>\n<td>Ctrl + Shift + o</td>\n</tr>\n<tr>\n<td>打开历史记录页</td>\n<td>Ctrl + h</td>\n</tr>\n<tr>\n<td>打开下载内容页</td>\n<td>Ctrl + j</td>\n</tr>\n<tr>\n<td>打开 Chrome 帮助中心</td>\n<td>F1</td>\n</tr>\n<tr>\n<td>打开 Chrome 任务管理器</td>\n<td>Shift + Esc</td>\n</tr>\n<tr>\n<td>使用其他帐户登录或进入隐身模式</td>\n<td>Ctrl + Shift + m</td>\n</tr>\n</tbody>\n</table>"},{"title":"Docker 数据管理","date":"2018-09-15T07:13:53.000Z","_content":"\nDocker 提供了3种方式将数据从Docker宿主机挂载到容器：\n\n- Volumes\n- Bind mounts\n- tmpfs mounts\n\n一般来说，volumes总是最好的选择。\n\n<!--more-->\n\n## 容器写入层的缺点\n\n我们可以将数据写到容器的可写入层，但是这种写入是有缺点的：\n\n- 当容器停止运行时，写入的数据会丢失。你也很难将这些数据从容器中取出来给另外的应用程序使用。\n\n- 容器的可写入层与宿主机是紧密耦合的。这些写入的数据在可以轻易地被删掉。\n\n- 写入容器的可写入层需要一个存储驱动（storage driver）来管理文件系统。这个存储驱动通过linux内核提供了一个union filesystem。相比于数据卷（data volume），这种额外的抽象会降低性能。\n\n## 选择合适的挂载方式\n\n不管你选择哪种挂载方式，从容器中看都是一样的。数据在容器的文件系统中被展示为一个目录或者一个单独的文件。\n\n一个简单区分 volumes，bind mounts 和 tmpfs mounts 不同点的方法是：思考数据在宿主机上是如何存在的。\n\n![image](https://michaelyou.github.io/img/types-of-mounts.png)\n\nVolumes 由 Docker 管理，存储在宿主机的某个地方（在 linux 上是 `/var/lib/docker/volumes/`）。非 Docker 应用程序不能改动这一位置的数据。Volumes 是 Docker 最好的数据持久化方法。\n\n- Volumes 由 Docker 创建和管理。你可以通过 `docker volume create` 命令显式地创建 volume，Docker 也可以在创建容器或服务是自己创建 volume。\n    \n- 当你创建了一个 volume，它会被存放在宿主机的一个目录下。当你将这个 volume 挂载到某个容器时，这个目录就是挂载到容器的东西。这一点和 bind mounts 类似，除了 volumes 是由 Docker 创建的，和宿主机的核心（core functionality）隔离。\n    \n- 一个 volume 可以同时被挂载到几个容器中。即使没有正在运行的容器使用这个 volume，volume 依然存在，不会被自动清除。可以通过 `docker volume prune` 清除不再使用的 volumes。\n    \n- volumes 也支持 volume driver，可以将数据存放在另外的机器或者云上。\n\nBind mounts 的数据可以存放在宿主机的任何地方。数据甚至可以是重要的系统文件或目录。非 Docker 应用程序可以改变这些数据。\n\n- Docker 早期就支持这个特性。与 volumes 相比，Bind mounts 支持的功能有限。使用 bind mounts 时，宿主机上的一个文件或目录被挂载到容器上。\n    \n- 警告：使用 Bind mounts 的一个副作用是，容器中运行的程序可以修改宿主机的文件系统，包括创建，修改，删除重要的系统文件或目录。这个功能可能会有安全问题。\n\ntmpfs mounts 的数据只存储在宿主机的内存中，不会写入到宿主机的文件系统。\n\n- tmpfs mounts 的数据不会落盘。在容器的生命周期内，它可以被用来存储一些不需要持久化的状态或敏感数据。例如，swarm 服务通过 tmpfs mounts 来将 secrets 挂载到一个服务的容器中去。\n\n### 适合Volumes的场景\n\n- 在不同的容器中共享数据。\n\n- 当 Docker 主机不能保证具有给定的目录或文件结构时，Volumes 可帮助你将 Docker 主机的配置与容器运行时分离。\n\n- 当要将容器的数据存储在远程主机或云提供程序上的时候。\n\n- 当你需要备份或迁移数据的时候。\n\n### 适合bind mounts的场景\n\n- 宿主机和容器共享配置文件。Docker 提供的 DNS 解决方案就是如此，将宿主机的 `/etc/resolv.conf` 挂载到每个容器中。\n\n- 开发环境需要在宿主机和容器中共享代码。docker 的开发就是如此，毕竟容器中一般是没有编辑器的。\n\n- 当 Docker 主机的文件或目录结构保证与容器所需的绑定装载一致时。\n\n### 适合tmpfs mounts的场景\n\n- tmpfs mounts 主要用在你既不想在容器内，又不想在宿主机文件系统保存数据的时候。这可能是出于安全原因，也可能是你的应用需要写非常多的非持久化数据，tmpfs mounts 这时候可以保证容器性能。\n","source":"_posts/docker-data-management.md","raw":"---\ntitle: Docker 数据管理\ndate: 2018-09-15 15:13:53\ncategory: 码梦为生\ntags:\n    - Docker\n---\n\nDocker 提供了3种方式将数据从Docker宿主机挂载到容器：\n\n- Volumes\n- Bind mounts\n- tmpfs mounts\n\n一般来说，volumes总是最好的选择。\n\n<!--more-->\n\n## 容器写入层的缺点\n\n我们可以将数据写到容器的可写入层，但是这种写入是有缺点的：\n\n- 当容器停止运行时，写入的数据会丢失。你也很难将这些数据从容器中取出来给另外的应用程序使用。\n\n- 容器的可写入层与宿主机是紧密耦合的。这些写入的数据在可以轻易地被删掉。\n\n- 写入容器的可写入层需要一个存储驱动（storage driver）来管理文件系统。这个存储驱动通过linux内核提供了一个union filesystem。相比于数据卷（data volume），这种额外的抽象会降低性能。\n\n## 选择合适的挂载方式\n\n不管你选择哪种挂载方式，从容器中看都是一样的。数据在容器的文件系统中被展示为一个目录或者一个单独的文件。\n\n一个简单区分 volumes，bind mounts 和 tmpfs mounts 不同点的方法是：思考数据在宿主机上是如何存在的。\n\n![image](https://michaelyou.github.io/img/types-of-mounts.png)\n\nVolumes 由 Docker 管理，存储在宿主机的某个地方（在 linux 上是 `/var/lib/docker/volumes/`）。非 Docker 应用程序不能改动这一位置的数据。Volumes 是 Docker 最好的数据持久化方法。\n\n- Volumes 由 Docker 创建和管理。你可以通过 `docker volume create` 命令显式地创建 volume，Docker 也可以在创建容器或服务是自己创建 volume。\n    \n- 当你创建了一个 volume，它会被存放在宿主机的一个目录下。当你将这个 volume 挂载到某个容器时，这个目录就是挂载到容器的东西。这一点和 bind mounts 类似，除了 volumes 是由 Docker 创建的，和宿主机的核心（core functionality）隔离。\n    \n- 一个 volume 可以同时被挂载到几个容器中。即使没有正在运行的容器使用这个 volume，volume 依然存在，不会被自动清除。可以通过 `docker volume prune` 清除不再使用的 volumes。\n    \n- volumes 也支持 volume driver，可以将数据存放在另外的机器或者云上。\n\nBind mounts 的数据可以存放在宿主机的任何地方。数据甚至可以是重要的系统文件或目录。非 Docker 应用程序可以改变这些数据。\n\n- Docker 早期就支持这个特性。与 volumes 相比，Bind mounts 支持的功能有限。使用 bind mounts 时，宿主机上的一个文件或目录被挂载到容器上。\n    \n- 警告：使用 Bind mounts 的一个副作用是，容器中运行的程序可以修改宿主机的文件系统，包括创建，修改，删除重要的系统文件或目录。这个功能可能会有安全问题。\n\ntmpfs mounts 的数据只存储在宿主机的内存中，不会写入到宿主机的文件系统。\n\n- tmpfs mounts 的数据不会落盘。在容器的生命周期内，它可以被用来存储一些不需要持久化的状态或敏感数据。例如，swarm 服务通过 tmpfs mounts 来将 secrets 挂载到一个服务的容器中去。\n\n### 适合Volumes的场景\n\n- 在不同的容器中共享数据。\n\n- 当 Docker 主机不能保证具有给定的目录或文件结构时，Volumes 可帮助你将 Docker 主机的配置与容器运行时分离。\n\n- 当要将容器的数据存储在远程主机或云提供程序上的时候。\n\n- 当你需要备份或迁移数据的时候。\n\n### 适合bind mounts的场景\n\n- 宿主机和容器共享配置文件。Docker 提供的 DNS 解决方案就是如此，将宿主机的 `/etc/resolv.conf` 挂载到每个容器中。\n\n- 开发环境需要在宿主机和容器中共享代码。docker 的开发就是如此，毕竟容器中一般是没有编辑器的。\n\n- 当 Docker 主机的文件或目录结构保证与容器所需的绑定装载一致时。\n\n### 适合tmpfs mounts的场景\n\n- tmpfs mounts 主要用在你既不想在容器内，又不想在宿主机文件系统保存数据的时候。这可能是出于安全原因，也可能是你的应用需要写非常多的非持久化数据，tmpfs mounts 这时候可以保证容器性能。\n","slug":"docker-data-management","published":1,"updated":"2018-09-15T07:29:11.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpn000mslm42wofuoah","content":"<p>Docker 提供了3种方式将数据从Docker宿主机挂载到容器：</p>\n<ul>\n<li>Volumes</li>\n<li>Bind mounts</li>\n<li>tmpfs mounts</li>\n</ul>\n<p>一般来说，volumes总是最好的选择。</p>\n<a id=\"more\"></a>\n<h2 id=\"容器写入层的缺点\"><a href=\"#容器写入层的缺点\" class=\"headerlink\" title=\"容器写入层的缺点\"></a>容器写入层的缺点</h2><p>我们可以将数据写到容器的可写入层，但是这种写入是有缺点的：</p>\n<ul>\n<li><p>当容器停止运行时，写入的数据会丢失。你也很难将这些数据从容器中取出来给另外的应用程序使用。</p>\n</li>\n<li><p>容器的可写入层与宿主机是紧密耦合的。这些写入的数据在可以轻易地被删掉。</p>\n</li>\n<li><p>写入容器的可写入层需要一个存储驱动（storage driver）来管理文件系统。这个存储驱动通过linux内核提供了一个union filesystem。相比于数据卷（data volume），这种额外的抽象会降低性能。</p>\n</li>\n</ul>\n<h2 id=\"选择合适的挂载方式\"><a href=\"#选择合适的挂载方式\" class=\"headerlink\" title=\"选择合适的挂载方式\"></a>选择合适的挂载方式</h2><p>不管你选择哪种挂载方式，从容器中看都是一样的。数据在容器的文件系统中被展示为一个目录或者一个单独的文件。</p>\n<p>一个简单区分 volumes，bind mounts 和 tmpfs mounts 不同点的方法是：思考数据在宿主机上是如何存在的。</p>\n<p><img src=\"https://michaelyou.github.io/img/types-of-mounts.png\" alt=\"image\"></p>\n<p>Volumes 由 Docker 管理，存储在宿主机的某个地方（在 linux 上是 <code>/var/lib/docker/volumes/</code>）。非 Docker 应用程序不能改动这一位置的数据。Volumes 是 Docker 最好的数据持久化方法。</p>\n<ul>\n<li><p>Volumes 由 Docker 创建和管理。你可以通过 <code>docker volume create</code> 命令显式地创建 volume，Docker 也可以在创建容器或服务是自己创建 volume。</p>\n</li>\n<li><p>当你创建了一个 volume，它会被存放在宿主机的一个目录下。当你将这个 volume 挂载到某个容器时，这个目录就是挂载到容器的东西。这一点和 bind mounts 类似，除了 volumes 是由 Docker 创建的，和宿主机的核心（core functionality）隔离。</p>\n</li>\n<li><p>一个 volume 可以同时被挂载到几个容器中。即使没有正在运行的容器使用这个 volume，volume 依然存在，不会被自动清除。可以通过 <code>docker volume prune</code> 清除不再使用的 volumes。</p>\n</li>\n<li><p>volumes 也支持 volume driver，可以将数据存放在另外的机器或者云上。</p>\n</li>\n</ul>\n<p>Bind mounts 的数据可以存放在宿主机的任何地方。数据甚至可以是重要的系统文件或目录。非 Docker 应用程序可以改变这些数据。</p>\n<ul>\n<li><p>Docker 早期就支持这个特性。与 volumes 相比，Bind mounts 支持的功能有限。使用 bind mounts 时，宿主机上的一个文件或目录被挂载到容器上。</p>\n</li>\n<li><p>警告：使用 Bind mounts 的一个副作用是，容器中运行的程序可以修改宿主机的文件系统，包括创建，修改，删除重要的系统文件或目录。这个功能可能会有安全问题。</p>\n</li>\n</ul>\n<p>tmpfs mounts 的数据只存储在宿主机的内存中，不会写入到宿主机的文件系统。</p>\n<ul>\n<li>tmpfs mounts 的数据不会落盘。在容器的生命周期内，它可以被用来存储一些不需要持久化的状态或敏感数据。例如，swarm 服务通过 tmpfs mounts 来将 secrets 挂载到一个服务的容器中去。</li>\n</ul>\n<h3 id=\"适合Volumes的场景\"><a href=\"#适合Volumes的场景\" class=\"headerlink\" title=\"适合Volumes的场景\"></a>适合Volumes的场景</h3><ul>\n<li><p>在不同的容器中共享数据。</p>\n</li>\n<li><p>当 Docker 主机不能保证具有给定的目录或文件结构时，Volumes 可帮助你将 Docker 主机的配置与容器运行时分离。</p>\n</li>\n<li><p>当要将容器的数据存储在远程主机或云提供程序上的时候。</p>\n</li>\n<li><p>当你需要备份或迁移数据的时候。</p>\n</li>\n</ul>\n<h3 id=\"适合bind-mounts的场景\"><a href=\"#适合bind-mounts的场景\" class=\"headerlink\" title=\"适合bind mounts的场景\"></a>适合bind mounts的场景</h3><ul>\n<li><p>宿主机和容器共享配置文件。Docker 提供的 DNS 解决方案就是如此，将宿主机的 <code>/etc/resolv.conf</code> 挂载到每个容器中。</p>\n</li>\n<li><p>开发环境需要在宿主机和容器中共享代码。docker 的开发就是如此，毕竟容器中一般是没有编辑器的。</p>\n</li>\n<li><p>当 Docker 主机的文件或目录结构保证与容器所需的绑定装载一致时。</p>\n</li>\n</ul>\n<h3 id=\"适合tmpfs-mounts的场景\"><a href=\"#适合tmpfs-mounts的场景\" class=\"headerlink\" title=\"适合tmpfs mounts的场景\"></a>适合tmpfs mounts的场景</h3><ul>\n<li>tmpfs mounts 主要用在你既不想在容器内，又不想在宿主机文件系统保存数据的时候。这可能是出于安全原因，也可能是你的应用需要写非常多的非持久化数据，tmpfs mounts 这时候可以保证容器性能。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Docker 提供了3种方式将数据从Docker宿主机挂载到容器：</p>\n<ul>\n<li>Volumes</li>\n<li>Bind mounts</li>\n<li>tmpfs mounts</li>\n</ul>\n<p>一般来说，volumes总是最好的选择。</p>","more":"<h2 id=\"容器写入层的缺点\"><a href=\"#容器写入层的缺点\" class=\"headerlink\" title=\"容器写入层的缺点\"></a>容器写入层的缺点</h2><p>我们可以将数据写到容器的可写入层，但是这种写入是有缺点的：</p>\n<ul>\n<li><p>当容器停止运行时，写入的数据会丢失。你也很难将这些数据从容器中取出来给另外的应用程序使用。</p>\n</li>\n<li><p>容器的可写入层与宿主机是紧密耦合的。这些写入的数据在可以轻易地被删掉。</p>\n</li>\n<li><p>写入容器的可写入层需要一个存储驱动（storage driver）来管理文件系统。这个存储驱动通过linux内核提供了一个union filesystem。相比于数据卷（data volume），这种额外的抽象会降低性能。</p>\n</li>\n</ul>\n<h2 id=\"选择合适的挂载方式\"><a href=\"#选择合适的挂载方式\" class=\"headerlink\" title=\"选择合适的挂载方式\"></a>选择合适的挂载方式</h2><p>不管你选择哪种挂载方式，从容器中看都是一样的。数据在容器的文件系统中被展示为一个目录或者一个单独的文件。</p>\n<p>一个简单区分 volumes，bind mounts 和 tmpfs mounts 不同点的方法是：思考数据在宿主机上是如何存在的。</p>\n<p><img src=\"https://michaelyou.github.io/img/types-of-mounts.png\" alt=\"image\"></p>\n<p>Volumes 由 Docker 管理，存储在宿主机的某个地方（在 linux 上是 <code>/var/lib/docker/volumes/</code>）。非 Docker 应用程序不能改动这一位置的数据。Volumes 是 Docker 最好的数据持久化方法。</p>\n<ul>\n<li><p>Volumes 由 Docker 创建和管理。你可以通过 <code>docker volume create</code> 命令显式地创建 volume，Docker 也可以在创建容器或服务是自己创建 volume。</p>\n</li>\n<li><p>当你创建了一个 volume，它会被存放在宿主机的一个目录下。当你将这个 volume 挂载到某个容器时，这个目录就是挂载到容器的东西。这一点和 bind mounts 类似，除了 volumes 是由 Docker 创建的，和宿主机的核心（core functionality）隔离。</p>\n</li>\n<li><p>一个 volume 可以同时被挂载到几个容器中。即使没有正在运行的容器使用这个 volume，volume 依然存在，不会被自动清除。可以通过 <code>docker volume prune</code> 清除不再使用的 volumes。</p>\n</li>\n<li><p>volumes 也支持 volume driver，可以将数据存放在另外的机器或者云上。</p>\n</li>\n</ul>\n<p>Bind mounts 的数据可以存放在宿主机的任何地方。数据甚至可以是重要的系统文件或目录。非 Docker 应用程序可以改变这些数据。</p>\n<ul>\n<li><p>Docker 早期就支持这个特性。与 volumes 相比，Bind mounts 支持的功能有限。使用 bind mounts 时，宿主机上的一个文件或目录被挂载到容器上。</p>\n</li>\n<li><p>警告：使用 Bind mounts 的一个副作用是，容器中运行的程序可以修改宿主机的文件系统，包括创建，修改，删除重要的系统文件或目录。这个功能可能会有安全问题。</p>\n</li>\n</ul>\n<p>tmpfs mounts 的数据只存储在宿主机的内存中，不会写入到宿主机的文件系统。</p>\n<ul>\n<li>tmpfs mounts 的数据不会落盘。在容器的生命周期内，它可以被用来存储一些不需要持久化的状态或敏感数据。例如，swarm 服务通过 tmpfs mounts 来将 secrets 挂载到一个服务的容器中去。</li>\n</ul>\n<h3 id=\"适合Volumes的场景\"><a href=\"#适合Volumes的场景\" class=\"headerlink\" title=\"适合Volumes的场景\"></a>适合Volumes的场景</h3><ul>\n<li><p>在不同的容器中共享数据。</p>\n</li>\n<li><p>当 Docker 主机不能保证具有给定的目录或文件结构时，Volumes 可帮助你将 Docker 主机的配置与容器运行时分离。</p>\n</li>\n<li><p>当要将容器的数据存储在远程主机或云提供程序上的时候。</p>\n</li>\n<li><p>当你需要备份或迁移数据的时候。</p>\n</li>\n</ul>\n<h3 id=\"适合bind-mounts的场景\"><a href=\"#适合bind-mounts的场景\" class=\"headerlink\" title=\"适合bind mounts的场景\"></a>适合bind mounts的场景</h3><ul>\n<li><p>宿主机和容器共享配置文件。Docker 提供的 DNS 解决方案就是如此，将宿主机的 <code>/etc/resolv.conf</code> 挂载到每个容器中。</p>\n</li>\n<li><p>开发环境需要在宿主机和容器中共享代码。docker 的开发就是如此，毕竟容器中一般是没有编辑器的。</p>\n</li>\n<li><p>当 Docker 主机的文件或目录结构保证与容器所需的绑定装载一致时。</p>\n</li>\n</ul>\n<h3 id=\"适合tmpfs-mounts的场景\"><a href=\"#适合tmpfs-mounts的场景\" class=\"headerlink\" title=\"适合tmpfs mounts的场景\"></a>适合tmpfs mounts的场景</h3><ul>\n<li>tmpfs mounts 主要用在你既不想在容器内，又不想在宿主机文件系统保存数据的时候。这可能是出于安全原因，也可能是你的应用需要写非常多的非持久化数据，tmpfs mounts 这时候可以保证容器性能。</li>\n</ul>"},{"title":"如何编写一个 json 对象的拷贝函数","date":"2016-07-18T14:35:14.000Z","_content":"\n浅拷贝，比如浅拷贝对象A时，对象B将拷贝A的所有属性，如果属性是引用类型，B将拷贝地址，若果属性是基本类型，B将复制其值。浅拷贝的缺点是如果你修改了对象B中引用类型属性，你同时也会影响到对象A。\n\n<!--more-->\n\n深拷贝会完全拷贝所有数据，优点是拷贝双方不会相互依赖，比如修改了一方的引用类型属性，不会影响到另一方。缺点是拷贝的速度更慢，代价更大 （我的理解是耗费了更多内存空间）。\n\n## 浅拷贝实现\n\n1、使用 ES6 的 Object.assign，其内部实现就是浅拷贝，并剔除了目标对象的原型方法\n\n```js\nlet a = {\n  p: [1, 2]\n};\n\nlet b = Object.assign({}, a);\nconsole.log(b.p == a.p);\n```\n    \n2、遍历对象属性\n\n```js\nfunction shallowClone(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new Error('error arguments');\n  }\n  let targetObj = obj.constructor === Array ? [] : {};\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      targetObj[key] = obj[key];\n    }\n  }\n  return targetObj;\n}\n```\n\n## 深拷贝实现\n\n1、利用 JSON 序列化实现一个深拷贝，缺点是无法复制函数，并且丢失抛弃对象的 constructor 和原型链\n\n```js\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nlet o1 = {\n  arr: [1, 2, 3],\n  obj: { key: 'value' },\n  func(){\n    return 1;\n  }\n};\nlet o2 = deepClone(o1);\nconsole.log(o2); // => {arr: [1,2,3], obj: {key: 'value'}}\n```\n\n2、利用递归实现深拷贝，可以复制函数，同样会丢失抛弃对象的 constructor 和原型链，但是对于拷贝 json 对象的话足够了\n\n```js\nfunction deepCopy(src) {\n  if(!src || typeof src !== 'object'){\n    throw new Error('error arguments');\n  }\n  let target = src.constructor === Array ? [] : {};\n  for (let i in src) {\n    if (typeof src[i] === 'object') {\n      target[i] = src[i].constructor === Array ? [] : {};\n      target[i] = deepCopy(src[i]);\n    } else {\n      target[i] = src[i];\n    }\n  }\n  return target;\n}\n```\n\n参考：[深入剖析 JavaScript 的深复制](http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/)\n","source":"_posts/deep-shallow.md","raw":"---\ntitle: 如何编写一个 json 对象的拷贝函数\ndate: 2016-07-18 22:35:14\ntags: JavaScript\ncategory: 码梦为生\n---\n\n浅拷贝，比如浅拷贝对象A时，对象B将拷贝A的所有属性，如果属性是引用类型，B将拷贝地址，若果属性是基本类型，B将复制其值。浅拷贝的缺点是如果你修改了对象B中引用类型属性，你同时也会影响到对象A。\n\n<!--more-->\n\n深拷贝会完全拷贝所有数据，优点是拷贝双方不会相互依赖，比如修改了一方的引用类型属性，不会影响到另一方。缺点是拷贝的速度更慢，代价更大 （我的理解是耗费了更多内存空间）。\n\n## 浅拷贝实现\n\n1、使用 ES6 的 Object.assign，其内部实现就是浅拷贝，并剔除了目标对象的原型方法\n\n```js\nlet a = {\n  p: [1, 2]\n};\n\nlet b = Object.assign({}, a);\nconsole.log(b.p == a.p);\n```\n    \n2、遍历对象属性\n\n```js\nfunction shallowClone(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new Error('error arguments');\n  }\n  let targetObj = obj.constructor === Array ? [] : {};\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      targetObj[key] = obj[key];\n    }\n  }\n  return targetObj;\n}\n```\n\n## 深拷贝实现\n\n1、利用 JSON 序列化实现一个深拷贝，缺点是无法复制函数，并且丢失抛弃对象的 constructor 和原型链\n\n```js\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nlet o1 = {\n  arr: [1, 2, 3],\n  obj: { key: 'value' },\n  func(){\n    return 1;\n  }\n};\nlet o2 = deepClone(o1);\nconsole.log(o2); // => {arr: [1,2,3], obj: {key: 'value'}}\n```\n\n2、利用递归实现深拷贝，可以复制函数，同样会丢失抛弃对象的 constructor 和原型链，但是对于拷贝 json 对象的话足够了\n\n```js\nfunction deepCopy(src) {\n  if(!src || typeof src !== 'object'){\n    throw new Error('error arguments');\n  }\n  let target = src.constructor === Array ? [] : {};\n  for (let i in src) {\n    if (typeof src[i] === 'object') {\n      target[i] = src[i].constructor === Array ? [] : {};\n      target[i] = deepCopy(src[i]);\n    } else {\n      target[i] = src[i];\n    }\n  }\n  return target;\n}\n```\n\n参考：[深入剖析 JavaScript 的深复制](http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/)\n","slug":"deep-shallow","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpo000pslm4m0nlwhxh","content":"<p>浅拷贝，比如浅拷贝对象A时，对象B将拷贝A的所有属性，如果属性是引用类型，B将拷贝地址，若果属性是基本类型，B将复制其值。浅拷贝的缺点是如果你修改了对象B中引用类型属性，你同时也会影响到对象A。</p>\n<a id=\"more\"></a>\n<p>深拷贝会完全拷贝所有数据，优点是拷贝双方不会相互依赖，比如修改了一方的引用类型属性，不会影响到另一方。缺点是拷贝的速度更慢，代价更大 （我的理解是耗费了更多内存空间）。</p>\n<h2 id=\"浅拷贝实现\"><a href=\"#浅拷贝实现\" class=\"headerlink\" title=\"浅拷贝实现\"></a>浅拷贝实现</h2><p>1、使用 ES6 的 Object.assign，其内部实现就是浅拷贝，并剔除了目标对象的原型方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  p: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.p == a.p);</span><br></pre></td></tr></table></figure>\n<p>2、遍历对象属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetObj = obj.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      targetObj[key] = obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝实现\"><a href=\"#深拷贝实现\" class=\"headerlink\" title=\"深拷贝实现\"></a>深拷贝实现</h2><p>1、利用 JSON 序列化实现一个深拷贝，缺点是无法复制函数，并且丢失抛弃对象的 constructor 和原型链</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">  obj: &#123; <span class=\"attr\">key</span>: <span class=\"string\">'value'</span> &#125;,</span><br><span class=\"line\">  func()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = deepClone(o1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o2); <span class=\"comment\">// =&gt; &#123;arr: [1,2,3], obj: &#123;key: 'value'&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>2、利用递归实现深拷贝，可以复制函数，同样会丢失抛弃对象的 constructor 和原型链，但是对于拷贝 json 对象的话足够了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!src || <span class=\"keyword\">typeof</span> src !== <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = src.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> src) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> src[i] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      target[i] = src[i].constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">      target[i] = deepCopy(src[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      target[i] = src[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></p>\n","site":{"data":{}},"excerpt":"<p>浅拷贝，比如浅拷贝对象A时，对象B将拷贝A的所有属性，如果属性是引用类型，B将拷贝地址，若果属性是基本类型，B将复制其值。浅拷贝的缺点是如果你修改了对象B中引用类型属性，你同时也会影响到对象A。</p>","more":"<p>深拷贝会完全拷贝所有数据，优点是拷贝双方不会相互依赖，比如修改了一方的引用类型属性，不会影响到另一方。缺点是拷贝的速度更慢，代价更大 （我的理解是耗费了更多内存空间）。</p>\n<h2 id=\"浅拷贝实现\"><a href=\"#浅拷贝实现\" class=\"headerlink\" title=\"浅拷贝实现\"></a>浅拷贝实现</h2><p>1、使用 ES6 的 Object.assign，其内部实现就是浅拷贝，并剔除了目标对象的原型方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = &#123;</span><br><span class=\"line\">  p: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b.p == a.p);</span><br></pre></td></tr></table></figure>\n<p>2、遍历对象属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> targetObj = obj.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">      targetObj[key] = obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> targetObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深拷贝实现\"><a href=\"#深拷贝实现\" class=\"headerlink\" title=\"深拷贝实现\"></a>深拷贝实现</h2><p>1、利用 JSON 序列化实现一个深拷贝，缺点是无法复制函数，并且丢失抛弃对象的 constructor 和原型链</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> o1 = &#123;</span><br><span class=\"line\">  arr: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">  obj: &#123; <span class=\"attr\">key</span>: <span class=\"string\">'value'</span> &#125;,</span><br><span class=\"line\">  func()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> o2 = deepClone(o1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(o2); <span class=\"comment\">// =&gt; &#123;arr: [1,2,3], obj: &#123;key: 'value'&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>2、利用递归实现深拷贝，可以复制函数，同样会丢失抛弃对象的 constructor 和原型链，但是对于拷贝 json 对象的话足够了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">src</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!src || <span class=\"keyword\">typeof</span> src !== <span class=\"string\">'object'</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'error arguments'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> target = src.constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> src) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> src[i] === <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">      target[i] = src[i].constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">      target[i] = deepCopy(src[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      target[i] = src[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://jerryzou.com/posts/dive-into-deep-clone-in-javascript/\" target=\"_blank\" rel=\"noopener\">深入剖析 JavaScript 的深复制</a></p>"},{"title":"Hexo 博客搭建","date":"2016-06-19T15:11:39.000Z","_content":"\n作为一名开发人员，一直以来都很想拥有一个个人博客，来和世界分享自己的所见所得。在了解 hexo 后，惊叹于 hexo 搭建个人博客的快速、高效，以及各类丰富的博客主题。千挑万选之下选择了十分简洁大气的 maupassant-hexo 主题，下面是我搭建 maupassant-hexo 主题博客的全过程。\n\n<!--more-->\n\n## 安装 Hexo\n\n安装前提：\n- Node.js\n- Git\n\n使用 npm 进行 hexo 的全局安装：\n\n```bash\nnpm install -g hexo-cli\n```\n\n创建 Hexo 根目录，`<folder>`为目录名：\n\n```bash\nhexo init <folder>\n```\n\n进入 Hexo 根目录，通过`hexo server`命令启动服务器，默认的访问地址是：`http://localhost:4000`，然后就可以看到 hexo 默认主题的页面。\n\n## 安装 maupassant-hexo 主题\n\n在 Hexo 根目录下执行下面的命令，安装主题和渲染器：\n\n```bash\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-jade@0.3.0 --save\nnpm install hexo-renderer-sass --save\n```\n\n编辑 Hexo 根目录下的`_config.yml`，将`theme`的值改为`maupassant`，然后就可以删除`themes`目录下的默认主题`landscape`了。 \n\n> 注：如果 `npm install hexo-renderer-sass` 安装时报错，可能是国内网络问题，请尝试使用代理或者切换至淘宝NPM镜像安装。\n\n然后在 Hexo 根目录下执行`hexo server`命令，就可以访问到`maupassant-hexo`主题的页面了。到此本地的博客就算搭建完成了，进一步的配置参考官方文档：\n- [Hexo 配置](https://hexo.io/zh-cn/docs/configuration.html)\n- [maupassant-hexo 中文文档](https://www.haomwei.com/technology/maupassant-hexo.html)\n\n## 基本操作\n\n### # 添加文章\n\n```bash\nhexo new [layout] <title>\n```\n\n如果没有设置 layout 的话，默认使用`_config.yml`中的`default_layout`参数代替。如果标题包含空格的话，请使用引号括起来。新建的文章存放在 Hexo 根目录的`source/_posts`下，也可以手动在`source/_posts`目录下添加文章。\n\n### # 添加分类 / 标签\n\n在 [Front-matter](https://hexo.io/zh-cn/docs/front-matter.html) 中添加`categories`或`tags`的配置，在右边的侧边栏就会添加对应的分类或标签。\n\n```\n---\ntitle: Hexo 博客搭建 \ndate: 2017-07-19 23:11:39\ntags: 博客搭建\ncategory: 技术\n---\n```\n\n### # 添加 RSS 订阅功能\n\n在 Hexo 根目录下执行下面命令，安装`hexo-generator-feed`:\n\n```bash\nnpm install hexo-generator-feed --save \n```\n\n在 Hexo 根目录下的`_config.yml`中添加 RSS 订阅的配置：\n\n```bash\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n```\n\n### # 删除友情链接\n\n注释主题目录下`_config.yml`中友情链接的配置，如下：\n\n```yml\n# links:\n#   - title: site-name1\n#     url: http://www.example1.com/\n#   - title: site-name2\n#     url: http://www.example2.com/\n#   - title: site-name3\n#     url: http://www.example3.com/\n```\n\n### # 更换中文\n\n编辑 Hexo 根目录下的`_config.yml`，将`language`设置为`zh-CN`。\n\n\n\n\n\n\n","source":"_posts/hexo-blog.md","raw":"---\ntitle: Hexo 博客搭建 \ndate: 2016-06-19 23:11:39\ntags: 博客搭建\ncategory: 码梦为生\n---\n\n作为一名开发人员，一直以来都很想拥有一个个人博客，来和世界分享自己的所见所得。在了解 hexo 后，惊叹于 hexo 搭建个人博客的快速、高效，以及各类丰富的博客主题。千挑万选之下选择了十分简洁大气的 maupassant-hexo 主题，下面是我搭建 maupassant-hexo 主题博客的全过程。\n\n<!--more-->\n\n## 安装 Hexo\n\n安装前提：\n- Node.js\n- Git\n\n使用 npm 进行 hexo 的全局安装：\n\n```bash\nnpm install -g hexo-cli\n```\n\n创建 Hexo 根目录，`<folder>`为目录名：\n\n```bash\nhexo init <folder>\n```\n\n进入 Hexo 根目录，通过`hexo server`命令启动服务器，默认的访问地址是：`http://localhost:4000`，然后就可以看到 hexo 默认主题的页面。\n\n## 安装 maupassant-hexo 主题\n\n在 Hexo 根目录下执行下面的命令，安装主题和渲染器：\n\n```bash\ngit clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant\nnpm install hexo-renderer-jade@0.3.0 --save\nnpm install hexo-renderer-sass --save\n```\n\n编辑 Hexo 根目录下的`_config.yml`，将`theme`的值改为`maupassant`，然后就可以删除`themes`目录下的默认主题`landscape`了。 \n\n> 注：如果 `npm install hexo-renderer-sass` 安装时报错，可能是国内网络问题，请尝试使用代理或者切换至淘宝NPM镜像安装。\n\n然后在 Hexo 根目录下执行`hexo server`命令，就可以访问到`maupassant-hexo`主题的页面了。到此本地的博客就算搭建完成了，进一步的配置参考官方文档：\n- [Hexo 配置](https://hexo.io/zh-cn/docs/configuration.html)\n- [maupassant-hexo 中文文档](https://www.haomwei.com/technology/maupassant-hexo.html)\n\n## 基本操作\n\n### # 添加文章\n\n```bash\nhexo new [layout] <title>\n```\n\n如果没有设置 layout 的话，默认使用`_config.yml`中的`default_layout`参数代替。如果标题包含空格的话，请使用引号括起来。新建的文章存放在 Hexo 根目录的`source/_posts`下，也可以手动在`source/_posts`目录下添加文章。\n\n### # 添加分类 / 标签\n\n在 [Front-matter](https://hexo.io/zh-cn/docs/front-matter.html) 中添加`categories`或`tags`的配置，在右边的侧边栏就会添加对应的分类或标签。\n\n```\n---\ntitle: Hexo 博客搭建 \ndate: 2017-07-19 23:11:39\ntags: 博客搭建\ncategory: 技术\n---\n```\n\n### # 添加 RSS 订阅功能\n\n在 Hexo 根目录下执行下面命令，安装`hexo-generator-feed`:\n\n```bash\nnpm install hexo-generator-feed --save \n```\n\n在 Hexo 根目录下的`_config.yml`中添加 RSS 订阅的配置：\n\n```bash\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n```\n\n### # 删除友情链接\n\n注释主题目录下`_config.yml`中友情链接的配置，如下：\n\n```yml\n# links:\n#   - title: site-name1\n#     url: http://www.example1.com/\n#   - title: site-name2\n#     url: http://www.example2.com/\n#   - title: site-name3\n#     url: http://www.example3.com/\n```\n\n### # 更换中文\n\n编辑 Hexo 根目录下的`_config.yml`，将`language`设置为`zh-CN`。\n\n\n\n\n\n\n","slug":"hexo-blog","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpp000tslm4vbv76bx8","content":"<p>作为一名开发人员，一直以来都很想拥有一个个人博客，来和世界分享自己的所见所得。在了解 hexo 后，惊叹于 hexo 搭建个人博客的快速、高效，以及各类丰富的博客主题。千挑万选之下选择了十分简洁大气的 maupassant-hexo 主题，下面是我搭建 maupassant-hexo 主题博客的全过程。</p>\n<a id=\"more\"></a>\n<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>安装前提：</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<p>使用 npm 进行 hexo 的全局安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>创建 Hexo 根目录，<code>&lt;folder&gt;</code>为目录名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<p>进入 Hexo 根目录，通过<code>hexo server</code>命令启动服务器，默认的访问地址是：<code>http://localhost:4000</code>，然后就可以看到 hexo 默认主题的页面。</p>\n<h2 id=\"安装-maupassant-hexo-主题\"><a href=\"#安装-maupassant-hexo-主题\" class=\"headerlink\" title=\"安装 maupassant-hexo 主题\"></a>安装 maupassant-hexo 主题</h2><p>在 Hexo 根目录下执行下面的命令，安装主题和渲染器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class=\"line\">npm install hexo-renderer-jade@0.3.0 --save</span><br><span class=\"line\">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>\n<p>编辑 Hexo 根目录下的<code>_config.yml</code>，将<code>theme</code>的值改为<code>maupassant</code>，然后就可以删除<code>themes</code>目录下的默认主题<code>landscape</code>了。 </p>\n<blockquote>\n<p>注：如果 <code>npm install hexo-renderer-sass</code> 安装时报错，可能是国内网络问题，请尝试使用代理或者切换至淘宝NPM镜像安装。</p>\n</blockquote>\n<p>然后在 Hexo 根目录下执行<code>hexo server</code>命令，就可以访问到<code>maupassant-hexo</code>主题的页面了。到此本地的博客就算搭建完成了，进一步的配置参考官方文档：</p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo 配置</a></li>\n<li><a href=\"https://www.haomwei.com/technology/maupassant-hexo.html\" target=\"_blank\" rel=\"noopener\">maupassant-hexo 中文文档</a></li>\n</ul>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"# 添加文章\"></a># 添加文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>如果没有设置 layout 的话，默认使用<code>_config.yml</code>中的<code>default_layout</code>参数代替。如果标题包含空格的话，请使用引号括起来。新建的文章存放在 Hexo 根目录的<code>source/_posts</code>下，也可以手动在<code>source/_posts</code>目录下添加文章。</p>\n<h3 id=\"添加分类-标签\"><a href=\"#添加分类-标签\" class=\"headerlink\" title=\"# 添加分类 / 标签\"></a># 添加分类 / 标签</h3><p>在 <a href=\"https://hexo.io/zh-cn/docs/front-matter.html\" target=\"_blank\" rel=\"noopener\">Front-matter</a> 中添加<code>categories</code>或<code>tags</code>的配置，在右边的侧边栏就会添加对应的分类或标签。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 博客搭建 </span><br><span class=\"line\">date: 2017-07-19 23:11:39</span><br><span class=\"line\">tags: 博客搭建</span><br><span class=\"line\">category: 技术</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-RSS-订阅功能\"><a href=\"#添加-RSS-订阅功能\" class=\"headerlink\" title=\"# 添加 RSS 订阅功能\"></a># 添加 RSS 订阅功能</h3><p>在 Hexo 根目录下执行下面命令，安装<code>hexo-generator-feed</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>在 Hexo 根目录下的<code>_config.yml</code>中添加 RSS 订阅的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  <span class=\"built_in\">limit</span>: 20</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除友情链接\"><a href=\"#删除友情链接\" class=\"headerlink\" title=\"# 删除友情链接\"></a># 删除友情链接</h3><p>注释主题目录下<code>_config.yml</code>中友情链接的配置，如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># links:</span></span><br><span class=\"line\"><span class=\"comment\">#   - title: site-name1</span></span><br><span class=\"line\"><span class=\"comment\">#     url: http://www.example1.com/</span></span><br><span class=\"line\"><span class=\"comment\">#   - title: site-name2</span></span><br><span class=\"line\"><span class=\"comment\">#     url: http://www.example2.com/</span></span><br><span class=\"line\"><span class=\"comment\">#   - title: site-name3</span></span><br><span class=\"line\"><span class=\"comment\">#     url: http://www.example3.com/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更换中文\"><a href=\"#更换中文\" class=\"headerlink\" title=\"# 更换中文\"></a># 更换中文</h3><p>编辑 Hexo 根目录下的<code>_config.yml</code>，将<code>language</code>设置为<code>zh-CN</code>。</p>\n","site":{"data":{}},"excerpt":"<p>作为一名开发人员，一直以来都很想拥有一个个人博客，来和世界分享自己的所见所得。在了解 hexo 后，惊叹于 hexo 搭建个人博客的快速、高效，以及各类丰富的博客主题。千挑万选之下选择了十分简洁大气的 maupassant-hexo 主题，下面是我搭建 maupassant-hexo 主题博客的全过程。</p>","more":"<h2 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h2><p>安装前提：</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<p>使用 npm 进行 hexo 的全局安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>创建 Hexo 根目录，<code>&lt;folder&gt;</code>为目录名：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>\n<p>进入 Hexo 根目录，通过<code>hexo server</code>命令启动服务器，默认的访问地址是：<code>http://localhost:4000</code>，然后就可以看到 hexo 默认主题的页面。</p>\n<h2 id=\"安装-maupassant-hexo-主题\"><a href=\"#安装-maupassant-hexo-主题\" class=\"headerlink\" title=\"安装 maupassant-hexo 主题\"></a>安装 maupassant-hexo 主题</h2><p>在 Hexo 根目录下执行下面的命令，安装主题和渲染器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class=\"line\">npm install hexo-renderer-jade@0.3.0 --save</span><br><span class=\"line\">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>\n<p>编辑 Hexo 根目录下的<code>_config.yml</code>，将<code>theme</code>的值改为<code>maupassant</code>，然后就可以删除<code>themes</code>目录下的默认主题<code>landscape</code>了。 </p>\n<blockquote>\n<p>注：如果 <code>npm install hexo-renderer-sass</code> 安装时报错，可能是国内网络问题，请尝试使用代理或者切换至淘宝NPM镜像安装。</p>\n</blockquote>\n<p>然后在 Hexo 根目录下执行<code>hexo server</code>命令，就可以访问到<code>maupassant-hexo</code>主题的页面了。到此本地的博客就算搭建完成了，进一步的配置参考官方文档：</p>\n<ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo 配置</a></li>\n<li><a href=\"https://www.haomwei.com/technology/maupassant-hexo.html\" target=\"_blank\" rel=\"noopener\">maupassant-hexo 中文文档</a></li>\n</ul>\n<h2 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h2><h3 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"# 添加文章\"></a># 添加文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>如果没有设置 layout 的话，默认使用<code>_config.yml</code>中的<code>default_layout</code>参数代替。如果标题包含空格的话，请使用引号括起来。新建的文章存放在 Hexo 根目录的<code>source/_posts</code>下，也可以手动在<code>source/_posts</code>目录下添加文章。</p>\n<h3 id=\"添加分类-标签\"><a href=\"#添加分类-标签\" class=\"headerlink\" title=\"# 添加分类 / 标签\"></a># 添加分类 / 标签</h3><p>在 <a href=\"https://hexo.io/zh-cn/docs/front-matter.html\" target=\"_blank\" rel=\"noopener\">Front-matter</a> 中添加<code>categories</code>或<code>tags</code>的配置，在右边的侧边栏就会添加对应的分类或标签。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo 博客搭建 </span><br><span class=\"line\">date: 2017-07-19 23:11:39</span><br><span class=\"line\">tags: 博客搭建</span><br><span class=\"line\">category: 技术</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-RSS-订阅功能\"><a href=\"#添加-RSS-订阅功能\" class=\"headerlink\" title=\"# 添加 RSS 订阅功能\"></a># 添加 RSS 订阅功能</h3><p>在 Hexo 根目录下执行下面命令，安装<code>hexo-generator-feed</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>在 Hexo 根目录下的<code>_config.yml</code>中添加 RSS 订阅的配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">feed:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  <span class=\"built_in\">limit</span>: 20</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除友情链接\"><a href=\"#删除友情链接\" class=\"headerlink\" title=\"# 删除友情链接\"></a># 删除友情链接</h3><p>注释主题目录下<code>_config.yml</code>中友情链接的配置，如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># links:</span></span><br><span class=\"line\"><span class=\"comment\">#   - title: site-name1</span></span><br><span class=\"line\"><span class=\"comment\">#     url: http://www.example1.com/</span></span><br><span class=\"line\"><span class=\"comment\">#   - title: site-name2</span></span><br><span class=\"line\"><span class=\"comment\">#     url: http://www.example2.com/</span></span><br><span class=\"line\"><span class=\"comment\">#   - title: site-name3</span></span><br><span class=\"line\"><span class=\"comment\">#     url: http://www.example3.com/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"更换中文\"><a href=\"#更换中文\" class=\"headerlink\" title=\"# 更换中文\"></a># 更换中文</h3><p>编辑 Hexo 根目录下的<code>_config.yml</code>，将<code>language</code>设置为<code>zh-CN</code>。</p>"},{"title":"Gitlab 搭建与 CI 配置","date":"2018-11-10T09:21:57.000Z","_content":"\n\b最近有一个独立开发的 Golang 微服务需要上线，项目托管在内部的 GitLab 上，所以需要写一个 .gitlab-ci.yml 文件来走 CI。\b由于之前一直是在比较成熟的团队中，没有自己写过 GitLab 的 CI 配置，所以索性尝试下自己搭建 GitLab，然后配置一套 CI 来熟悉下。\n\n<!--more-->\n\n## 搭建 GitLab\n\n\b搭建 GitLab 最简单的方式当然是使用 docker。GitLab 的 docker 镜像集成了 GitLab 在运行中需要的所有服务。\n\n这里使用 docker-compose 来运行，方便修改参数：\n\n```sh\n web:\n   image: 'gitlab/gitlab-ce:latest'\n   restart: always\n   hostname: 'gitlab.example.com'\n   environment:\n     GITLAB_OMNIBUS_CONFIG: |\n       external_url 'https://gitlab.example.com'\n       # Add any other gitlab.rb configuration here, each on its own line\n   ports:\n     - '80:80'\n     - '443:443'\n     - '22:22'\n   volumes:\n     - '/srv/gitlab/config:/etc/gitlab'\n     - '/srv/gitlab/logs:/var/log/gitlab'\n     - '/srv/gitlab/data:/var/opt/gitlab'\n```\n\n这里需要注意 SSH、HTTP、HTTPS 的端口是否被占用，以及卷的\b位置 docker 是否有权限访问。例如，在 macOS 上，docker 没有 /srv 的权限，所以可以使用 /Users/Shared 目录替代 /srv。\n\n在容器启动后，等 GitLab 初始化完成（需等待一会），就可以通过  http://localhost/ 访问了。\n\n另外还有一些部署 GitLab 的方法，具体参考官方文档：[Omnibus GitLab documentation](https://docs.gitlab.com/omnibus/README.html)。\n\n## 配置 GitLab\n\nGitLab 的所有配置都在 /etc/gitlab/gitlab.rb 文件中，你可以在 docker 挂载的数据卷目录下去修改配置，也可以进入 docker 容器去修改：\n\n```sh\ndocker exec -it gitlab /bin/bash\n```\n\n在 GitLab 的配置中，你需要修改 external_url 配置项为一个有效的 url，这个 url 就是你的 GitLab 仓库的域名，也可以通过上面 docker-compose 文件中的 environment 来修改 external_url 配置项。没有域名的话可以先用 IP 地址。\n\n还有很多其他的配置，如邮箱、HTTPS 等的配置就不多介绍了。详细配置参考官方文档：[Configuration options](https://docs.gitlab.com/omnibus/settings/configuration.html)。\n\n在修改完配置后，需要重启 docker 容器：\n\n```sh\ndocker restart gitlab\n```\n\n## 搭建 GitLab Runner\n\nGitLab 的 CI 需要安装 Gitlab Runner，Runner 负责运行 .gitlab-ci.yml 中定义的 job，并且将结果发送回 GitLab。\n\nRunner 不建议和 GitLab 同时运行在一台机器上，因为 Runner 很消耗资源，一旦 CI 运行起来，就可以看到 Runner 的 CPU 使用率飙升，所以应该分开部署。如果只是想测试一下，也可以先在一台机器上试一下。\n\n同样使用 docker 来运行 Runner：\n\n```sh\ndocker run -d --name gitlab-runner --restart always \\\n\t-v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n\t-v /var/run/docker.sock:/var/run/docker.sock \\\n\tgitlab/gitlab-runner:latest\n```\n\n然后需要把 Runner 注册到刚刚搭建好的 GitLab 上：\n\n```sh\ndocker run --rm -t -i -v /srv/gitlab-runner/config:/etc/gitlab-runner --name gitlab-runner gitlab/gitlab-runner register \\\n  --non-interactive \\\n  --executor \"docker\" \\\n  --docker-image alpine:3.7 \\\n  --url \"https://gitlab.com/\" \\\n  --registration-token \"PROJECT_REGISTRATION_TOKEN\" \\\n  --description \"docker-runner\" \\\n  --tag-list \"docker,aws\" \\\n  --run-untagged \\\n  --locked=\"false\"\n```\n\n注册参数说明：\n\n- \b--url：\n\n\tGitLab 的域名，如果还没有配置域名的话，可以先使用 IP 地址代替。\n\n- --registration-token：\n\n\tCI 的 token，需要从 GitLab 页面上获取，参考：[Obtain a token](https://docs.gitlab.com/ee/ci/runners/)。\n\n- --description\n\n\tRunner 的描述，稍后可以在 GitLab 的页面 Settings > CI/CD > Runners 那里看到该 Runner 的描述。\n\n- --tag-list\n\n\tRunner 的 tags，使用 tag 标记 Runner 后，在 .gitlab-ci.yml 中定义 job 时，就可以使用 tags 配置来指定运行这个 job 的 Runner。\n\n- --executor\n\n\tRunner 的执行器，推荐使用 docker，它拥有一个干净的构建环境，易于依赖管理。\n\n- --docker-image\n\n\t如果你使用 docker 作为 executor，需要提供一个默认镜像，\b在 .gitlab-ci.yml 中没有定义镜像时使用。\n\n## .gitlab-ci.yml\n\n在搭建好 GitLab 和 Runner 后，就可以在 GitLab 上新建一个项目，然后\b写 \bCI 的配置文件 .gitlab-ci.yml 了，参考\b：[Configuring .gitlab-ci.yml](https://docs.gitlab.com/ee/ci/yaml/README.html)","source":"_posts/gitlab-build.md","raw":"---\ntitle: Gitlab 搭建与 CI 配置\ndate: 2018-11-10 17:21:57\ncategory: 码梦为生\ntags:\n    - Gitlab\n    - Golang\n---\n\n\b最近有一个独立开发的 Golang 微服务需要上线，项目托管在内部的 GitLab 上，所以需要写一个 .gitlab-ci.yml 文件来走 CI。\b由于之前一直是在比较成熟的团队中，没有自己写过 GitLab 的 CI 配置，所以索性尝试下自己搭建 GitLab，然后配置一套 CI 来熟悉下。\n\n<!--more-->\n\n## 搭建 GitLab\n\n\b搭建 GitLab 最简单的方式当然是使用 docker。GitLab 的 docker 镜像集成了 GitLab 在运行中需要的所有服务。\n\n这里使用 docker-compose 来运行，方便修改参数：\n\n```sh\n web:\n   image: 'gitlab/gitlab-ce:latest'\n   restart: always\n   hostname: 'gitlab.example.com'\n   environment:\n     GITLAB_OMNIBUS_CONFIG: |\n       external_url 'https://gitlab.example.com'\n       # Add any other gitlab.rb configuration here, each on its own line\n   ports:\n     - '80:80'\n     - '443:443'\n     - '22:22'\n   volumes:\n     - '/srv/gitlab/config:/etc/gitlab'\n     - '/srv/gitlab/logs:/var/log/gitlab'\n     - '/srv/gitlab/data:/var/opt/gitlab'\n```\n\n这里需要注意 SSH、HTTP、HTTPS 的端口是否被占用，以及卷的\b位置 docker 是否有权限访问。例如，在 macOS 上，docker 没有 /srv 的权限，所以可以使用 /Users/Shared 目录替代 /srv。\n\n在容器启动后，等 GitLab 初始化完成（需等待一会），就可以通过  http://localhost/ 访问了。\n\n另外还有一些部署 GitLab 的方法，具体参考官方文档：[Omnibus GitLab documentation](https://docs.gitlab.com/omnibus/README.html)。\n\n## 配置 GitLab\n\nGitLab 的所有配置都在 /etc/gitlab/gitlab.rb 文件中，你可以在 docker 挂载的数据卷目录下去修改配置，也可以进入 docker 容器去修改：\n\n```sh\ndocker exec -it gitlab /bin/bash\n```\n\n在 GitLab 的配置中，你需要修改 external_url 配置项为一个有效的 url，这个 url 就是你的 GitLab 仓库的域名，也可以通过上面 docker-compose 文件中的 environment 来修改 external_url 配置项。没有域名的话可以先用 IP 地址。\n\n还有很多其他的配置，如邮箱、HTTPS 等的配置就不多介绍了。详细配置参考官方文档：[Configuration options](https://docs.gitlab.com/omnibus/settings/configuration.html)。\n\n在修改完配置后，需要重启 docker 容器：\n\n```sh\ndocker restart gitlab\n```\n\n## 搭建 GitLab Runner\n\nGitLab 的 CI 需要安装 Gitlab Runner，Runner 负责运行 .gitlab-ci.yml 中定义的 job，并且将结果发送回 GitLab。\n\nRunner 不建议和 GitLab 同时运行在一台机器上，因为 Runner 很消耗资源，一旦 CI 运行起来，就可以看到 Runner 的 CPU 使用率飙升，所以应该分开部署。如果只是想测试一下，也可以先在一台机器上试一下。\n\n同样使用 docker 来运行 Runner：\n\n```sh\ndocker run -d --name gitlab-runner --restart always \\\n\t-v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n\t-v /var/run/docker.sock:/var/run/docker.sock \\\n\tgitlab/gitlab-runner:latest\n```\n\n然后需要把 Runner 注册到刚刚搭建好的 GitLab 上：\n\n```sh\ndocker run --rm -t -i -v /srv/gitlab-runner/config:/etc/gitlab-runner --name gitlab-runner gitlab/gitlab-runner register \\\n  --non-interactive \\\n  --executor \"docker\" \\\n  --docker-image alpine:3.7 \\\n  --url \"https://gitlab.com/\" \\\n  --registration-token \"PROJECT_REGISTRATION_TOKEN\" \\\n  --description \"docker-runner\" \\\n  --tag-list \"docker,aws\" \\\n  --run-untagged \\\n  --locked=\"false\"\n```\n\n注册参数说明：\n\n- \b--url：\n\n\tGitLab 的域名，如果还没有配置域名的话，可以先使用 IP 地址代替。\n\n- --registration-token：\n\n\tCI 的 token，需要从 GitLab 页面上获取，参考：[Obtain a token](https://docs.gitlab.com/ee/ci/runners/)。\n\n- --description\n\n\tRunner 的描述，稍后可以在 GitLab 的页面 Settings > CI/CD > Runners 那里看到该 Runner 的描述。\n\n- --tag-list\n\n\tRunner 的 tags，使用 tag 标记 Runner 后，在 .gitlab-ci.yml 中定义 job 时，就可以使用 tags 配置来指定运行这个 job 的 Runner。\n\n- --executor\n\n\tRunner 的执行器，推荐使用 docker，它拥有一个干净的构建环境，易于依赖管理。\n\n- --docker-image\n\n\t如果你使用 docker 作为 executor，需要提供一个默认镜像，\b在 .gitlab-ci.yml 中没有定义镜像时使用。\n\n## .gitlab-ci.yml\n\n在搭建好 GitLab 和 Runner 后，就可以在 GitLab 上新建一个项目，然后\b写 \bCI 的配置文件 .gitlab-ci.yml 了，参考\b：[Configuring .gitlab-ci.yml](https://docs.gitlab.com/ee/ci/yaml/README.html)","slug":"gitlab-build","published":1,"updated":"2018-12-06T13:46:09.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpq000wslm4fyr793xu","content":"<p>\b最近有一个独立开发的 Golang 微服务需要上线，项目托管在内部的 GitLab 上，所以需要写一个 .gitlab-ci.yml 文件来走 CI。\b由于之前一直是在比较成熟的团队中，没有自己写过 GitLab 的 CI 配置，所以索性尝试下自己搭建 GitLab，然后配置一套 CI 来熟悉下。</p>\n<a id=\"more\"></a>\n<h2 id=\"搭建-GitLab\"><a href=\"#搭建-GitLab\" class=\"headerlink\" title=\"搭建 GitLab\"></a>搭建 GitLab</h2><p>\b搭建 GitLab 最简单的方式当然是使用 docker。GitLab 的 docker 镜像集成了 GitLab 在运行中需要的所有服务。</p>\n<p>这里使用 docker-compose 来运行，方便修改参数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">web:</span><br><span class=\"line\">  image: <span class=\"string\">'gitlab/gitlab-ce:latest'</span></span><br><span class=\"line\">  restart: always</span><br><span class=\"line\">  hostname: <span class=\"string\">'gitlab.example.com'</span></span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class=\"line\">      external_url <span class=\"string\">'https://gitlab.example.com'</span></span><br><span class=\"line\">      <span class=\"comment\"># Add any other gitlab.rb configuration here, each on its own line</span></span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - <span class=\"string\">'80:80'</span></span><br><span class=\"line\">    - <span class=\"string\">'443:443'</span></span><br><span class=\"line\">    - <span class=\"string\">'22:22'</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - <span class=\"string\">'/srv/gitlab/config:/etc/gitlab'</span></span><br><span class=\"line\">    - <span class=\"string\">'/srv/gitlab/logs:/var/log/gitlab'</span></span><br><span class=\"line\">    - <span class=\"string\">'/srv/gitlab/data:/var/opt/gitlab'</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意 SSH、HTTP、HTTPS 的端口是否被占用，以及卷的\b位置 docker 是否有权限访问。例如，在 macOS 上，docker 没有 /srv 的权限，所以可以使用 /Users/Shared 目录替代 /srv。</p>\n<p>在容器启动后，等 GitLab 初始化完成（需等待一会），就可以通过  <a href=\"http://localhost/\" target=\"_blank\" rel=\"noopener\">http://localhost/</a> 访问了。</p>\n<p>另外还有一些部署 GitLab 的方法，具体参考官方文档：<a href=\"https://docs.gitlab.com/omnibus/README.html\" target=\"_blank\" rel=\"noopener\">Omnibus GitLab documentation</a>。</p>\n<h2 id=\"配置-GitLab\"><a href=\"#配置-GitLab\" class=\"headerlink\" title=\"配置 GitLab\"></a>配置 GitLab</h2><p>GitLab 的所有配置都在 /etc/gitlab/gitlab.rb 文件中，你可以在 docker 挂载的数据卷目录下去修改配置，也可以进入 docker 容器去修改：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></table></figure>\n<p>在 GitLab 的配置中，你需要修改 external_url 配置项为一个有效的 url，这个 url 就是你的 GitLab 仓库的域名，也可以通过上面 docker-compose 文件中的 environment 来修改 external_url 配置项。没有域名的话可以先用 IP 地址。</p>\n<p>还有很多其他的配置，如邮箱、HTTPS 等的配置就不多介绍了。详细配置参考官方文档：<a href=\"https://docs.gitlab.com/omnibus/settings/configuration.html\" target=\"_blank\" rel=\"noopener\">Configuration options</a>。</p>\n<p>在修改完配置后，需要重启 docker 容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker restart gitlab</span><br></pre></td></tr></table></figure>\n<h2 id=\"搭建-GitLab-Runner\"><a href=\"#搭建-GitLab-Runner\" class=\"headerlink\" title=\"搭建 GitLab Runner\"></a>搭建 GitLab Runner</h2><p>GitLab 的 CI 需要安装 Gitlab Runner，Runner 负责运行 .gitlab-ci.yml 中定义的 job，并且将结果发送回 GitLab。</p>\n<p>Runner 不建议和 GitLab 同时运行在一台机器上，因为 Runner 很消耗资源，一旦 CI 运行起来，就可以看到 Runner 的 CPU 使用率飙升，所以应该分开部署。如果只是想测试一下，也可以先在一台机器上试一下。</p>\n<p>同样使用 docker 来运行 Runner：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name gitlab-runner --restart always \\</span><br><span class=\"line\">\t-v /srv/gitlab-runner/config:/etc/gitlab-runner \\</span><br><span class=\"line\">\t-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">\tgitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure>\n<p>然后需要把 Runner 注册到刚刚搭建好的 GitLab 上：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm -t -i -v /srv/gitlab-runner/config:/etc/gitlab-runner --name gitlab-runner gitlab/gitlab-runner register \\</span><br><span class=\"line\">  --non-interactive \\</span><br><span class=\"line\">  --executor <span class=\"string\">\"docker\"</span> \\</span><br><span class=\"line\">  --docker-image alpine:3.7 \\</span><br><span class=\"line\">  --url <span class=\"string\">\"https://gitlab.com/\"</span> \\</span><br><span class=\"line\">  --registration-token <span class=\"string\">\"PROJECT_REGISTRATION_TOKEN\"</span> \\</span><br><span class=\"line\">  --description <span class=\"string\">\"docker-runner\"</span> \\</span><br><span class=\"line\">  --tag-list <span class=\"string\">\"docker,aws\"</span> \\</span><br><span class=\"line\">  --run-untagged \\</span><br><span class=\"line\">  --locked=<span class=\"string\">\"false\"</span></span><br></pre></td></tr></table></figure>\n<p>注册参数说明：</p>\n<ul>\n<li><p>\b–url：</p>\n<p>  GitLab 的域名，如果还没有配置域名的话，可以先使用 IP 地址代替。</p>\n</li>\n<li><p>–registration-token：</p>\n<p>  CI 的 token，需要从 GitLab 页面上获取，参考：<a href=\"https://docs.gitlab.com/ee/ci/runners/\" target=\"_blank\" rel=\"noopener\">Obtain a token</a>。</p>\n</li>\n<li><p>–description</p>\n<p>  Runner 的描述，稍后可以在 GitLab 的页面 Settings &gt; CI/CD &gt; Runners 那里看到该 Runner 的描述。</p>\n</li>\n<li><p>–tag-list</p>\n<p>  Runner 的 tags，使用 tag 标记 Runner 后，在 .gitlab-ci.yml 中定义 job 时，就可以使用 tags 配置来指定运行这个 job 的 Runner。</p>\n</li>\n<li><p>–executor</p>\n<p>  Runner 的执行器，推荐使用 docker，它拥有一个干净的构建环境，易于依赖管理。</p>\n</li>\n<li><p>–docker-image</p>\n<p>  如果你使用 docker 作为 executor，需要提供一个默认镜像，\b在 .gitlab-ci.yml 中没有定义镜像时使用。</p>\n</li>\n</ul>\n<h2 id=\"gitlab-ci-yml\"><a href=\"#gitlab-ci-yml\" class=\"headerlink\" title=\".gitlab-ci.yml\"></a>.gitlab-ci.yml</h2><p>在搭建好 GitLab 和 Runner 后，就可以在 GitLab 上新建一个项目，然后\b写 \bCI 的配置文件 .gitlab-ci.yml 了，参考\b：<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\" target=\"_blank\" rel=\"noopener\">Configuring .gitlab-ci.yml</a></p>\n","site":{"data":{}},"excerpt":"<p>\b最近有一个独立开发的 Golang 微服务需要上线，项目托管在内部的 GitLab 上，所以需要写一个 .gitlab-ci.yml 文件来走 CI。\b由于之前一直是在比较成熟的团队中，没有自己写过 GitLab 的 CI 配置，所以索性尝试下自己搭建 GitLab，然后配置一套 CI 来熟悉下。</p>","more":"<h2 id=\"搭建-GitLab\"><a href=\"#搭建-GitLab\" class=\"headerlink\" title=\"搭建 GitLab\"></a>搭建 GitLab</h2><p>\b搭建 GitLab 最简单的方式当然是使用 docker。GitLab 的 docker 镜像集成了 GitLab 在运行中需要的所有服务。</p>\n<p>这里使用 docker-compose 来运行，方便修改参数：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">web:</span><br><span class=\"line\">  image: <span class=\"string\">'gitlab/gitlab-ce:latest'</span></span><br><span class=\"line\">  restart: always</span><br><span class=\"line\">  hostname: <span class=\"string\">'gitlab.example.com'</span></span><br><span class=\"line\">  environment:</span><br><span class=\"line\">    GITLAB_OMNIBUS_CONFIG: |</span><br><span class=\"line\">      external_url <span class=\"string\">'https://gitlab.example.com'</span></span><br><span class=\"line\">      <span class=\"comment\"># Add any other gitlab.rb configuration here, each on its own line</span></span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - <span class=\"string\">'80:80'</span></span><br><span class=\"line\">    - <span class=\"string\">'443:443'</span></span><br><span class=\"line\">    - <span class=\"string\">'22:22'</span></span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - <span class=\"string\">'/srv/gitlab/config:/etc/gitlab'</span></span><br><span class=\"line\">    - <span class=\"string\">'/srv/gitlab/logs:/var/log/gitlab'</span></span><br><span class=\"line\">    - <span class=\"string\">'/srv/gitlab/data:/var/opt/gitlab'</span></span><br></pre></td></tr></table></figure>\n<p>这里需要注意 SSH、HTTP、HTTPS 的端口是否被占用，以及卷的\b位置 docker 是否有权限访问。例如，在 macOS 上，docker 没有 /srv 的权限，所以可以使用 /Users/Shared 目录替代 /srv。</p>\n<p>在容器启动后，等 GitLab 初始化完成（需等待一会），就可以通过  <a href=\"http://localhost/\" target=\"_blank\" rel=\"noopener\">http://localhost/</a> 访问了。</p>\n<p>另外还有一些部署 GitLab 的方法，具体参考官方文档：<a href=\"https://docs.gitlab.com/omnibus/README.html\" target=\"_blank\" rel=\"noopener\">Omnibus GitLab documentation</a>。</p>\n<h2 id=\"配置-GitLab\"><a href=\"#配置-GitLab\" class=\"headerlink\" title=\"配置 GitLab\"></a>配置 GitLab</h2><p>GitLab 的所有配置都在 /etc/gitlab/gitlab.rb 文件中，你可以在 docker 挂载的数据卷目录下去修改配置，也可以进入 docker 容器去修改：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">exec</span> -it gitlab /bin/bash</span><br></pre></td></tr></table></figure>\n<p>在 GitLab 的配置中，你需要修改 external_url 配置项为一个有效的 url，这个 url 就是你的 GitLab 仓库的域名，也可以通过上面 docker-compose 文件中的 environment 来修改 external_url 配置项。没有域名的话可以先用 IP 地址。</p>\n<p>还有很多其他的配置，如邮箱、HTTPS 等的配置就不多介绍了。详细配置参考官方文档：<a href=\"https://docs.gitlab.com/omnibus/settings/configuration.html\" target=\"_blank\" rel=\"noopener\">Configuration options</a>。</p>\n<p>在修改完配置后，需要重启 docker 容器：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker restart gitlab</span><br></pre></td></tr></table></figure>\n<h2 id=\"搭建-GitLab-Runner\"><a href=\"#搭建-GitLab-Runner\" class=\"headerlink\" title=\"搭建 GitLab Runner\"></a>搭建 GitLab Runner</h2><p>GitLab 的 CI 需要安装 Gitlab Runner，Runner 负责运行 .gitlab-ci.yml 中定义的 job，并且将结果发送回 GitLab。</p>\n<p>Runner 不建议和 GitLab 同时运行在一台机器上，因为 Runner 很消耗资源，一旦 CI 运行起来，就可以看到 Runner 的 CPU 使用率飙升，所以应该分开部署。如果只是想测试一下，也可以先在一台机器上试一下。</p>\n<p>同样使用 docker 来运行 Runner：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name gitlab-runner --restart always \\</span><br><span class=\"line\">\t-v /srv/gitlab-runner/config:/etc/gitlab-runner \\</span><br><span class=\"line\">\t-v /var/run/docker.sock:/var/run/docker.sock \\</span><br><span class=\"line\">\tgitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure>\n<p>然后需要把 Runner 注册到刚刚搭建好的 GitLab 上：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run --rm -t -i -v /srv/gitlab-runner/config:/etc/gitlab-runner --name gitlab-runner gitlab/gitlab-runner register \\</span><br><span class=\"line\">  --non-interactive \\</span><br><span class=\"line\">  --executor <span class=\"string\">\"docker\"</span> \\</span><br><span class=\"line\">  --docker-image alpine:3.7 \\</span><br><span class=\"line\">  --url <span class=\"string\">\"https://gitlab.com/\"</span> \\</span><br><span class=\"line\">  --registration-token <span class=\"string\">\"PROJECT_REGISTRATION_TOKEN\"</span> \\</span><br><span class=\"line\">  --description <span class=\"string\">\"docker-runner\"</span> \\</span><br><span class=\"line\">  --tag-list <span class=\"string\">\"docker,aws\"</span> \\</span><br><span class=\"line\">  --run-untagged \\</span><br><span class=\"line\">  --locked=<span class=\"string\">\"false\"</span></span><br></pre></td></tr></table></figure>\n<p>注册参数说明：</p>\n<ul>\n<li><p>\b–url：</p>\n<p>  GitLab 的域名，如果还没有配置域名的话，可以先使用 IP 地址代替。</p>\n</li>\n<li><p>–registration-token：</p>\n<p>  CI 的 token，需要从 GitLab 页面上获取，参考：<a href=\"https://docs.gitlab.com/ee/ci/runners/\" target=\"_blank\" rel=\"noopener\">Obtain a token</a>。</p>\n</li>\n<li><p>–description</p>\n<p>  Runner 的描述，稍后可以在 GitLab 的页面 Settings &gt; CI/CD &gt; Runners 那里看到该 Runner 的描述。</p>\n</li>\n<li><p>–tag-list</p>\n<p>  Runner 的 tags，使用 tag 标记 Runner 后，在 .gitlab-ci.yml 中定义 job 时，就可以使用 tags 配置来指定运行这个 job 的 Runner。</p>\n</li>\n<li><p>–executor</p>\n<p>  Runner 的执行器，推荐使用 docker，它拥有一个干净的构建环境，易于依赖管理。</p>\n</li>\n<li><p>–docker-image</p>\n<p>  如果你使用 docker 作为 executor，需要提供一个默认镜像，\b在 .gitlab-ci.yml 中没有定义镜像时使用。</p>\n</li>\n</ul>\n<h2 id=\"gitlab-ci-yml\"><a href=\"#gitlab-ci-yml\" class=\"headerlink\" title=\".gitlab-ci.yml\"></a>.gitlab-ci.yml</h2><p>在搭建好 GitLab 和 Runner 后，就可以在 GitLab 上新建一个项目，然后\b写 \bCI 的配置文件 .gitlab-ci.yml 了，参考\b：<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html\" target=\"_blank\" rel=\"noopener\">Configuring .gitlab-ci.yml</a></p>"},{"title":"Markdown 中文技术文档的写作规范","date":"2017-01-20T11:33:25.000Z","_content":"\n{% note class_name %} 本文转载自: https://github.com/ruanyf/document-style-guide {% endnote %}\n\n中文技术文档的写作规范。\n\n<!--more-->\n\n## 标题\n\n### 层级\n\n标题分为四级。\n\n- 一级标题：文章的标题\n- 二级标题：文章主要部分的大标题\n- 三级标题：二级标题下面一级的小标题\n- 四级标题：三级标题下面某一方面的小标题\n\n### 原则\n\n- 一级标题下，不能直接出现三级标题。\n- 标题要避免孤立编号（即同级标题只有一个）。\n- 下级标题不重复上一级标题的内容。\n- 谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。\n\n## 文本\n\n### 字间距\n\n全角中文字符与半角英文字符之间，应有一个半角空格。\n\n```\n错误：本文介绍如何快速启动Windows系统。\n\n正确：本文介绍如何快速启动 Windows 系统。\n```\n\n全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。\n\n```\n正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。\n\n正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。\n```\n\n半角的百分号，视同阿拉伯数字。\n\n英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。\n\n```\n错误：一部容量为 16 GB 的智能手机\n\n正确：一部容量为 16GB 的智能手机\n```\n\n半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。\n\n```\n错误：他的电脑是 MacBook Air 。\n\n正确：他的电脑是 MacBook Air。\n```\n\n### 句子\n\n- 避免使用长句。一个句子建议不超过 100 字或者正文的 3 行。\n- 尽量使用简单句和并列句，避免使用复合句。\n\n### 写作风格\n\n尽量不使用被动语态，改为使用主动语态。\n\n```\n错误：假如此软件尚未被安装，\n\n正确：假如尚未安装这个软件，\n```\n\n不使用非正式的语言风格。\n\n```\n错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！\n\n正确：无法参加本次活动，我深感遗憾。\n```\n\n用对“的”、“地”、“得”。\n\n```\n她露出了开心的笑容。\n（形容词＋的＋名词）\n\n她开心地笑了。\n（副词＋地＋动词）\n\n她笑得很开心。\n（动词＋得＋副词）\n```\n\n使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。\n\n```\n错误：从管理系统可以监视中继系统和受其直接控制的分配系统。\n\n正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。\n```\n\n名词前不要使用过多的形容词。\n\n```\n错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。\n\n正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。\n```\n\n单个句子的长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。\n\n```\n错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。\n\n正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。\n```\n\n同样一个意思，尽量使用肯定句表达，不使用否定句表达。\n\n```\n错误：请确认没有接通装置的电源。\n\n正确：请确认装置的电源已关闭。\n```\n\n避免使用双重否定句。\n\n```\n错误：没有删除权限的用户，不能删除此文件。\n\n正确：用户必须拥有删除权限，才能删除此文件。\n```\n\n### 英文处理\n\n英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。\n\n```\n英文：...information stored in random access memory (RAMs)...\n\n中文：……存储在随机存取存储器（RAM）里的信息……\n```\n\n外文缩写可以使用半角圆点(`.`)表示缩写。\n\n```\nU.S.A.\nApple, Inc.\n```\n\n表示中文时，英文省略号（`...`）应改为中文省略号（`……`）。\n\n```\n英文：5 minutes later...\n\n中文：5 分钟过去了……\n```\n\n英文书名或电影名改用中文表达时，双引号应改为书名号。\n\n```\n英文：He published an article entitled \"The Future of the Aviation\".\n\n中文：他发表了一篇名为《航空业的未来》的文章。\n```\n\n第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。\n\n```\nIOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。\n```\n\n专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。\n\n```\n“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。\n\n“online transaction processing”（在线事务处理）不是专有名词，不应大写。\n```\n\n## 段落\n\n### 原则\n\n- 一个段落只能有一个主题，或一个中心句子。\n- 段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。\n- 一个段落的长度不能超过七行，最佳段落长度小于等于四行。\n- 段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。\n- 段落之间使用一个空行隔开。\n- 段落开头不要留出空白字符。\n\n### 引用\n\n引用第三方内容时，应注明出处。\n\n```\nOne man’s constant is another man’s variable. — Alan Perlis\n```\n\n如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。\n\n```\n本文转载自 WikiQuote\n```\n\n使用外部图片时，必须在图片下方或文末标明来源。\n\n```\n本文部分图片来自 Wikipedia\n```\n\n## 数值\n\n### 半角数字\n\n数字一律使用半角形式，不得使用全角形式。\n\n```\n错误： 这件商品的价格是１０００元。\n\n正确： 这件商品的价格是 1000 元。\n```\n\n### 千分号\n\n数值为千位以上，应添加千分号（半角逗号）。\n\n```\nXXX 公司的实收资本为 RMB1,258,000。\n```\n\n对于 4 ～ 6 位的数值，千分号是选用的，比如1000和1,000都可以接受。对于7位及以上的数值，千分号是必须的。\n\n多位小数要从小数点后从左向右添加千分号，比如4.234,345。\n\n### 货币\n\n货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。\n\n```\n$1,000\n1,000 美元\n```\n\n### 数值范围\n\n表示数值范围时，用`～`连接。参见《标点符号》一节的“连接号”部分。\n\n带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。\n\n```\n错误：132～234kg\n正确：132kg～234kg\n\n错误：67～89%\n正确：67%～89%\n```\n\n### 变化程度的表示法\n\n数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。\n\n```\n增加到过去的两倍\n（过去为一，现在为二）\n\n增加了两倍\n（过去为一，现在为三）\n```\n\n数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。\n\n```\n降低到百分之八十\n（定额是一百，现在是八十）\n\n降低了百分之八十\n（原来是一百，现在是二十）\n```\n\n不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。\n\n## 标点符号\n\n### 原则\n\n- 中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。\n- 如果整句为英文，则该句使用英文/半角标点。\n- 句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。\n\n### 句号\n\n中文语句中的结尾处应该用全角句号（`。`）。\n\n句子末尾用括号加注时，句号应在括号之外。\n\n```\n错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）\n\n正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。\n```\n\n### 逗号\n\n逗号`，`表示句子内部的一般性停顿。\n\n注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。\n\n### 顿号\n\n句子内部的并列词，应该用全角顿号(`、`) 分隔，而不用逗号，即使并列词是英语也是如此。\n\n```\n错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。\n\n正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。\n```\n\n英文句子中，并列词语之间使用半角逗号（`,`）分隔。\n\n```\n例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.\n```\n\n### 分号\n\n分号`；`表示复句内部并列分句之间的停顿。\n\n### 引号\n\n引用时，应该使用全角双引号（`“ ”`），注意前后双引号不同。\n\n```\n例句：许多人都认为客户服务的核心是“友好”和“专业”。\n```\n\n引号里面还要用引号时，外面一层用双引号，里面一层用单引号（`‘ ’`），注意前后单引号不同。\n\n```\n    例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”\n```\n\n### 圆括号\n\n补充说明时，使用全角圆括号`（）`，括号前后不加空格。\n\n```\n例句：请确认所有的连接（电缆和接插件）均安装牢固。\n```\n\n### 冒号\n\n全角冒号（`：`）常用在需要解释的词语后边，引出解释和说明。\n\n```\n例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。\n```\n\n表示时间时，应使用半角冒号（`:`）。\n\n```\n例句：早上 8:00\n```\n\n### 省略号\n\n省略号`……`表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用`。。。`或`...`等非标准形式。\n\n省略号不应与“等”这个词一起使用。\n\n```\n错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。\n\n正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……\n\n正确：我们为会餐准备了香蕉、苹果、梨等各色水果。\n```\n\n### 感叹号\n\n应该使用平静的语气叙述，尽量避免使用感叹号`！`。\n\n不得多个感叹号连用，比如`！！`和`!!!`。\n\n### 破折号\n\n破折号`————`一般用于做进一步解释。破折号应占两个汉字的位置。\n\n```\n例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。\n```\n\n### 连接号\n\n连接号用于连接两个类似的词。\n\n以下场合应该使用直线连接号（`-`），占一个半角字符的位置。\n\n- 两个名词的复合\n- 图表编号\n\n    例句：氧化-还原反应\n\n    例句：图 1-1\n\n以下场合应该使用波浪连接号（`～`），占一个全角字符的位置。\n\n- 数值范围（例如日期、时间或数字）\n\n    例句：2009 年～2011 年\n\n注意，波浪连接号前后两个值都应该加上单位。\n\n波浪连接号也可以用汉字“至”代替。\n\n```\n例句：周围温度：-20°C 至 -10°C\n```\n\n## 文档体系\n\n### 结构\n\n软件手册是一部完整的书，建议采用下面的结构。\n\n- 简介（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明\n- 快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品\n- 入门篇（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程\n    - 环境准备（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件\n    - 安装（Installation）：[可选] [文件] 软件的安装方法\n    - 设置（Configuration）：[必备] [文件] 软件的设置\n- 进阶篇（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程\n- API（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍\n- FAQ：[可选] [文件] 常见问题解答\n- 附录（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容\n    - Glossary：[可选] [文件] 名词解释\n    - Recipes：[可选] [文件] 最佳实践\n    - Troubleshooting：[可选] [文件] 故障处理\n    - ChangeLog：[可选] [文件] 版本说明\n    - Feedback：[可选] [文件] 反馈方式\n\n下面是两个真实范例，可参考。\n\n- [Redux 手册](http://redux.js.org/index.html)\n- [Atom 手册](http://flight-manual.atom.io/)\n\n### 文件名\n\n文档的文件名不得含有空格。\n\n文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。\n\n```\n错误： 名词解释.md\n\n正确： glossary.md\n```\n\n文件名建议只使用小写字母，不使用大写字母。\n\n```\n错误：TroubleShooting.md\n\n正确：troubleshooting.md \n```\n\n为了醒目，某些说明文件的文件名，可以使用大写字母，比如`README`、`LICENSE`。\n\n文件名包含多个单词时，单词之间建议使用半角的连词线（`-`）分隔。\n\n```\n不佳：advanced_usage.md\n\n正确：advanced-usage.md\n```\n\n## 参考链接\n\n- [产品手册中文写作规范](https://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html), by 华为\n- [写作规范和格式规范](http://docs.daocloud.io/write-docs/format), by DaoCloud\n- [技术写作技巧在日汉翻译中的应用](http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf), by 刘方\n- [简体中文规范指南](https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf), by lengoo\n- [文档风格指南](https://open.leancloud.cn/copywriting-style-guide.html), by LeanCloud\n- [豌豆荚文案风格指南](https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit), by 豌豆荚\n- [中文文案排版指北](https://github.com/sparanoid/chinese-copywriting-guidelines), by sparanoid\n- [中文排版需求](http://w3c.github.io/clreq/), by W3C\n- [为什么文件名要小写？](http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html), by 阮一峰","source":"_posts/markdown-standard.md","raw":"---\ntitle: Markdown 中文技术文档的写作规范\ndate: 2017-01-20 19:33:25\ntags: Markdown\ncategory: 码梦为生\n---\n\n{% note class_name %} 本文转载自: https://github.com/ruanyf/document-style-guide {% endnote %}\n\n中文技术文档的写作规范。\n\n<!--more-->\n\n## 标题\n\n### 层级\n\n标题分为四级。\n\n- 一级标题：文章的标题\n- 二级标题：文章主要部分的大标题\n- 三级标题：二级标题下面一级的小标题\n- 四级标题：三级标题下面某一方面的小标题\n\n### 原则\n\n- 一级标题下，不能直接出现三级标题。\n- 标题要避免孤立编号（即同级标题只有一个）。\n- 下级标题不重复上一级标题的内容。\n- 谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。\n\n## 文本\n\n### 字间距\n\n全角中文字符与半角英文字符之间，应有一个半角空格。\n\n```\n错误：本文介绍如何快速启动Windows系统。\n\n正确：本文介绍如何快速启动 Windows 系统。\n```\n\n全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。\n\n```\n正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。\n\n正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。\n```\n\n半角的百分号，视同阿拉伯数字。\n\n英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。\n\n```\n错误：一部容量为 16 GB 的智能手机\n\n正确：一部容量为 16GB 的智能手机\n```\n\n半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。\n\n```\n错误：他的电脑是 MacBook Air 。\n\n正确：他的电脑是 MacBook Air。\n```\n\n### 句子\n\n- 避免使用长句。一个句子建议不超过 100 字或者正文的 3 行。\n- 尽量使用简单句和并列句，避免使用复合句。\n\n### 写作风格\n\n尽量不使用被动语态，改为使用主动语态。\n\n```\n错误：假如此软件尚未被安装，\n\n正确：假如尚未安装这个软件，\n```\n\n不使用非正式的语言风格。\n\n```\n错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！\n\n正确：无法参加本次活动，我深感遗憾。\n```\n\n用对“的”、“地”、“得”。\n\n```\n她露出了开心的笑容。\n（形容词＋的＋名词）\n\n她开心地笑了。\n（副词＋地＋动词）\n\n她笑得很开心。\n（动词＋得＋副词）\n```\n\n使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。\n\n```\n错误：从管理系统可以监视中继系统和受其直接控制的分配系统。\n\n正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。\n```\n\n名词前不要使用过多的形容词。\n\n```\n错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。\n\n正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。\n```\n\n单个句子的长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。\n\n```\n错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。\n\n正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。\n```\n\n同样一个意思，尽量使用肯定句表达，不使用否定句表达。\n\n```\n错误：请确认没有接通装置的电源。\n\n正确：请确认装置的电源已关闭。\n```\n\n避免使用双重否定句。\n\n```\n错误：没有删除权限的用户，不能删除此文件。\n\n正确：用户必须拥有删除权限，才能删除此文件。\n```\n\n### 英文处理\n\n英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。\n\n```\n英文：...information stored in random access memory (RAMs)...\n\n中文：……存储在随机存取存储器（RAM）里的信息……\n```\n\n外文缩写可以使用半角圆点(`.`)表示缩写。\n\n```\nU.S.A.\nApple, Inc.\n```\n\n表示中文时，英文省略号（`...`）应改为中文省略号（`……`）。\n\n```\n英文：5 minutes later...\n\n中文：5 分钟过去了……\n```\n\n英文书名或电影名改用中文表达时，双引号应改为书名号。\n\n```\n英文：He published an article entitled \"The Future of the Aviation\".\n\n中文：他发表了一篇名为《航空业的未来》的文章。\n```\n\n第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。\n\n```\nIOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。\n```\n\n专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。\n\n```\n“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。\n\n“online transaction processing”（在线事务处理）不是专有名词，不应大写。\n```\n\n## 段落\n\n### 原则\n\n- 一个段落只能有一个主题，或一个中心句子。\n- 段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。\n- 一个段落的长度不能超过七行，最佳段落长度小于等于四行。\n- 段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。\n- 段落之间使用一个空行隔开。\n- 段落开头不要留出空白字符。\n\n### 引用\n\n引用第三方内容时，应注明出处。\n\n```\nOne man’s constant is another man’s variable. — Alan Perlis\n```\n\n如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。\n\n```\n本文转载自 WikiQuote\n```\n\n使用外部图片时，必须在图片下方或文末标明来源。\n\n```\n本文部分图片来自 Wikipedia\n```\n\n## 数值\n\n### 半角数字\n\n数字一律使用半角形式，不得使用全角形式。\n\n```\n错误： 这件商品的价格是１０００元。\n\n正确： 这件商品的价格是 1000 元。\n```\n\n### 千分号\n\n数值为千位以上，应添加千分号（半角逗号）。\n\n```\nXXX 公司的实收资本为 RMB1,258,000。\n```\n\n对于 4 ～ 6 位的数值，千分号是选用的，比如1000和1,000都可以接受。对于7位及以上的数值，千分号是必须的。\n\n多位小数要从小数点后从左向右添加千分号，比如4.234,345。\n\n### 货币\n\n货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。\n\n```\n$1,000\n1,000 美元\n```\n\n### 数值范围\n\n表示数值范围时，用`～`连接。参见《标点符号》一节的“连接号”部分。\n\n带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。\n\n```\n错误：132～234kg\n正确：132kg～234kg\n\n错误：67～89%\n正确：67%～89%\n```\n\n### 变化程度的表示法\n\n数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。\n\n```\n增加到过去的两倍\n（过去为一，现在为二）\n\n增加了两倍\n（过去为一，现在为三）\n```\n\n数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。\n\n```\n降低到百分之八十\n（定额是一百，现在是八十）\n\n降低了百分之八十\n（原来是一百，现在是二十）\n```\n\n不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。\n\n## 标点符号\n\n### 原则\n\n- 中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。\n- 如果整句为英文，则该句使用英文/半角标点。\n- 句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。\n\n### 句号\n\n中文语句中的结尾处应该用全角句号（`。`）。\n\n句子末尾用括号加注时，句号应在括号之外。\n\n```\n错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）\n\n正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。\n```\n\n### 逗号\n\n逗号`，`表示句子内部的一般性停顿。\n\n注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。\n\n### 顿号\n\n句子内部的并列词，应该用全角顿号(`、`) 分隔，而不用逗号，即使并列词是英语也是如此。\n\n```\n错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。\n\n正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。\n```\n\n英文句子中，并列词语之间使用半角逗号（`,`）分隔。\n\n```\n例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.\n```\n\n### 分号\n\n分号`；`表示复句内部并列分句之间的停顿。\n\n### 引号\n\n引用时，应该使用全角双引号（`“ ”`），注意前后双引号不同。\n\n```\n例句：许多人都认为客户服务的核心是“友好”和“专业”。\n```\n\n引号里面还要用引号时，外面一层用双引号，里面一层用单引号（`‘ ’`），注意前后单引号不同。\n\n```\n    例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”\n```\n\n### 圆括号\n\n补充说明时，使用全角圆括号`（）`，括号前后不加空格。\n\n```\n例句：请确认所有的连接（电缆和接插件）均安装牢固。\n```\n\n### 冒号\n\n全角冒号（`：`）常用在需要解释的词语后边，引出解释和说明。\n\n```\n例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。\n```\n\n表示时间时，应使用半角冒号（`:`）。\n\n```\n例句：早上 8:00\n```\n\n### 省略号\n\n省略号`……`表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用`。。。`或`...`等非标准形式。\n\n省略号不应与“等”这个词一起使用。\n\n```\n错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。\n\n正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……\n\n正确：我们为会餐准备了香蕉、苹果、梨等各色水果。\n```\n\n### 感叹号\n\n应该使用平静的语气叙述，尽量避免使用感叹号`！`。\n\n不得多个感叹号连用，比如`！！`和`!!!`。\n\n### 破折号\n\n破折号`————`一般用于做进一步解释。破折号应占两个汉字的位置。\n\n```\n例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。\n```\n\n### 连接号\n\n连接号用于连接两个类似的词。\n\n以下场合应该使用直线连接号（`-`），占一个半角字符的位置。\n\n- 两个名词的复合\n- 图表编号\n\n    例句：氧化-还原反应\n\n    例句：图 1-1\n\n以下场合应该使用波浪连接号（`～`），占一个全角字符的位置。\n\n- 数值范围（例如日期、时间或数字）\n\n    例句：2009 年～2011 年\n\n注意，波浪连接号前后两个值都应该加上单位。\n\n波浪连接号也可以用汉字“至”代替。\n\n```\n例句：周围温度：-20°C 至 -10°C\n```\n\n## 文档体系\n\n### 结构\n\n软件手册是一部完整的书，建议采用下面的结构。\n\n- 简介（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明\n- 快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品\n- 入门篇（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程\n    - 环境准备（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件\n    - 安装（Installation）：[可选] [文件] 软件的安装方法\n    - 设置（Configuration）：[必备] [文件] 软件的设置\n- 进阶篇（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程\n- API（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍\n- FAQ：[可选] [文件] 常见问题解答\n- 附录（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容\n    - Glossary：[可选] [文件] 名词解释\n    - Recipes：[可选] [文件] 最佳实践\n    - Troubleshooting：[可选] [文件] 故障处理\n    - ChangeLog：[可选] [文件] 版本说明\n    - Feedback：[可选] [文件] 反馈方式\n\n下面是两个真实范例，可参考。\n\n- [Redux 手册](http://redux.js.org/index.html)\n- [Atom 手册](http://flight-manual.atom.io/)\n\n### 文件名\n\n文档的文件名不得含有空格。\n\n文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。\n\n```\n错误： 名词解释.md\n\n正确： glossary.md\n```\n\n文件名建议只使用小写字母，不使用大写字母。\n\n```\n错误：TroubleShooting.md\n\n正确：troubleshooting.md \n```\n\n为了醒目，某些说明文件的文件名，可以使用大写字母，比如`README`、`LICENSE`。\n\n文件名包含多个单词时，单词之间建议使用半角的连词线（`-`）分隔。\n\n```\n不佳：advanced_usage.md\n\n正确：advanced-usage.md\n```\n\n## 参考链接\n\n- [产品手册中文写作规范](https://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html), by 华为\n- [写作规范和格式规范](http://docs.daocloud.io/write-docs/format), by DaoCloud\n- [技术写作技巧在日汉翻译中的应用](http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf), by 刘方\n- [简体中文规范指南](https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf), by lengoo\n- [文档风格指南](https://open.leancloud.cn/copywriting-style-guide.html), by LeanCloud\n- [豌豆荚文案风格指南](https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit), by 豌豆荚\n- [中文文案排版指北](https://github.com/sparanoid/chinese-copywriting-guidelines), by sparanoid\n- [中文排版需求](http://w3c.github.io/clreq/), by W3C\n- [为什么文件名要小写？](http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html), by 阮一峰","slug":"markdown-standard","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpr000yslm4opvr3oie","content":"<div class=\"note class_name\"><p>本文转载自: <a href=\"https://github.com/ruanyf/document-style-guide\" target=\"_blank\" rel=\"noopener\">https://github.com/ruanyf/document-style-guide</a> </p></div>\n<p>中文技术文档的写作规范。</p>\n<a id=\"more\"></a>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><h3 id=\"层级\"><a href=\"#层级\" class=\"headerlink\" title=\"层级\"></a>层级</h3><p>标题分为四级。</p>\n<ul>\n<li>一级标题：文章的标题</li>\n<li>二级标题：文章主要部分的大标题</li>\n<li>三级标题：二级标题下面一级的小标题</li>\n<li>四级标题：三级标题下面某一方面的小标题</li>\n</ul>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li>一级标题下，不能直接出现三级标题。</li>\n<li>标题要避免孤立编号（即同级标题只有一个）。</li>\n<li>下级标题不重复上一级标题的内容。</li>\n<li>谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</li>\n</ul>\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><h3 id=\"字间距\"><a href=\"#字间距\" class=\"headerlink\" title=\"字间距\"></a>字间距</h3><p>全角中文字符与半角英文字符之间，应有一个半角空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：本文介绍如何快速启动Windows系统。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：本文介绍如何快速启动 Windows 系统。</span><br></pre></td></tr></table></figure>\n<p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。</span><br></pre></td></tr></table></figure>\n<p>半角的百分号，视同阿拉伯数字。</p>\n<p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：一部容量为 16 GB 的智能手机</span><br><span class=\"line\"></span><br><span class=\"line\">正确：一部容量为 16GB 的智能手机</span><br></pre></td></tr></table></figure>\n<p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：他的电脑是 MacBook Air 。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：他的电脑是 MacBook Air。</span><br></pre></td></tr></table></figure>\n<h3 id=\"句子\"><a href=\"#句子\" class=\"headerlink\" title=\"句子\"></a>句子</h3><ul>\n<li>避免使用长句。一个句子建议不超过 100 字或者正文的 3 行。</li>\n<li>尽量使用简单句和并列句，避免使用复合句。</li>\n</ul>\n<h3 id=\"写作风格\"><a href=\"#写作风格\" class=\"headerlink\" title=\"写作风格\"></a>写作风格</h3><p>尽量不使用被动语态，改为使用主动语态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：假如此软件尚未被安装，</span><br><span class=\"line\"></span><br><span class=\"line\">正确：假如尚未安装这个软件，</span><br></pre></td></tr></table></figure>\n<p>不使用非正式的语言风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！</span><br><span class=\"line\"></span><br><span class=\"line\">正确：无法参加本次活动，我深感遗憾。</span><br></pre></td></tr></table></figure>\n<p>用对“的”、“地”、“得”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">她露出了开心的笑容。</span><br><span class=\"line\">（形容词＋的＋名词）</span><br><span class=\"line\"></span><br><span class=\"line\">她开心地笑了。</span><br><span class=\"line\">（副词＋地＋动词）</span><br><span class=\"line\"></span><br><span class=\"line\">她笑得很开心。</span><br><span class=\"line\">（动词＋得＋副词）</span><br></pre></td></tr></table></figure>\n<p>使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</span><br></pre></td></tr></table></figure>\n<p>名词前不要使用过多的形容词。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</span><br></pre></td></tr></table></figure>\n<p>单个句子的长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</span><br></pre></td></tr></table></figure>\n<p>同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：请确认没有接通装置的电源。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：请确认装置的电源已关闭。</span><br></pre></td></tr></table></figure>\n<p>避免使用双重否定句。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：没有删除权限的用户，不能删除此文件。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：用户必须拥有删除权限，才能删除此文件。</span><br></pre></td></tr></table></figure>\n<h3 id=\"英文处理\"><a href=\"#英文处理\" class=\"headerlink\" title=\"英文处理\"></a>英文处理</h3><p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">英文：...information stored in random access memory (RAMs)...</span><br><span class=\"line\"></span><br><span class=\"line\">中文：……存储在随机存取存储器（RAM）里的信息……</span><br></pre></td></tr></table></figure>\n<p>外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">U.S.A.</span><br><span class=\"line\">Apple, Inc.</span><br></pre></td></tr></table></figure>\n<p>表示中文时，英文省略号（<code>...</code>）应改为中文省略号（<code>……</code>）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">英文：5 minutes later...</span><br><span class=\"line\"></span><br><span class=\"line\">中文：5 分钟过去了……</span><br></pre></td></tr></table></figure>\n<p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">英文：He published an article entitled &quot;The Future of the Aviation&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">中文：他发表了一篇名为《航空业的未来》的文章。</span><br></pre></td></tr></table></figure>\n<p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。</span><br></pre></td></tr></table></figure>\n<p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。</span><br><span class=\"line\"></span><br><span class=\"line\">“online transaction processing”（在线事务处理）不是专有名词，不应大写。</span><br></pre></td></tr></table></figure>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><h3 id=\"原则-1\"><a href=\"#原则-1\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li>一个段落只能有一个主题，或一个中心句子。</li>\n<li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li>\n<li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li>\n<li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li>\n<li>段落之间使用一个空行隔开。</li>\n<li>段落开头不要留出空白字符。</li>\n</ul>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>引用第三方内容时，应注明出处。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">One man’s constant is another man’s variable. — Alan Perlis</span><br></pre></td></tr></table></figure>\n<p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">本文转载自 WikiQuote</span><br></pre></td></tr></table></figure>\n<p>使用外部图片时，必须在图片下方或文末标明来源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">本文部分图片来自 Wikipedia</span><br></pre></td></tr></table></figure>\n<h2 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h2><h3 id=\"半角数字\"><a href=\"#半角数字\" class=\"headerlink\" title=\"半角数字\"></a>半角数字</h3><p>数字一律使用半角形式，不得使用全角形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误： 这件商品的价格是１０００元。</span><br><span class=\"line\"></span><br><span class=\"line\">正确： 这件商品的价格是 1000 元。</span><br></pre></td></tr></table></figure>\n<h3 id=\"千分号\"><a href=\"#千分号\" class=\"headerlink\" title=\"千分号\"></a>千分号</h3><p>数值为千位以上，应添加千分号（半角逗号）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">XXX 公司的实收资本为 RMB1,258,000。</span><br></pre></td></tr></table></figure>\n<p>对于 4 ～ 6 位的数值，千分号是选用的，比如1000和1,000都可以接受。对于7位及以上的数值，千分号是必须的。</p>\n<p>多位小数要从小数点后从左向右添加千分号，比如4.234,345。</p>\n<h3 id=\"货币\"><a href=\"#货币\" class=\"headerlink\" title=\"货币\"></a>货币</h3><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$1,000</span><br><span class=\"line\">1,000 美元</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值范围\"><a href=\"#数值范围\" class=\"headerlink\" title=\"数值范围\"></a>数值范围</h3><p>表示数值范围时，用<code>～</code>连接。参见《标点符号》一节的“连接号”部分。</p>\n<p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：132～234kg</span><br><span class=\"line\">正确：132kg～234kg</span><br><span class=\"line\"></span><br><span class=\"line\">错误：67～89%</span><br><span class=\"line\">正确：67%～89%</span><br></pre></td></tr></table></figure>\n<h3 id=\"变化程度的表示法\"><a href=\"#变化程度的表示法\" class=\"headerlink\" title=\"变化程度的表示法\"></a>变化程度的表示法</h3><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">增加到过去的两倍</span><br><span class=\"line\">（过去为一，现在为二）</span><br><span class=\"line\"></span><br><span class=\"line\">增加了两倍</span><br><span class=\"line\">（过去为一，现在为三）</span><br></pre></td></tr></table></figure>\n<p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">降低到百分之八十</span><br><span class=\"line\">（定额是一百，现在是八十）</span><br><span class=\"line\"></span><br><span class=\"line\">降低了百分之八十</span><br><span class=\"line\">（原来是一百，现在是二十）</span><br></pre></td></tr></table></figure>\n<p>不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p>\n<h2 id=\"标点符号\"><a href=\"#标点符号\" class=\"headerlink\" title=\"标点符号\"></a>标点符号</h2><h3 id=\"原则-2\"><a href=\"#原则-2\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。</li>\n<li>如果整句为英文，则该句使用英文/半角标点。</li>\n<li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</li>\n</ul>\n<h3 id=\"句号\"><a href=\"#句号\" class=\"headerlink\" title=\"句号\"></a>句号</h3><p>中文语句中的结尾处应该用全角句号（<code>。</code>）。</p>\n<p>句子末尾用括号加注时，句号应在括号之外。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）</span><br><span class=\"line\"></span><br><span class=\"line\">正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。</span><br></pre></td></tr></table></figure>\n<h3 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\"逗号\"></a>逗号</h3><p>逗号<code>，</code>表示句子内部的一般性停顿。</p>\n<p>注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p>\n<h3 id=\"顿号\"><a href=\"#顿号\" class=\"headerlink\" title=\"顿号\"></a>顿号</h3><p>句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</span><br></pre></td></tr></table></figure>\n<p>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.</span><br></pre></td></tr></table></figure>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p>分号<code>；</code>表示复句内部并列分句之间的停顿。</p>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><p>引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：许多人都认为客户服务的核心是“友好”和“专业”。</span><br></pre></td></tr></table></figure>\n<p>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</span><br></pre></td></tr></table></figure>\n<h3 id=\"圆括号\"><a href=\"#圆括号\" class=\"headerlink\" title=\"圆括号\"></a>圆括号</h3><p>补充说明时，使用全角圆括号<code>（）</code>，括号前后不加空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：请确认所有的连接（电缆和接插件）均安装牢固。</span><br></pre></td></tr></table></figure>\n<h3 id=\"冒号\"><a href=\"#冒号\" class=\"headerlink\" title=\"冒号\"></a>冒号</h3><p>全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。</span><br></pre></td></tr></table></figure>\n<p>表示时间时，应使用半角冒号（<code>:</code>）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：早上 8:00</span><br></pre></td></tr></table></figure>\n<h3 id=\"省略号\"><a href=\"#省略号\" class=\"headerlink\" title=\"省略号\"></a>省略号</h3><p>省略号<code>……</code>表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p>\n<p>省略号不应与“等”这个词一起使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……</span><br><span class=\"line\"></span><br><span class=\"line\">正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</span><br></pre></td></tr></table></figure>\n<h3 id=\"感叹号\"><a href=\"#感叹号\" class=\"headerlink\" title=\"感叹号\"></a>感叹号</h3><p>应该使用平静的语气叙述，尽量避免使用感叹号<code>！</code>。</p>\n<p>不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p>\n<h3 id=\"破折号\"><a href=\"#破折号\" class=\"headerlink\" title=\"破折号\"></a>破折号</h3><p>破折号<code>————</code>一般用于做进一步解释。破折号应占两个汉字的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接号\"><a href=\"#连接号\" class=\"headerlink\" title=\"连接号\"></a>连接号</h3><p>连接号用于连接两个类似的词。</p>\n<p>以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p>\n<ul>\n<li>两个名词的复合</li>\n<li><p>图表编号</p>\n<p>  例句：氧化-还原反应</p>\n<p>  例句：图 1-1</p>\n</li>\n</ul>\n<p>以下场合应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</p>\n<ul>\n<li><p>数值范围（例如日期、时间或数字）</p>\n<p>  例句：2009 年～2011 年</p>\n</li>\n</ul>\n<p>注意，波浪连接号前后两个值都应该加上单位。</p>\n<p>波浪连接号也可以用汉字“至”代替。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：周围温度：-20°C 至 -10°C</span><br></pre></td></tr></table></figure>\n<h2 id=\"文档体系\"><a href=\"#文档体系\" class=\"headerlink\" title=\"文档体系\"></a>文档体系</h2><h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>软件手册是一部完整的书，建议采用下面的结构。</p>\n<ul>\n<li>简介（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li>\n<li>快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品</li>\n<li>入门篇（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程<ul>\n<li>环境准备（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li>\n<li>安装（Installation）：[可选] [文件] 软件的安装方法</li>\n<li>设置（Configuration）：[必备] [文件] 软件的设置</li>\n</ul>\n</li>\n<li>进阶篇（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程</li>\n<li>API（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li>\n<li>FAQ：[可选] [文件] 常见问题解答</li>\n<li>附录（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul>\n<li>Glossary：[可选] [文件] 名词解释</li>\n<li>Recipes：[可选] [文件] 最佳实践</li>\n<li>Troubleshooting：[可选] [文件] 故障处理</li>\n<li>ChangeLog：[可选] [文件] 版本说明</li>\n<li>Feedback：[可选] [文件] 反馈方式</li>\n</ul>\n</li>\n</ul>\n<p>下面是两个真实范例，可参考。</p>\n<ul>\n<li><a href=\"http://redux.js.org/index.html\" target=\"_blank\" rel=\"noopener\">Redux 手册</a></li>\n<li><a href=\"http://flight-manual.atom.io/\" target=\"_blank\" rel=\"noopener\">Atom 手册</a></li>\n</ul>\n<h3 id=\"文件名\"><a href=\"#文件名\" class=\"headerlink\" title=\"文件名\"></a>文件名</h3><p>文档的文件名不得含有空格。</p>\n<p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误： 名词解释.md</span><br><span class=\"line\"></span><br><span class=\"line\">正确： glossary.md</span><br></pre></td></tr></table></figure>\n<p>文件名建议只使用小写字母，不使用大写字母。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：TroubleShooting.md</span><br><span class=\"line\"></span><br><span class=\"line\">正确：troubleshooting.md</span><br></pre></td></tr></table></figure>\n<p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p>\n<p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">不佳：advanced_usage.md</span><br><span class=\"line\"></span><br><span class=\"line\">正确：advanced-usage.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html\" target=\"_blank\" rel=\"noopener\">产品手册中文写作规范</a>, by 华为</li>\n<li><a href=\"http://docs.daocloud.io/write-docs/format\" target=\"_blank\" rel=\"noopener\">写作规范和格式规范</a>, by DaoCloud</li>\n<li><a href=\"http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf\" target=\"_blank\" rel=\"noopener\">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li>\n<li><a href=\"https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf\" target=\"_blank\" rel=\"noopener\">简体中文规范指南</a>, by lengoo</li>\n<li><a href=\"https://open.leancloud.cn/copywriting-style-guide.html\" target=\"_blank\" rel=\"noopener\">文档风格指南</a>, by LeanCloud</li>\n<li><a href=\"https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit\" target=\"_blank\" rel=\"noopener\">豌豆荚文案风格指南</a>, by 豌豆荚</li>\n<li><a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\" target=\"_blank\" rel=\"noopener\">中文文案排版指北</a>, by sparanoid</li>\n<li><a href=\"http://w3c.github.io/clreq/\" target=\"_blank\" rel=\"noopener\">中文排版需求</a>, by W3C</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html\" target=\"_blank\" rel=\"noopener\">为什么文件名要小写？</a>, by 阮一峰</li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note class_name\"><p>本文转载自: <a href=\"https://github.com/ruanyf/document-style-guide\" target=\"_blank\" rel=\"noopener\">https://github.com/ruanyf/document-style-guide</a> </p></div>\n<p>中文技术文档的写作规范。</p>","more":"<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><h3 id=\"层级\"><a href=\"#层级\" class=\"headerlink\" title=\"层级\"></a>层级</h3><p>标题分为四级。</p>\n<ul>\n<li>一级标题：文章的标题</li>\n<li>二级标题：文章主要部分的大标题</li>\n<li>三级标题：二级标题下面一级的小标题</li>\n<li>四级标题：三级标题下面某一方面的小标题</li>\n</ul>\n<h3 id=\"原则\"><a href=\"#原则\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li>一级标题下，不能直接出现三级标题。</li>\n<li>标题要避免孤立编号（即同级标题只有一个）。</li>\n<li>下级标题不重复上一级标题的内容。</li>\n<li>谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</li>\n</ul>\n<h2 id=\"文本\"><a href=\"#文本\" class=\"headerlink\" title=\"文本\"></a>文本</h2><h3 id=\"字间距\"><a href=\"#字间距\" class=\"headerlink\" title=\"字间距\"></a>字间距</h3><p>全角中文字符与半角英文字符之间，应有一个半角空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：本文介绍如何快速启动Windows系统。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：本文介绍如何快速启动 Windows 系统。</span><br></pre></td></tr></table></figure>\n<p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。</span><br></pre></td></tr></table></figure>\n<p>半角的百分号，视同阿拉伯数字。</p>\n<p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：一部容量为 16 GB 的智能手机</span><br><span class=\"line\"></span><br><span class=\"line\">正确：一部容量为 16GB 的智能手机</span><br></pre></td></tr></table></figure>\n<p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：他的电脑是 MacBook Air 。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：他的电脑是 MacBook Air。</span><br></pre></td></tr></table></figure>\n<h3 id=\"句子\"><a href=\"#句子\" class=\"headerlink\" title=\"句子\"></a>句子</h3><ul>\n<li>避免使用长句。一个句子建议不超过 100 字或者正文的 3 行。</li>\n<li>尽量使用简单句和并列句，避免使用复合句。</li>\n</ul>\n<h3 id=\"写作风格\"><a href=\"#写作风格\" class=\"headerlink\" title=\"写作风格\"></a>写作风格</h3><p>尽量不使用被动语态，改为使用主动语态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：假如此软件尚未被安装，</span><br><span class=\"line\"></span><br><span class=\"line\">正确：假如尚未安装这个软件，</span><br></pre></td></tr></table></figure>\n<p>不使用非正式的语言风格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！</span><br><span class=\"line\"></span><br><span class=\"line\">正确：无法参加本次活动，我深感遗憾。</span><br></pre></td></tr></table></figure>\n<p>用对“的”、“地”、“得”。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">她露出了开心的笑容。</span><br><span class=\"line\">（形容词＋的＋名词）</span><br><span class=\"line\"></span><br><span class=\"line\">她开心地笑了。</span><br><span class=\"line\">（副词＋地＋动词）</span><br><span class=\"line\"></span><br><span class=\"line\">她笑得很开心。</span><br><span class=\"line\">（动词＋得＋副词）</span><br></pre></td></tr></table></figure>\n<p>使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</span><br></pre></td></tr></table></figure>\n<p>名词前不要使用过多的形容词。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</span><br></pre></td></tr></table></figure>\n<p>单个句子的长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</span><br></pre></td></tr></table></figure>\n<p>同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：请确认没有接通装置的电源。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：请确认装置的电源已关闭。</span><br></pre></td></tr></table></figure>\n<p>避免使用双重否定句。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：没有删除权限的用户，不能删除此文件。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：用户必须拥有删除权限，才能删除此文件。</span><br></pre></td></tr></table></figure>\n<h3 id=\"英文处理\"><a href=\"#英文处理\" class=\"headerlink\" title=\"英文处理\"></a>英文处理</h3><p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">英文：...information stored in random access memory (RAMs)...</span><br><span class=\"line\"></span><br><span class=\"line\">中文：……存储在随机存取存储器（RAM）里的信息……</span><br></pre></td></tr></table></figure>\n<p>外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">U.S.A.</span><br><span class=\"line\">Apple, Inc.</span><br></pre></td></tr></table></figure>\n<p>表示中文时，英文省略号（<code>...</code>）应改为中文省略号（<code>……</code>）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">英文：5 minutes later...</span><br><span class=\"line\"></span><br><span class=\"line\">中文：5 分钟过去了……</span><br></pre></td></tr></table></figure>\n<p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">英文：He published an article entitled &quot;The Future of the Aviation&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">中文：他发表了一篇名为《航空业的未来》的文章。</span><br></pre></td></tr></table></figure>\n<p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。</span><br></pre></td></tr></table></figure>\n<p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。</span><br><span class=\"line\"></span><br><span class=\"line\">“online transaction processing”（在线事务处理）不是专有名词，不应大写。</span><br></pre></td></tr></table></figure>\n<h2 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h2><h3 id=\"原则-1\"><a href=\"#原则-1\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li>一个段落只能有一个主题，或一个中心句子。</li>\n<li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li>\n<li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li>\n<li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li>\n<li>段落之间使用一个空行隔开。</li>\n<li>段落开头不要留出空白字符。</li>\n</ul>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>引用第三方内容时，应注明出处。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">One man’s constant is another man’s variable. — Alan Perlis</span><br></pre></td></tr></table></figure>\n<p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">本文转载自 WikiQuote</span><br></pre></td></tr></table></figure>\n<p>使用外部图片时，必须在图片下方或文末标明来源。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">本文部分图片来自 Wikipedia</span><br></pre></td></tr></table></figure>\n<h2 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h2><h3 id=\"半角数字\"><a href=\"#半角数字\" class=\"headerlink\" title=\"半角数字\"></a>半角数字</h3><p>数字一律使用半角形式，不得使用全角形式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误： 这件商品的价格是１０００元。</span><br><span class=\"line\"></span><br><span class=\"line\">正确： 这件商品的价格是 1000 元。</span><br></pre></td></tr></table></figure>\n<h3 id=\"千分号\"><a href=\"#千分号\" class=\"headerlink\" title=\"千分号\"></a>千分号</h3><p>数值为千位以上，应添加千分号（半角逗号）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">XXX 公司的实收资本为 RMB1,258,000。</span><br></pre></td></tr></table></figure>\n<p>对于 4 ～ 6 位的数值，千分号是选用的，比如1000和1,000都可以接受。对于7位及以上的数值，千分号是必须的。</p>\n<p>多位小数要从小数点后从左向右添加千分号，比如4.234,345。</p>\n<h3 id=\"货币\"><a href=\"#货币\" class=\"headerlink\" title=\"货币\"></a>货币</h3><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$1,000</span><br><span class=\"line\">1,000 美元</span><br></pre></td></tr></table></figure>\n<h3 id=\"数值范围\"><a href=\"#数值范围\" class=\"headerlink\" title=\"数值范围\"></a>数值范围</h3><p>表示数值范围时，用<code>～</code>连接。参见《标点符号》一节的“连接号”部分。</p>\n<p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：132～234kg</span><br><span class=\"line\">正确：132kg～234kg</span><br><span class=\"line\"></span><br><span class=\"line\">错误：67～89%</span><br><span class=\"line\">正确：67%～89%</span><br></pre></td></tr></table></figure>\n<h3 id=\"变化程度的表示法\"><a href=\"#变化程度的表示法\" class=\"headerlink\" title=\"变化程度的表示法\"></a>变化程度的表示法</h3><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">增加到过去的两倍</span><br><span class=\"line\">（过去为一，现在为二）</span><br><span class=\"line\"></span><br><span class=\"line\">增加了两倍</span><br><span class=\"line\">（过去为一，现在为三）</span><br></pre></td></tr></table></figure>\n<p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">降低到百分之八十</span><br><span class=\"line\">（定额是一百，现在是八十）</span><br><span class=\"line\"></span><br><span class=\"line\">降低了百分之八十</span><br><span class=\"line\">（原来是一百，现在是二十）</span><br></pre></td></tr></table></figure>\n<p>不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p>\n<h2 id=\"标点符号\"><a href=\"#标点符号\" class=\"headerlink\" title=\"标点符号\"></a>标点符号</h2><h3 id=\"原则-2\"><a href=\"#原则-2\" class=\"headerlink\" title=\"原则\"></a>原则</h3><ul>\n<li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。</li>\n<li>如果整句为英文，则该句使用英文/半角标点。</li>\n<li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</li>\n</ul>\n<h3 id=\"句号\"><a href=\"#句号\" class=\"headerlink\" title=\"句号\"></a>句号</h3><p>中文语句中的结尾处应该用全角句号（<code>。</code>）。</p>\n<p>句子末尾用括号加注时，句号应在括号之外。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）</span><br><span class=\"line\"></span><br><span class=\"line\">正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。</span><br></pre></td></tr></table></figure>\n<h3 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\"逗号\"></a>逗号</h3><p>逗号<code>，</code>表示句子内部的一般性停顿。</p>\n<p>注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p>\n<h3 id=\"顿号\"><a href=\"#顿号\" class=\"headerlink\" title=\"顿号\"></a>顿号</h3><p>句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</span><br></pre></td></tr></table></figure>\n<p>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.</span><br></pre></td></tr></table></figure>\n<h3 id=\"分号\"><a href=\"#分号\" class=\"headerlink\" title=\"分号\"></a>分号</h3><p>分号<code>；</code>表示复句内部并列分句之间的停顿。</p>\n<h3 id=\"引号\"><a href=\"#引号\" class=\"headerlink\" title=\"引号\"></a>引号</h3><p>引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：许多人都认为客户服务的核心是“友好”和“专业”。</span><br></pre></td></tr></table></figure>\n<p>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</span><br></pre></td></tr></table></figure>\n<h3 id=\"圆括号\"><a href=\"#圆括号\" class=\"headerlink\" title=\"圆括号\"></a>圆括号</h3><p>补充说明时，使用全角圆括号<code>（）</code>，括号前后不加空格。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：请确认所有的连接（电缆和接插件）均安装牢固。</span><br></pre></td></tr></table></figure>\n<h3 id=\"冒号\"><a href=\"#冒号\" class=\"headerlink\" title=\"冒号\"></a>冒号</h3><p>全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。</span><br></pre></td></tr></table></figure>\n<p>表示时间时，应使用半角冒号（<code>:</code>）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：早上 8:00</span><br></pre></td></tr></table></figure>\n<h3 id=\"省略号\"><a href=\"#省略号\" class=\"headerlink\" title=\"省略号\"></a>省略号</h3><p>省略号<code>……</code>表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p>\n<p>省略号不应与“等”这个词一起使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。</span><br><span class=\"line\"></span><br><span class=\"line\">正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……</span><br><span class=\"line\"></span><br><span class=\"line\">正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</span><br></pre></td></tr></table></figure>\n<h3 id=\"感叹号\"><a href=\"#感叹号\" class=\"headerlink\" title=\"感叹号\"></a>感叹号</h3><p>应该使用平静的语气叙述，尽量避免使用感叹号<code>！</code>。</p>\n<p>不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p>\n<h3 id=\"破折号\"><a href=\"#破折号\" class=\"headerlink\" title=\"破折号\"></a>破折号</h3><p>破折号<code>————</code>一般用于做进一步解释。破折号应占两个汉字的位置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接号\"><a href=\"#连接号\" class=\"headerlink\" title=\"连接号\"></a>连接号</h3><p>连接号用于连接两个类似的词。</p>\n<p>以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p>\n<ul>\n<li>两个名词的复合</li>\n<li><p>图表编号</p>\n<p>  例句：氧化-还原反应</p>\n<p>  例句：图 1-1</p>\n</li>\n</ul>\n<p>以下场合应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</p>\n<ul>\n<li><p>数值范围（例如日期、时间或数字）</p>\n<p>  例句：2009 年～2011 年</p>\n</li>\n</ul>\n<p>注意，波浪连接号前后两个值都应该加上单位。</p>\n<p>波浪连接号也可以用汉字“至”代替。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">例句：周围温度：-20°C 至 -10°C</span><br></pre></td></tr></table></figure>\n<h2 id=\"文档体系\"><a href=\"#文档体系\" class=\"headerlink\" title=\"文档体系\"></a>文档体系</h2><h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p>软件手册是一部完整的书，建议采用下面的结构。</p>\n<ul>\n<li>简介（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li>\n<li>快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品</li>\n<li>入门篇（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程<ul>\n<li>环境准备（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li>\n<li>安装（Installation）：[可选] [文件] 软件的安装方法</li>\n<li>设置（Configuration）：[必备] [文件] 软件的设置</li>\n</ul>\n</li>\n<li>进阶篇（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程</li>\n<li>API（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li>\n<li>FAQ：[可选] [文件] 常见问题解答</li>\n<li>附录（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul>\n<li>Glossary：[可选] [文件] 名词解释</li>\n<li>Recipes：[可选] [文件] 最佳实践</li>\n<li>Troubleshooting：[可选] [文件] 故障处理</li>\n<li>ChangeLog：[可选] [文件] 版本说明</li>\n<li>Feedback：[可选] [文件] 反馈方式</li>\n</ul>\n</li>\n</ul>\n<p>下面是两个真实范例，可参考。</p>\n<ul>\n<li><a href=\"http://redux.js.org/index.html\" target=\"_blank\" rel=\"noopener\">Redux 手册</a></li>\n<li><a href=\"http://flight-manual.atom.io/\" target=\"_blank\" rel=\"noopener\">Atom 手册</a></li>\n</ul>\n<h3 id=\"文件名\"><a href=\"#文件名\" class=\"headerlink\" title=\"文件名\"></a>文件名</h3><p>文档的文件名不得含有空格。</p>\n<p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误： 名词解释.md</span><br><span class=\"line\"></span><br><span class=\"line\">正确： glossary.md</span><br></pre></td></tr></table></figure>\n<p>文件名建议只使用小写字母，不使用大写字母。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误：TroubleShooting.md</span><br><span class=\"line\"></span><br><span class=\"line\">正确：troubleshooting.md</span><br></pre></td></tr></table></figure>\n<p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p>\n<p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">不佳：advanced_usage.md</span><br><span class=\"line\"></span><br><span class=\"line\">正确：advanced-usage.md</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html\" target=\"_blank\" rel=\"noopener\">产品手册中文写作规范</a>, by 华为</li>\n<li><a href=\"http://docs.daocloud.io/write-docs/format\" target=\"_blank\" rel=\"noopener\">写作规范和格式规范</a>, by DaoCloud</li>\n<li><a href=\"http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf\" target=\"_blank\" rel=\"noopener\">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li>\n<li><a href=\"https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf\" target=\"_blank\" rel=\"noopener\">简体中文规范指南</a>, by lengoo</li>\n<li><a href=\"https://open.leancloud.cn/copywriting-style-guide.html\" target=\"_blank\" rel=\"noopener\">文档风格指南</a>, by LeanCloud</li>\n<li><a href=\"https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit\" target=\"_blank\" rel=\"noopener\">豌豆荚文案风格指南</a>, by 豌豆荚</li>\n<li><a href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\" target=\"_blank\" rel=\"noopener\">中文文案排版指北</a>, by sparanoid</li>\n<li><a href=\"http://w3c.github.io/clreq/\" target=\"_blank\" rel=\"noopener\">中文排版需求</a>, by W3C</li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html\" target=\"_blank\" rel=\"noopener\">为什么文件名要小写？</a>, by 阮一峰</li>\n</ul>"},{"title":"读后感：《 沉默的大多数 》 — 王小波","date":"2017-05-05T14:41:43.000Z","_content":"\n初读王小波的书，觉得书中的故事大抵离当代社会有点距离。细细品来，方知个中思想在那个年代实属超前，妙言要道。书中很多文章读一遍，尚不能完全领会作者之深意，多次回顾与思辨，才感悟到其中的真知灼见，大有裨益，对于王小波的幽默与锐气也产生了由衷的赞赏。\n\n<!--more-->\n\n## 语录\n\n话语教会我们很多，但善恶还是可以自明。话语想要教会我们，人与人生来就不平等。在人间，尊卑有序是永恒的真理，但你也可以不听。\n\n一个人倘若需要从思想中得到快乐，那么他的第一个欲望就是学习。\n\n知识虽然可以带来幸福，但假如把它压缩成药丸子灌下去，就丧失了乐趣。\n\n正如上坡和下坡是一条路。\n\n在科学上，有错误的学说，没有卑鄙的学说。\n\n有些人受穷，是因为他不想富裕。\n\n贫困是一种生活方式，富裕是另一种生活方式；追求聪明是一种人生的态度，追求愚蠢则是另一种生活态度。\n\n吃苦必须有收益，牺牲必须有代价。\n\n痛苦是艺术的源泉。\n\n对残疾人的最大尊重，就是不把他当残疾人。\n\n人生唯一的不幸就是自己的无能。\n","source":"_posts/most-of-silence.md","raw":"---\ntitle: 读后感：《 沉默的大多数 》 — 王小波 \ndate: 2017-05-05 22:41:43\ntags: \n  - 王小波\ncategory: 书海无涯\n---\n\n初读王小波的书，觉得书中的故事大抵离当代社会有点距离。细细品来，方知个中思想在那个年代实属超前，妙言要道。书中很多文章读一遍，尚不能完全领会作者之深意，多次回顾与思辨，才感悟到其中的真知灼见，大有裨益，对于王小波的幽默与锐气也产生了由衷的赞赏。\n\n<!--more-->\n\n## 语录\n\n话语教会我们很多，但善恶还是可以自明。话语想要教会我们，人与人生来就不平等。在人间，尊卑有序是永恒的真理，但你也可以不听。\n\n一个人倘若需要从思想中得到快乐，那么他的第一个欲望就是学习。\n\n知识虽然可以带来幸福，但假如把它压缩成药丸子灌下去，就丧失了乐趣。\n\n正如上坡和下坡是一条路。\n\n在科学上，有错误的学说，没有卑鄙的学说。\n\n有些人受穷，是因为他不想富裕。\n\n贫困是一种生活方式，富裕是另一种生活方式；追求聪明是一种人生的态度，追求愚蠢则是另一种生活态度。\n\n吃苦必须有收益，牺牲必须有代价。\n\n痛苦是艺术的源泉。\n\n对残疾人的最大尊重，就是不把他当残疾人。\n\n人生唯一的不幸就是自己的无能。\n","slug":"most-of-silence","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cps0012slm47fw59k1q","content":"<p>初读王小波的书，觉得书中的故事大抵离当代社会有点距离。细细品来，方知个中思想在那个年代实属超前，妙言要道。书中很多文章读一遍，尚不能完全领会作者之深意，多次回顾与思辨，才感悟到其中的真知灼见，大有裨益，对于王小波的幽默与锐气也产生了由衷的赞赏。</p>\n<a id=\"more\"></a>\n<h2 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h2><p>话语教会我们很多，但善恶还是可以自明。话语想要教会我们，人与人生来就不平等。在人间，尊卑有序是永恒的真理，但你也可以不听。</p>\n<p>一个人倘若需要从思想中得到快乐，那么他的第一个欲望就是学习。</p>\n<p>知识虽然可以带来幸福，但假如把它压缩成药丸子灌下去，就丧失了乐趣。</p>\n<p>正如上坡和下坡是一条路。</p>\n<p>在科学上，有错误的学说，没有卑鄙的学说。</p>\n<p>有些人受穷，是因为他不想富裕。</p>\n<p>贫困是一种生活方式，富裕是另一种生活方式；追求聪明是一种人生的态度，追求愚蠢则是另一种生活态度。</p>\n<p>吃苦必须有收益，牺牲必须有代价。</p>\n<p>痛苦是艺术的源泉。</p>\n<p>对残疾人的最大尊重，就是不把他当残疾人。</p>\n<p>人生唯一的不幸就是自己的无能。</p>\n","site":{"data":{}},"excerpt":"<p>初读王小波的书，觉得书中的故事大抵离当代社会有点距离。细细品来，方知个中思想在那个年代实属超前，妙言要道。书中很多文章读一遍，尚不能完全领会作者之深意，多次回顾与思辨，才感悟到其中的真知灼见，大有裨益，对于王小波的幽默与锐气也产生了由衷的赞赏。</p>","more":"<h2 id=\"语录\"><a href=\"#语录\" class=\"headerlink\" title=\"语录\"></a>语录</h2><p>话语教会我们很多，但善恶还是可以自明。话语想要教会我们，人与人生来就不平等。在人间，尊卑有序是永恒的真理，但你也可以不听。</p>\n<p>一个人倘若需要从思想中得到快乐，那么他的第一个欲望就是学习。</p>\n<p>知识虽然可以带来幸福，但假如把它压缩成药丸子灌下去，就丧失了乐趣。</p>\n<p>正如上坡和下坡是一条路。</p>\n<p>在科学上，有错误的学说，没有卑鄙的学说。</p>\n<p>有些人受穷，是因为他不想富裕。</p>\n<p>贫困是一种生活方式，富裕是另一种生活方式；追求聪明是一种人生的态度，追求愚蠢则是另一种生活态度。</p>\n<p>吃苦必须有收益，牺牲必须有代价。</p>\n<p>痛苦是艺术的源泉。</p>\n<p>对残疾人的最大尊重，就是不把他当残疾人。</p>\n<p>人生唯一的不幸就是自己的无能。</p>"},{"title":"《现代操作系统》第1章 习题","date":"2018-10-14T02:16:26.000Z","_content":"\n1.什么是多道程序设计？\n\nMultiprogramming is the rapid switching of the CPU between multiple processes in memory. It is commonly used to keep the CPU busy while one or more processes are doing I/O.\n\n<!--more-->\n\n2.什么是SPOOLing？读者是否认为将来的高级个人计算机会把SPOOLing作为标准功能？\n\nInput spooling is the technique of reading in jobs, for example, from cards, onto the disk, so that when the currently executing processes are finished, there will be work waiting for the CPU. Output spooling consists of first copying printable files to disk before printing them, rather than printing directly as the output is generated. Input spooling on a personal computer is not very likely, but output spooling is.\n\n3.在早期计算机中，每个字节的读写直接由CPU处理（即没有DMA）。对于多道程序设计而言这种组织方式有什么含义？\n\nThe prime reason for multiprogramming is to give the CPU something to do while waiting for I/O to complete. If there is no DMA, the CPU is fully occupied doing I/O, so there is nothing to be gained (at least in terms of CPU utilization) by multiprogramming. No matter how much I/O a program does, the CPU will be 100% busy. This is of course assume the major delay is the wait while data are copied. A CPU could do other work if the I/O were slow for other reasons (arriving on serial line, for instance).\n\n4.系列计算机的思想在20世纪60年代由IBM引入进System/360大型机。现在这种思想已经消亡还是继续活跃着？\n\nIt is still alive. For example, Intel makes Pentium I, II, and III, and 4 CPUs with a variety of different properites including spped and power consumption. All of these machines ar architecturally compatible. They differ only in price and perfermance, which is the essence of the family idea.\n\n5.缓慢采用GUI的一个原因是支持它的硬件的成本（高昂）。为了支持25行80列字符的单色文本屏幕应该需要多少视频RAM？对于1024x768像素24位色彩位图需要多少视频RAM？在1989年（$5/KB）这些RAM的成本是多少？现在它的成本是多少？\n\nA 25x80 character monochrome text screen requires a 2000-byte buffer. 2580=2000 The 1024x768 pixel 24-bit color bitmap requires 2359296 bytes. 102476824/8=2359296 In 1980 these two options would have cost $10 and $11520, respectively. 20005/1024=9.77 2359296*5/1024=11520 For current prices, check on how much RAM currently costs, probably less than $1/MB.\n\n6.在建立一个操作系统时有几个设计目的，例如资源利用、及时性，健壮性等。请列举两个可能互相矛盾的设计目的。\n\nConsider fairness and real time. Fairness requires that each process be allocated it resources in a fair way, with no process getting more than its fair share. On the other hand, real time requires that resources be allocated based on the times when different processes must complete their execution. A real time process may get a disproportionate share of the resources.\n\n7.下面哪一条指令只能在内核态中使用？\n\na)禁止所有的中断。 b)读日期-时间时钟。 c)设置日期-时间时钟。 d)改变存储器映像。\n\nacd\n\n8.考虑一个有两个CPU的系统，并且每一个CPU有两个线程（超线程）。假设有三个程序P0,P1,P2，分别以运行时间5ms,10ms,20ms开始。运行这些程序需要多少时间？假设这三个程序都是100%限于CPU，在运行时无阻塞，并且一旦设定就不改变CPU。\n\nIt may take 20, 25, 30 or 35 msec to complete the execution of these programs depending on how the operating system schedules them. If P0 and P1 are scheduled on the same CPU and P2 is scheduled on the other CPU, it will take 20 mses. If P0 and P2 are scheduled on the same CPU and P1 is scheduled on the other CPU, it will take 25 msec. If P1 and P2 are scheduled on the same CPU and P0 is scheduled on the other CPU, it will take 30 msec. If all three are on the same CPU, it will take 35 msec.\n\n9.一台计算机有一个四级流水线，每一级都花费相同的时间执行其工作，即1ns。这台机器每秒可执行多少条指令？\n\nEvery nanosecond one instruction emerges from the pipeline. This means the machine is executing 1 billion instructions per second. It does not matter at all how many stages the pipeline has. A 10-stage pipeline with 1 nsec per stage would also execute 1 billion instructions per second. All that matters is how often a finished instruction pops out the end of the pipeline.\n\n10.假设一个计算机系统有高速缓存、内存（RAM）以及磁盘，操作系统用虚拟内存。读取缓存中的一个词需要2ns，RAM需要10ns，磁盘需要10ms。如果缓存的命中率是95%，内存的是（缓存失效）99%，读取一个词的平均时间是多少？\n\nAverage access time = 0.95 × 2 nsec (word is cache)\n\n- 0.05 × 0.99 × 10 nsec (word is in RAM, but not in cache)\n- 0.05 × 0.01 × 10,000,000 nsec (word on disk only) = 5002.395 nsec = 5.002395 μsec\n\n11.一位校对人员注意到在一部将要出版的操作系统教科书手稿中有一个多次出现的拼写错误。这本书大致有700页。每页50行，一行80个字符。若把文稿用电子扫描，那么，主副本进入图1-9中的每个存储系统的层次要花费多少时间？对于内存储方式，考虑所给定的存取时间是每次一个1024字符的盘块，而对于磁带，假设给定开始时间后的存取时间和和磁盘存储时间相同。\n\nThe manuscript contains 80 X 50 X 700 = 2.8 million characters. This is, of course, impossible to fit into the registers of any currently available CPU and is too big for a 1-MB cache, but if such hardware were available, the manuscript could be scanned in 2.8 msec ( 2.8 X 10^6 X 10^-9 s) from the registers or 5.8 msec (2.8 X 10^6 X 2 X 10^-9 s) from the cache. There are approximately 2700 ( 2.8 X 10^6 % 1024 = 2735 ) 1024-byte blocks of data, so scanning from the disk would require about 27 seconds (2700 X 10 X 10^-3= 27s ), and from tape 2 minutes 7 senconds ( 100 + 27 = 127s tape不考虑读入时的文件大小？ ).\n\n12.**在用户程序进行一个系统调用，以读写磁盘文件时，该程序提供指示说明了所需要的文件，一个指向数据缓冲区的指针以及计数。然后，控制权转给操作系统，它调用相关的驱动程序。假设驱动程序启动磁盘并且直到中断发生才终止。在从磁盘读的情况下，很明显，调用者会被阻塞（因为文件中没有数据）。在向磁盘写时会发生什么情况？需要把调用者阻塞一直等到磁盘传送完成为止吗？\n\nMaybe. If the caller get control back and immediately overwrites the data, when the write finally occurs, the wrong data will be written. However, if the driver first copied the data to a private buffer before returning, then the caller can be allowed to continue immediately. Another possiblity is to allow the caller to continue and give it a singal when the buffer may be used, but this is tricky and error prone.\n\n13.什么是陷阱指令？在操作系统中解释它的用途。\n\nA trap instruction switches the execution mode of a CPU from the user mode to the kernel mode. This instruction allow a user program to invoke functions in the operation system kernel.\n\n14.陷阱和中断的主要差别是什么？\n\nA trap is caused by the program and is synchronous with it. If the program is run again and again, the trap will always occur exactly the same position in the instruction stream. An interrupt is caused by an external event and its timing is not reproducible.\n\n15.在分时系统中为什么需要进程表？在只有一个进程存在的个人计算机系统中，该进程控制整个机器直到进程结束，这种机器也需要进程表吗？\n\nThe process table is needed to store the state of a process that is currently suspended, either ready or blocked. It is not needed in a single process system because the single process is never suspended.\n\n16.说明有没有理由要在一个非空的目录中安装一个文件系统？如果要这样做，如何做？\n\nMounting a file system makes any files already in the mount point directory inaccessible, so mount points are normally empty. However, a system administrator might want to copy some of the most important files normally located in the mounted directory to the mount point so they could be found in their noraml path in an emergency when the mounted device was being repaired.\n\n17.在一个操作系统中系统调用的目的是什么？\n\nA system call allows a user process to access and execute operating system functions indside the kernel. User programs use system calls to invoke operating system services.\n\n18.对于下列系统调用，给出引起失败的条件：fork、exec以及unlink。\n\nFork can fail if there are no free slot left in the process table (and possibley if there is no memory or swap space left). Exec can fail if the file name given does not exist or is not a valid executable file. Unlink can fail if the file to be unlinked does not exist or the calling process does not have authority to unlink it.\n\n19.在count = write(fd, buffer, nbytes);调用中，能在count中而不是nbytes中返回值吗？如果能，为什么？\n\nIf the call fails, for example because fd is incorrect, it can return -1. It can also fail because the disk is full and it is not possible to write the number of bytes requested. On a correct termination, it always return nbytes.\n\n20.有一个文件，其文件描述符是fd，内含字节序列：3,1,4,1,5,9,2,6,5,3,5。有如下系统调用：lseek(fd,3,SEEK_SET); read(fd,&buffter,4); 其中lseek调用寻找文件中的字节3。在读操作完成后，buffer中的内容是什么？\n\nIt contains the bytes: 1, 5, 9, 2.\n\n21.假设一个10MB的文件存在磁盘连续扇区的同一个轨道上（轨道号：50）。磁盘的磁头臂此时位于第100号轨道。要想从磁盘上找回这个文件，需要多长时间？假设碰头臂从一个柱面移动到下一个柱面需要1ms，当文件的开始部分存储在的扇区旋转到磁头下需要5ms，并且读的速率是100MB/s。\n\n(100-50)*1ms+5ms+10MB/100MB/s=55ms+0.1X10^3ms=155ms\n\nTime to retrieve the file = 1 * 50 ms (Time to move the arm over track # 50)\n- 5 ms (Time for the first sector to rotate under the head)\n- 10/100 * 1000 ms (Read 10 MB) = 155 ms\n\n22.块特殊文件和字符特殊文件的基本差别是什么？\n\nBlock special files consist of numbered blocks, each of which can be read or written independently of all the other ones. It is possible to seek to any block and start reading and writing. This is not possible with character specical files.\n\n23.在图1-17的例子中库调用称为read，而系统调用自身称为read。这两者都有相同的名字是正常的吗？如果不是，哪一个更重要？\n\nSystem calls do not really have names, other than in a documentation sence. When the libray procedure read traps to the kernel, it puts the number of the system call in a register ro on the stack. This number is used to index into a table. There is really no name used anywhere. On the other hand, the name of the library procedure is very import, since this is what appears in the program.\n\n24.在分布式系统中，客户机-服务器模式很普遍。这种模式能用在单个计算机的系统中吗？\n\nYes it can, especially if the kernel is message-passing system.\n\n25.对于程序员而言，系统调用就像对其他库过程的调用一样。有无必要让程序员了解哪一个库过程导致了系统调用？在什么情形下，为什么？\n\nAs far as program logic is concerned it does not matter whether a call to a library procedure results in a system call. But if perfermance is an issue, if a task can be accomplished without a system call the program will run faster. Every system call involves overhead time in switching from the user context to the kernel context. Furthermore, on a multiuser system the operatiing system may schedule another process o run when a system call completes, further slowing the progress in real time of a calling process.\n\n26.图1-23说明有一批UNIX的系统调用没有与之相等价的Win32 API。对于所列出的每一个没有Win32等价的调用，若程序员要把一个UNIX程序转换到Windows下运行，会有什么后果？\n\nServal UNIX calls have no counterpart in the Win32 API: Link: a Win32 program cannot refer to a file by an alternative name or see it in more than one directory. Also, attempting to create a link is a convenient way to test fro and create a lock on a file. Mount and umount: a Windows program cannot make assumptions about standard path names because on systems with multiple disk drives the drive name part of the path may be different. Chmod: Windows uses access control lists Kill: Windows programmers cannot kill a misbehaving program that is not cooperating.\n\n27.可移植的操作系统是能从一个系统体系结构到另一个体系结构的移动不需要任何修改的操作系统。请解释为什么建立一个完全可移植性的操作系统是不可行的。描述一下在设计一个高度可移植的操作系统时你设计的高级的两层是什么样的。\n\nEvery system architecture has its own set of instructions that it can execute. Thus a Pentumn cannot excute SPARC programs and SPARC cannot execute Pentium programs. Also, different architectures differ in bus architecture used (such as VME, ISA, PCI, MCA, SBus, ..) as well as the word size of the CPU (usually 32 or 64 bit). Because of these differences in hardware, it is not feasible to build an operating system that is completely portable. A highly portable operating system will consist of two high-level layers—a machine-dependent layer and a machine independent layer. The machine-dependent layer addresses the specifics of the hardware, and must be implemented separately for every architecture. This layer provides a uniform interface on which the machine-independent layer is built. The machine-independent layer has to be implemented only onece. To be highly protable, the size of the machine-dependent layer must be kept as small as possible.\n\n28.请解释在建立基于微内核的操作系统时策略与机制的分离带来的好处。\n\nSeparation of policy and mechanism allows OS designers to implement a small number of basic primitives in the kernel. These primitives are simpified, because they are not dependent of any specific policy. They can then be used to implement more complex mechanisms and policies at the user level.\n\n29.下面是单位转换的练习：\n- a)一微年是多少秒？\n- b)微米常称为micron。那么gigamicron是多长？\n- c)1TB存储器有多少字节？\n- d)地球的质量是6000yottagram，换算成kilogram是多少？\n\nanswers:\n- a) A micro year is 10^-6 X 365 X 24 X 3600 = 31.536 sec.\n- b) 10^9*10^-6=1000m\n- c) 2^10 X 2^10 X 2^10 X 2^10 = 2^40 Bytes\n- d) 6000 X 10^24 X 10^-3 = 6 X 10^24 kilogram\n\n30.写一个各图1-19类似的shell，但是包含足够的实际可工作的代码，这样读者可以测试它。读者还可以添加某些功能，如输入输出重定向、管道以及后台作业等。\n\n31.如果读者拥有一个个人UNIX类操作系统（Linux/MINIX/FreeBSD等），可以安全地崩溃和再启动，请写一个可以试图创建一个无限制数量子进程的shell脚本并观察所发生的事。在运行实验之前 ，通过shell键入sync，在磁盘上备份好文件缓冲区以避免毁坏文件系统。（注意：在没有得到系统管理呐的允许之前，不要在分时系统上进行这一尝试。其后果将会立即发生，尝试者可能会被抓住并受到惩罚。）\n\n32.用一个类似于UNIX od或MS-DOS DEBUG的程序考察并尝试解释UNIX类系统或Windows的目录。提示：如何进行取决于OS允许做什么。一个有益的技巧是在一个有某个操作系统的软盘上创建一个目录，然后使用一个允许进行此类的访问的不同的操作系统读盘上的原始数据。","source":"_posts/modern-operating-systems-c1-exercise.md","raw":"---\ntitle: 《现代操作系统》第1章 习题\ndate: 2018-10-14 10:16:26\ntags:\n    - OS\n---\n\n1.什么是多道程序设计？\n\nMultiprogramming is the rapid switching of the CPU between multiple processes in memory. It is commonly used to keep the CPU busy while one or more processes are doing I/O.\n\n<!--more-->\n\n2.什么是SPOOLing？读者是否认为将来的高级个人计算机会把SPOOLing作为标准功能？\n\nInput spooling is the technique of reading in jobs, for example, from cards, onto the disk, so that when the currently executing processes are finished, there will be work waiting for the CPU. Output spooling consists of first copying printable files to disk before printing them, rather than printing directly as the output is generated. Input spooling on a personal computer is not very likely, but output spooling is.\n\n3.在早期计算机中，每个字节的读写直接由CPU处理（即没有DMA）。对于多道程序设计而言这种组织方式有什么含义？\n\nThe prime reason for multiprogramming is to give the CPU something to do while waiting for I/O to complete. If there is no DMA, the CPU is fully occupied doing I/O, so there is nothing to be gained (at least in terms of CPU utilization) by multiprogramming. No matter how much I/O a program does, the CPU will be 100% busy. This is of course assume the major delay is the wait while data are copied. A CPU could do other work if the I/O were slow for other reasons (arriving on serial line, for instance).\n\n4.系列计算机的思想在20世纪60年代由IBM引入进System/360大型机。现在这种思想已经消亡还是继续活跃着？\n\nIt is still alive. For example, Intel makes Pentium I, II, and III, and 4 CPUs with a variety of different properites including spped and power consumption. All of these machines ar architecturally compatible. They differ only in price and perfermance, which is the essence of the family idea.\n\n5.缓慢采用GUI的一个原因是支持它的硬件的成本（高昂）。为了支持25行80列字符的单色文本屏幕应该需要多少视频RAM？对于1024x768像素24位色彩位图需要多少视频RAM？在1989年（$5/KB）这些RAM的成本是多少？现在它的成本是多少？\n\nA 25x80 character monochrome text screen requires a 2000-byte buffer. 2580=2000 The 1024x768 pixel 24-bit color bitmap requires 2359296 bytes. 102476824/8=2359296 In 1980 these two options would have cost $10 and $11520, respectively. 20005/1024=9.77 2359296*5/1024=11520 For current prices, check on how much RAM currently costs, probably less than $1/MB.\n\n6.在建立一个操作系统时有几个设计目的，例如资源利用、及时性，健壮性等。请列举两个可能互相矛盾的设计目的。\n\nConsider fairness and real time. Fairness requires that each process be allocated it resources in a fair way, with no process getting more than its fair share. On the other hand, real time requires that resources be allocated based on the times when different processes must complete their execution. A real time process may get a disproportionate share of the resources.\n\n7.下面哪一条指令只能在内核态中使用？\n\na)禁止所有的中断。 b)读日期-时间时钟。 c)设置日期-时间时钟。 d)改变存储器映像。\n\nacd\n\n8.考虑一个有两个CPU的系统，并且每一个CPU有两个线程（超线程）。假设有三个程序P0,P1,P2，分别以运行时间5ms,10ms,20ms开始。运行这些程序需要多少时间？假设这三个程序都是100%限于CPU，在运行时无阻塞，并且一旦设定就不改变CPU。\n\nIt may take 20, 25, 30 or 35 msec to complete the execution of these programs depending on how the operating system schedules them. If P0 and P1 are scheduled on the same CPU and P2 is scheduled on the other CPU, it will take 20 mses. If P0 and P2 are scheduled on the same CPU and P1 is scheduled on the other CPU, it will take 25 msec. If P1 and P2 are scheduled on the same CPU and P0 is scheduled on the other CPU, it will take 30 msec. If all three are on the same CPU, it will take 35 msec.\n\n9.一台计算机有一个四级流水线，每一级都花费相同的时间执行其工作，即1ns。这台机器每秒可执行多少条指令？\n\nEvery nanosecond one instruction emerges from the pipeline. This means the machine is executing 1 billion instructions per second. It does not matter at all how many stages the pipeline has. A 10-stage pipeline with 1 nsec per stage would also execute 1 billion instructions per second. All that matters is how often a finished instruction pops out the end of the pipeline.\n\n10.假设一个计算机系统有高速缓存、内存（RAM）以及磁盘，操作系统用虚拟内存。读取缓存中的一个词需要2ns，RAM需要10ns，磁盘需要10ms。如果缓存的命中率是95%，内存的是（缓存失效）99%，读取一个词的平均时间是多少？\n\nAverage access time = 0.95 × 2 nsec (word is cache)\n\n- 0.05 × 0.99 × 10 nsec (word is in RAM, but not in cache)\n- 0.05 × 0.01 × 10,000,000 nsec (word on disk only) = 5002.395 nsec = 5.002395 μsec\n\n11.一位校对人员注意到在一部将要出版的操作系统教科书手稿中有一个多次出现的拼写错误。这本书大致有700页。每页50行，一行80个字符。若把文稿用电子扫描，那么，主副本进入图1-9中的每个存储系统的层次要花费多少时间？对于内存储方式，考虑所给定的存取时间是每次一个1024字符的盘块，而对于磁带，假设给定开始时间后的存取时间和和磁盘存储时间相同。\n\nThe manuscript contains 80 X 50 X 700 = 2.8 million characters. This is, of course, impossible to fit into the registers of any currently available CPU and is too big for a 1-MB cache, but if such hardware were available, the manuscript could be scanned in 2.8 msec ( 2.8 X 10^6 X 10^-9 s) from the registers or 5.8 msec (2.8 X 10^6 X 2 X 10^-9 s) from the cache. There are approximately 2700 ( 2.8 X 10^6 % 1024 = 2735 ) 1024-byte blocks of data, so scanning from the disk would require about 27 seconds (2700 X 10 X 10^-3= 27s ), and from tape 2 minutes 7 senconds ( 100 + 27 = 127s tape不考虑读入时的文件大小？ ).\n\n12.**在用户程序进行一个系统调用，以读写磁盘文件时，该程序提供指示说明了所需要的文件，一个指向数据缓冲区的指针以及计数。然后，控制权转给操作系统，它调用相关的驱动程序。假设驱动程序启动磁盘并且直到中断发生才终止。在从磁盘读的情况下，很明显，调用者会被阻塞（因为文件中没有数据）。在向磁盘写时会发生什么情况？需要把调用者阻塞一直等到磁盘传送完成为止吗？\n\nMaybe. If the caller get control back and immediately overwrites the data, when the write finally occurs, the wrong data will be written. However, if the driver first copied the data to a private buffer before returning, then the caller can be allowed to continue immediately. Another possiblity is to allow the caller to continue and give it a singal when the buffer may be used, but this is tricky and error prone.\n\n13.什么是陷阱指令？在操作系统中解释它的用途。\n\nA trap instruction switches the execution mode of a CPU from the user mode to the kernel mode. This instruction allow a user program to invoke functions in the operation system kernel.\n\n14.陷阱和中断的主要差别是什么？\n\nA trap is caused by the program and is synchronous with it. If the program is run again and again, the trap will always occur exactly the same position in the instruction stream. An interrupt is caused by an external event and its timing is not reproducible.\n\n15.在分时系统中为什么需要进程表？在只有一个进程存在的个人计算机系统中，该进程控制整个机器直到进程结束，这种机器也需要进程表吗？\n\nThe process table is needed to store the state of a process that is currently suspended, either ready or blocked. It is not needed in a single process system because the single process is never suspended.\n\n16.说明有没有理由要在一个非空的目录中安装一个文件系统？如果要这样做，如何做？\n\nMounting a file system makes any files already in the mount point directory inaccessible, so mount points are normally empty. However, a system administrator might want to copy some of the most important files normally located in the mounted directory to the mount point so they could be found in their noraml path in an emergency when the mounted device was being repaired.\n\n17.在一个操作系统中系统调用的目的是什么？\n\nA system call allows a user process to access and execute operating system functions indside the kernel. User programs use system calls to invoke operating system services.\n\n18.对于下列系统调用，给出引起失败的条件：fork、exec以及unlink。\n\nFork can fail if there are no free slot left in the process table (and possibley if there is no memory or swap space left). Exec can fail if the file name given does not exist or is not a valid executable file. Unlink can fail if the file to be unlinked does not exist or the calling process does not have authority to unlink it.\n\n19.在count = write(fd, buffer, nbytes);调用中，能在count中而不是nbytes中返回值吗？如果能，为什么？\n\nIf the call fails, for example because fd is incorrect, it can return -1. It can also fail because the disk is full and it is not possible to write the number of bytes requested. On a correct termination, it always return nbytes.\n\n20.有一个文件，其文件描述符是fd，内含字节序列：3,1,4,1,5,9,2,6,5,3,5。有如下系统调用：lseek(fd,3,SEEK_SET); read(fd,&buffter,4); 其中lseek调用寻找文件中的字节3。在读操作完成后，buffer中的内容是什么？\n\nIt contains the bytes: 1, 5, 9, 2.\n\n21.假设一个10MB的文件存在磁盘连续扇区的同一个轨道上（轨道号：50）。磁盘的磁头臂此时位于第100号轨道。要想从磁盘上找回这个文件，需要多长时间？假设碰头臂从一个柱面移动到下一个柱面需要1ms，当文件的开始部分存储在的扇区旋转到磁头下需要5ms，并且读的速率是100MB/s。\n\n(100-50)*1ms+5ms+10MB/100MB/s=55ms+0.1X10^3ms=155ms\n\nTime to retrieve the file = 1 * 50 ms (Time to move the arm over track # 50)\n- 5 ms (Time for the first sector to rotate under the head)\n- 10/100 * 1000 ms (Read 10 MB) = 155 ms\n\n22.块特殊文件和字符特殊文件的基本差别是什么？\n\nBlock special files consist of numbered blocks, each of which can be read or written independently of all the other ones. It is possible to seek to any block and start reading and writing. This is not possible with character specical files.\n\n23.在图1-17的例子中库调用称为read，而系统调用自身称为read。这两者都有相同的名字是正常的吗？如果不是，哪一个更重要？\n\nSystem calls do not really have names, other than in a documentation sence. When the libray procedure read traps to the kernel, it puts the number of the system call in a register ro on the stack. This number is used to index into a table. There is really no name used anywhere. On the other hand, the name of the library procedure is very import, since this is what appears in the program.\n\n24.在分布式系统中，客户机-服务器模式很普遍。这种模式能用在单个计算机的系统中吗？\n\nYes it can, especially if the kernel is message-passing system.\n\n25.对于程序员而言，系统调用就像对其他库过程的调用一样。有无必要让程序员了解哪一个库过程导致了系统调用？在什么情形下，为什么？\n\nAs far as program logic is concerned it does not matter whether a call to a library procedure results in a system call. But if perfermance is an issue, if a task can be accomplished without a system call the program will run faster. Every system call involves overhead time in switching from the user context to the kernel context. Furthermore, on a multiuser system the operatiing system may schedule another process o run when a system call completes, further slowing the progress in real time of a calling process.\n\n26.图1-23说明有一批UNIX的系统调用没有与之相等价的Win32 API。对于所列出的每一个没有Win32等价的调用，若程序员要把一个UNIX程序转换到Windows下运行，会有什么后果？\n\nServal UNIX calls have no counterpart in the Win32 API: Link: a Win32 program cannot refer to a file by an alternative name or see it in more than one directory. Also, attempting to create a link is a convenient way to test fro and create a lock on a file. Mount and umount: a Windows program cannot make assumptions about standard path names because on systems with multiple disk drives the drive name part of the path may be different. Chmod: Windows uses access control lists Kill: Windows programmers cannot kill a misbehaving program that is not cooperating.\n\n27.可移植的操作系统是能从一个系统体系结构到另一个体系结构的移动不需要任何修改的操作系统。请解释为什么建立一个完全可移植性的操作系统是不可行的。描述一下在设计一个高度可移植的操作系统时你设计的高级的两层是什么样的。\n\nEvery system architecture has its own set of instructions that it can execute. Thus a Pentumn cannot excute SPARC programs and SPARC cannot execute Pentium programs. Also, different architectures differ in bus architecture used (such as VME, ISA, PCI, MCA, SBus, ..) as well as the word size of the CPU (usually 32 or 64 bit). Because of these differences in hardware, it is not feasible to build an operating system that is completely portable. A highly portable operating system will consist of two high-level layers—a machine-dependent layer and a machine independent layer. The machine-dependent layer addresses the specifics of the hardware, and must be implemented separately for every architecture. This layer provides a uniform interface on which the machine-independent layer is built. The machine-independent layer has to be implemented only onece. To be highly protable, the size of the machine-dependent layer must be kept as small as possible.\n\n28.请解释在建立基于微内核的操作系统时策略与机制的分离带来的好处。\n\nSeparation of policy and mechanism allows OS designers to implement a small number of basic primitives in the kernel. These primitives are simpified, because they are not dependent of any specific policy. They can then be used to implement more complex mechanisms and policies at the user level.\n\n29.下面是单位转换的练习：\n- a)一微年是多少秒？\n- b)微米常称为micron。那么gigamicron是多长？\n- c)1TB存储器有多少字节？\n- d)地球的质量是6000yottagram，换算成kilogram是多少？\n\nanswers:\n- a) A micro year is 10^-6 X 365 X 24 X 3600 = 31.536 sec.\n- b) 10^9*10^-6=1000m\n- c) 2^10 X 2^10 X 2^10 X 2^10 = 2^40 Bytes\n- d) 6000 X 10^24 X 10^-3 = 6 X 10^24 kilogram\n\n30.写一个各图1-19类似的shell，但是包含足够的实际可工作的代码，这样读者可以测试它。读者还可以添加某些功能，如输入输出重定向、管道以及后台作业等。\n\n31.如果读者拥有一个个人UNIX类操作系统（Linux/MINIX/FreeBSD等），可以安全地崩溃和再启动，请写一个可以试图创建一个无限制数量子进程的shell脚本并观察所发生的事。在运行实验之前 ，通过shell键入sync，在磁盘上备份好文件缓冲区以避免毁坏文件系统。（注意：在没有得到系统管理呐的允许之前，不要在分时系统上进行这一尝试。其后果将会立即发生，尝试者可能会被抓住并受到惩罚。）\n\n32.用一个类似于UNIX od或MS-DOS DEBUG的程序考察并尝试解释UNIX类系统或Windows的目录。提示：如何进行取决于OS允许做什么。一个有益的技巧是在一个有某个操作系统的软盘上创建一个目录，然后使用一个允许进行此类的访问的不同的操作系统读盘上的原始数据。","slug":"modern-operating-systems-c1-exercise","published":1,"updated":"2018-10-14T02:20:59.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpt0015slm408464oar","content":"<p>1.什么是多道程序设计？</p>\n<p>Multiprogramming is the rapid switching of the CPU between multiple processes in memory. It is commonly used to keep the CPU busy while one or more processes are doing I/O.</p>\n<a id=\"more\"></a>\n<p>2.什么是SPOOLing？读者是否认为将来的高级个人计算机会把SPOOLing作为标准功能？</p>\n<p>Input spooling is the technique of reading in jobs, for example, from cards, onto the disk, so that when the currently executing processes are finished, there will be work waiting for the CPU. Output spooling consists of first copying printable files to disk before printing them, rather than printing directly as the output is generated. Input spooling on a personal computer is not very likely, but output spooling is.</p>\n<p>3.在早期计算机中，每个字节的读写直接由CPU处理（即没有DMA）。对于多道程序设计而言这种组织方式有什么含义？</p>\n<p>The prime reason for multiprogramming is to give the CPU something to do while waiting for I/O to complete. If there is no DMA, the CPU is fully occupied doing I/O, so there is nothing to be gained (at least in terms of CPU utilization) by multiprogramming. No matter how much I/O a program does, the CPU will be 100% busy. This is of course assume the major delay is the wait while data are copied. A CPU could do other work if the I/O were slow for other reasons (arriving on serial line, for instance).</p>\n<p>4.系列计算机的思想在20世纪60年代由IBM引入进System/360大型机。现在这种思想已经消亡还是继续活跃着？</p>\n<p>It is still alive. For example, Intel makes Pentium I, II, and III, and 4 CPUs with a variety of different properites including spped and power consumption. All of these machines ar architecturally compatible. They differ only in price and perfermance, which is the essence of the family idea.</p>\n<p>5.缓慢采用GUI的一个原因是支持它的硬件的成本（高昂）。为了支持25行80列字符的单色文本屏幕应该需要多少视频RAM？对于1024x768像素24位色彩位图需要多少视频RAM？在1989年（$5/KB）这些RAM的成本是多少？现在它的成本是多少？</p>\n<p>A 25x80 character monochrome text screen requires a 2000-byte buffer. 2580=2000 The 1024x768 pixel 24-bit color bitmap requires 2359296 bytes. 102476824/8=2359296 In 1980 these two options would have cost $10 and $11520, respectively. 20005/1024=9.77 2359296*5/1024=11520 For current prices, check on how much RAM currently costs, probably less than $1/MB.</p>\n<p>6.在建立一个操作系统时有几个设计目的，例如资源利用、及时性，健壮性等。请列举两个可能互相矛盾的设计目的。</p>\n<p>Consider fairness and real time. Fairness requires that each process be allocated it resources in a fair way, with no process getting more than its fair share. On the other hand, real time requires that resources be allocated based on the times when different processes must complete their execution. A real time process may get a disproportionate share of the resources.</p>\n<p>7.下面哪一条指令只能在内核态中使用？</p>\n<p>a)禁止所有的中断。 b)读日期-时间时钟。 c)设置日期-时间时钟。 d)改变存储器映像。</p>\n<p>acd</p>\n<p>8.考虑一个有两个CPU的系统，并且每一个CPU有两个线程（超线程）。假设有三个程序P0,P1,P2，分别以运行时间5ms,10ms,20ms开始。运行这些程序需要多少时间？假设这三个程序都是100%限于CPU，在运行时无阻塞，并且一旦设定就不改变CPU。</p>\n<p>It may take 20, 25, 30 or 35 msec to complete the execution of these programs depending on how the operating system schedules them. If P0 and P1 are scheduled on the same CPU and P2 is scheduled on the other CPU, it will take 20 mses. If P0 and P2 are scheduled on the same CPU and P1 is scheduled on the other CPU, it will take 25 msec. If P1 and P2 are scheduled on the same CPU and P0 is scheduled on the other CPU, it will take 30 msec. If all three are on the same CPU, it will take 35 msec.</p>\n<p>9.一台计算机有一个四级流水线，每一级都花费相同的时间执行其工作，即1ns。这台机器每秒可执行多少条指令？</p>\n<p>Every nanosecond one instruction emerges from the pipeline. This means the machine is executing 1 billion instructions per second. It does not matter at all how many stages the pipeline has. A 10-stage pipeline with 1 nsec per stage would also execute 1 billion instructions per second. All that matters is how often a finished instruction pops out the end of the pipeline.</p>\n<p>10.假设一个计算机系统有高速缓存、内存（RAM）以及磁盘，操作系统用虚拟内存。读取缓存中的一个词需要2ns，RAM需要10ns，磁盘需要10ms。如果缓存的命中率是95%，内存的是（缓存失效）99%，读取一个词的平均时间是多少？</p>\n<p>Average access time = 0.95 × 2 nsec (word is cache)</p>\n<ul>\n<li>0.05 × 0.99 × 10 nsec (word is in RAM, but not in cache)</li>\n<li>0.05 × 0.01 × 10,000,000 nsec (word on disk only) = 5002.395 nsec = 5.002395 μsec</li>\n</ul>\n<p>11.一位校对人员注意到在一部将要出版的操作系统教科书手稿中有一个多次出现的拼写错误。这本书大致有700页。每页50行，一行80个字符。若把文稿用电子扫描，那么，主副本进入图1-9中的每个存储系统的层次要花费多少时间？对于内存储方式，考虑所给定的存取时间是每次一个1024字符的盘块，而对于磁带，假设给定开始时间后的存取时间和和磁盘存储时间相同。</p>\n<p>The manuscript contains 80 X 50 X 700 = 2.8 million characters. This is, of course, impossible to fit into the registers of any currently available CPU and is too big for a 1-MB cache, but if such hardware were available, the manuscript could be scanned in 2.8 msec ( 2.8 X 10^6 X 10^-9 s) from the registers or 5.8 msec (2.8 X 10^6 X 2 X 10^-9 s) from the cache. There are approximately 2700 ( 2.8 X 10^6 % 1024 = 2735 ) 1024-byte blocks of data, so scanning from the disk would require about 27 seconds (2700 X 10 X 10^-3= 27s ), and from tape 2 minutes 7 senconds ( 100 + 27 = 127s tape不考虑读入时的文件大小？ ).</p>\n<p>12.**在用户程序进行一个系统调用，以读写磁盘文件时，该程序提供指示说明了所需要的文件，一个指向数据缓冲区的指针以及计数。然后，控制权转给操作系统，它调用相关的驱动程序。假设驱动程序启动磁盘并且直到中断发生才终止。在从磁盘读的情况下，很明显，调用者会被阻塞（因为文件中没有数据）。在向磁盘写时会发生什么情况？需要把调用者阻塞一直等到磁盘传送完成为止吗？</p>\n<p>Maybe. If the caller get control back and immediately overwrites the data, when the write finally occurs, the wrong data will be written. However, if the driver first copied the data to a private buffer before returning, then the caller can be allowed to continue immediately. Another possiblity is to allow the caller to continue and give it a singal when the buffer may be used, but this is tricky and error prone.</p>\n<p>13.什么是陷阱指令？在操作系统中解释它的用途。</p>\n<p>A trap instruction switches the execution mode of a CPU from the user mode to the kernel mode. This instruction allow a user program to invoke functions in the operation system kernel.</p>\n<p>14.陷阱和中断的主要差别是什么？</p>\n<p>A trap is caused by the program and is synchronous with it. If the program is run again and again, the trap will always occur exactly the same position in the instruction stream. An interrupt is caused by an external event and its timing is not reproducible.</p>\n<p>15.在分时系统中为什么需要进程表？在只有一个进程存在的个人计算机系统中，该进程控制整个机器直到进程结束，这种机器也需要进程表吗？</p>\n<p>The process table is needed to store the state of a process that is currently suspended, either ready or blocked. It is not needed in a single process system because the single process is never suspended.</p>\n<p>16.说明有没有理由要在一个非空的目录中安装一个文件系统？如果要这样做，如何做？</p>\n<p>Mounting a file system makes any files already in the mount point directory inaccessible, so mount points are normally empty. However, a system administrator might want to copy some of the most important files normally located in the mounted directory to the mount point so they could be found in their noraml path in an emergency when the mounted device was being repaired.</p>\n<p>17.在一个操作系统中系统调用的目的是什么？</p>\n<p>A system call allows a user process to access and execute operating system functions indside the kernel. User programs use system calls to invoke operating system services.</p>\n<p>18.对于下列系统调用，给出引起失败的条件：fork、exec以及unlink。</p>\n<p>Fork can fail if there are no free slot left in the process table (and possibley if there is no memory or swap space left). Exec can fail if the file name given does not exist or is not a valid executable file. Unlink can fail if the file to be unlinked does not exist or the calling process does not have authority to unlink it.</p>\n<p>19.在count = write(fd, buffer, nbytes);调用中，能在count中而不是nbytes中返回值吗？如果能，为什么？</p>\n<p>If the call fails, for example because fd is incorrect, it can return -1. It can also fail because the disk is full and it is not possible to write the number of bytes requested. On a correct termination, it always return nbytes.</p>\n<p>20.有一个文件，其文件描述符是fd，内含字节序列：3,1,4,1,5,9,2,6,5,3,5。有如下系统调用：lseek(fd,3,SEEK_SET); read(fd,&amp;buffter,4); 其中lseek调用寻找文件中的字节3。在读操作完成后，buffer中的内容是什么？</p>\n<p>It contains the bytes: 1, 5, 9, 2.</p>\n<p>21.假设一个10MB的文件存在磁盘连续扇区的同一个轨道上（轨道号：50）。磁盘的磁头臂此时位于第100号轨道。要想从磁盘上找回这个文件，需要多长时间？假设碰头臂从一个柱面移动到下一个柱面需要1ms，当文件的开始部分存储在的扇区旋转到磁头下需要5ms，并且读的速率是100MB/s。</p>\n<p>(100-50)*1ms+5ms+10MB/100MB/s=55ms+0.1X10^3ms=155ms</p>\n<p>Time to retrieve the file = 1 * 50 ms (Time to move the arm over track # 50)</p>\n<ul>\n<li>5 ms (Time for the first sector to rotate under the head)</li>\n<li>10/100 * 1000 ms (Read 10 MB) = 155 ms</li>\n</ul>\n<p>22.块特殊文件和字符特殊文件的基本差别是什么？</p>\n<p>Block special files consist of numbered blocks, each of which can be read or written independently of all the other ones. It is possible to seek to any block and start reading and writing. This is not possible with character specical files.</p>\n<p>23.在图1-17的例子中库调用称为read，而系统调用自身称为read。这两者都有相同的名字是正常的吗？如果不是，哪一个更重要？</p>\n<p>System calls do not really have names, other than in a documentation sence. When the libray procedure read traps to the kernel, it puts the number of the system call in a register ro on the stack. This number is used to index into a table. There is really no name used anywhere. On the other hand, the name of the library procedure is very import, since this is what appears in the program.</p>\n<p>24.在分布式系统中，客户机-服务器模式很普遍。这种模式能用在单个计算机的系统中吗？</p>\n<p>Yes it can, especially if the kernel is message-passing system.</p>\n<p>25.对于程序员而言，系统调用就像对其他库过程的调用一样。有无必要让程序员了解哪一个库过程导致了系统调用？在什么情形下，为什么？</p>\n<p>As far as program logic is concerned it does not matter whether a call to a library procedure results in a system call. But if perfermance is an issue, if a task can be accomplished without a system call the program will run faster. Every system call involves overhead time in switching from the user context to the kernel context. Furthermore, on a multiuser system the operatiing system may schedule another process o run when a system call completes, further slowing the progress in real time of a calling process.</p>\n<p>26.图1-23说明有一批UNIX的系统调用没有与之相等价的Win32 API。对于所列出的每一个没有Win32等价的调用，若程序员要把一个UNIX程序转换到Windows下运行，会有什么后果？</p>\n<p>Serval UNIX calls have no counterpart in the Win32 API: Link: a Win32 program cannot refer to a file by an alternative name or see it in more than one directory. Also, attempting to create a link is a convenient way to test fro and create a lock on a file. Mount and umount: a Windows program cannot make assumptions about standard path names because on systems with multiple disk drives the drive name part of the path may be different. Chmod: Windows uses access control lists Kill: Windows programmers cannot kill a misbehaving program that is not cooperating.</p>\n<p>27.可移植的操作系统是能从一个系统体系结构到另一个体系结构的移动不需要任何修改的操作系统。请解释为什么建立一个完全可移植性的操作系统是不可行的。描述一下在设计一个高度可移植的操作系统时你设计的高级的两层是什么样的。</p>\n<p>Every system architecture has its own set of instructions that it can execute. Thus a Pentumn cannot excute SPARC programs and SPARC cannot execute Pentium programs. Also, different architectures differ in bus architecture used (such as VME, ISA, PCI, MCA, SBus, ..) as well as the word size of the CPU (usually 32 or 64 bit). Because of these differences in hardware, it is not feasible to build an operating system that is completely portable. A highly portable operating system will consist of two high-level layers—a machine-dependent layer and a machine independent layer. The machine-dependent layer addresses the specifics of the hardware, and must be implemented separately for every architecture. This layer provides a uniform interface on which the machine-independent layer is built. The machine-independent layer has to be implemented only onece. To be highly protable, the size of the machine-dependent layer must be kept as small as possible.</p>\n<p>28.请解释在建立基于微内核的操作系统时策略与机制的分离带来的好处。</p>\n<p>Separation of policy and mechanism allows OS designers to implement a small number of basic primitives in the kernel. These primitives are simpified, because they are not dependent of any specific policy. They can then be used to implement more complex mechanisms and policies at the user level.</p>\n<p>29.下面是单位转换的练习：</p>\n<ul>\n<li>a)一微年是多少秒？</li>\n<li>b)微米常称为micron。那么gigamicron是多长？</li>\n<li>c)1TB存储器有多少字节？</li>\n<li>d)地球的质量是6000yottagram，换算成kilogram是多少？</li>\n</ul>\n<p>answers:</p>\n<ul>\n<li>a) A micro year is 10^-6 X 365 X 24 X 3600 = 31.536 sec.</li>\n<li>b) 10^9*10^-6=1000m</li>\n<li>c) 2^10 X 2^10 X 2^10 X 2^10 = 2^40 Bytes</li>\n<li>d) 6000 X 10^24 X 10^-3 = 6 X 10^24 kilogram</li>\n</ul>\n<p>30.写一个各图1-19类似的shell，但是包含足够的实际可工作的代码，这样读者可以测试它。读者还可以添加某些功能，如输入输出重定向、管道以及后台作业等。</p>\n<p>31.如果读者拥有一个个人UNIX类操作系统（Linux/MINIX/FreeBSD等），可以安全地崩溃和再启动，请写一个可以试图创建一个无限制数量子进程的shell脚本并观察所发生的事。在运行实验之前 ，通过shell键入sync，在磁盘上备份好文件缓冲区以避免毁坏文件系统。（注意：在没有得到系统管理呐的允许之前，不要在分时系统上进行这一尝试。其后果将会立即发生，尝试者可能会被抓住并受到惩罚。）</p>\n<p>32.用一个类似于UNIX od或MS-DOS DEBUG的程序考察并尝试解释UNIX类系统或Windows的目录。提示：如何进行取决于OS允许做什么。一个有益的技巧是在一个有某个操作系统的软盘上创建一个目录，然后使用一个允许进行此类的访问的不同的操作系统读盘上的原始数据。</p>\n","site":{"data":{}},"excerpt":"<p>1.什么是多道程序设计？</p>\n<p>Multiprogramming is the rapid switching of the CPU between multiple processes in memory. It is commonly used to keep the CPU busy while one or more processes are doing I/O.</p>","more":"<p>2.什么是SPOOLing？读者是否认为将来的高级个人计算机会把SPOOLing作为标准功能？</p>\n<p>Input spooling is the technique of reading in jobs, for example, from cards, onto the disk, so that when the currently executing processes are finished, there will be work waiting for the CPU. Output spooling consists of first copying printable files to disk before printing them, rather than printing directly as the output is generated. Input spooling on a personal computer is not very likely, but output spooling is.</p>\n<p>3.在早期计算机中，每个字节的读写直接由CPU处理（即没有DMA）。对于多道程序设计而言这种组织方式有什么含义？</p>\n<p>The prime reason for multiprogramming is to give the CPU something to do while waiting for I/O to complete. If there is no DMA, the CPU is fully occupied doing I/O, so there is nothing to be gained (at least in terms of CPU utilization) by multiprogramming. No matter how much I/O a program does, the CPU will be 100% busy. This is of course assume the major delay is the wait while data are copied. A CPU could do other work if the I/O were slow for other reasons (arriving on serial line, for instance).</p>\n<p>4.系列计算机的思想在20世纪60年代由IBM引入进System/360大型机。现在这种思想已经消亡还是继续活跃着？</p>\n<p>It is still alive. For example, Intel makes Pentium I, II, and III, and 4 CPUs with a variety of different properites including spped and power consumption. All of these machines ar architecturally compatible. They differ only in price and perfermance, which is the essence of the family idea.</p>\n<p>5.缓慢采用GUI的一个原因是支持它的硬件的成本（高昂）。为了支持25行80列字符的单色文本屏幕应该需要多少视频RAM？对于1024x768像素24位色彩位图需要多少视频RAM？在1989年（$5/KB）这些RAM的成本是多少？现在它的成本是多少？</p>\n<p>A 25x80 character monochrome text screen requires a 2000-byte buffer. 2580=2000 The 1024x768 pixel 24-bit color bitmap requires 2359296 bytes. 102476824/8=2359296 In 1980 these two options would have cost $10 and $11520, respectively. 20005/1024=9.77 2359296*5/1024=11520 For current prices, check on how much RAM currently costs, probably less than $1/MB.</p>\n<p>6.在建立一个操作系统时有几个设计目的，例如资源利用、及时性，健壮性等。请列举两个可能互相矛盾的设计目的。</p>\n<p>Consider fairness and real time. Fairness requires that each process be allocated it resources in a fair way, with no process getting more than its fair share. On the other hand, real time requires that resources be allocated based on the times when different processes must complete their execution. A real time process may get a disproportionate share of the resources.</p>\n<p>7.下面哪一条指令只能在内核态中使用？</p>\n<p>a)禁止所有的中断。 b)读日期-时间时钟。 c)设置日期-时间时钟。 d)改变存储器映像。</p>\n<p>acd</p>\n<p>8.考虑一个有两个CPU的系统，并且每一个CPU有两个线程（超线程）。假设有三个程序P0,P1,P2，分别以运行时间5ms,10ms,20ms开始。运行这些程序需要多少时间？假设这三个程序都是100%限于CPU，在运行时无阻塞，并且一旦设定就不改变CPU。</p>\n<p>It may take 20, 25, 30 or 35 msec to complete the execution of these programs depending on how the operating system schedules them. If P0 and P1 are scheduled on the same CPU and P2 is scheduled on the other CPU, it will take 20 mses. If P0 and P2 are scheduled on the same CPU and P1 is scheduled on the other CPU, it will take 25 msec. If P1 and P2 are scheduled on the same CPU and P0 is scheduled on the other CPU, it will take 30 msec. If all three are on the same CPU, it will take 35 msec.</p>\n<p>9.一台计算机有一个四级流水线，每一级都花费相同的时间执行其工作，即1ns。这台机器每秒可执行多少条指令？</p>\n<p>Every nanosecond one instruction emerges from the pipeline. This means the machine is executing 1 billion instructions per second. It does not matter at all how many stages the pipeline has. A 10-stage pipeline with 1 nsec per stage would also execute 1 billion instructions per second. All that matters is how often a finished instruction pops out the end of the pipeline.</p>\n<p>10.假设一个计算机系统有高速缓存、内存（RAM）以及磁盘，操作系统用虚拟内存。读取缓存中的一个词需要2ns，RAM需要10ns，磁盘需要10ms。如果缓存的命中率是95%，内存的是（缓存失效）99%，读取一个词的平均时间是多少？</p>\n<p>Average access time = 0.95 × 2 nsec (word is cache)</p>\n<ul>\n<li>0.05 × 0.99 × 10 nsec (word is in RAM, but not in cache)</li>\n<li>0.05 × 0.01 × 10,000,000 nsec (word on disk only) = 5002.395 nsec = 5.002395 μsec</li>\n</ul>\n<p>11.一位校对人员注意到在一部将要出版的操作系统教科书手稿中有一个多次出现的拼写错误。这本书大致有700页。每页50行，一行80个字符。若把文稿用电子扫描，那么，主副本进入图1-9中的每个存储系统的层次要花费多少时间？对于内存储方式，考虑所给定的存取时间是每次一个1024字符的盘块，而对于磁带，假设给定开始时间后的存取时间和和磁盘存储时间相同。</p>\n<p>The manuscript contains 80 X 50 X 700 = 2.8 million characters. This is, of course, impossible to fit into the registers of any currently available CPU and is too big for a 1-MB cache, but if such hardware were available, the manuscript could be scanned in 2.8 msec ( 2.8 X 10^6 X 10^-9 s) from the registers or 5.8 msec (2.8 X 10^6 X 2 X 10^-9 s) from the cache. There are approximately 2700 ( 2.8 X 10^6 % 1024 = 2735 ) 1024-byte blocks of data, so scanning from the disk would require about 27 seconds (2700 X 10 X 10^-3= 27s ), and from tape 2 minutes 7 senconds ( 100 + 27 = 127s tape不考虑读入时的文件大小？ ).</p>\n<p>12.**在用户程序进行一个系统调用，以读写磁盘文件时，该程序提供指示说明了所需要的文件，一个指向数据缓冲区的指针以及计数。然后，控制权转给操作系统，它调用相关的驱动程序。假设驱动程序启动磁盘并且直到中断发生才终止。在从磁盘读的情况下，很明显，调用者会被阻塞（因为文件中没有数据）。在向磁盘写时会发生什么情况？需要把调用者阻塞一直等到磁盘传送完成为止吗？</p>\n<p>Maybe. If the caller get control back and immediately overwrites the data, when the write finally occurs, the wrong data will be written. However, if the driver first copied the data to a private buffer before returning, then the caller can be allowed to continue immediately. Another possiblity is to allow the caller to continue and give it a singal when the buffer may be used, but this is tricky and error prone.</p>\n<p>13.什么是陷阱指令？在操作系统中解释它的用途。</p>\n<p>A trap instruction switches the execution mode of a CPU from the user mode to the kernel mode. This instruction allow a user program to invoke functions in the operation system kernel.</p>\n<p>14.陷阱和中断的主要差别是什么？</p>\n<p>A trap is caused by the program and is synchronous with it. If the program is run again and again, the trap will always occur exactly the same position in the instruction stream. An interrupt is caused by an external event and its timing is not reproducible.</p>\n<p>15.在分时系统中为什么需要进程表？在只有一个进程存在的个人计算机系统中，该进程控制整个机器直到进程结束，这种机器也需要进程表吗？</p>\n<p>The process table is needed to store the state of a process that is currently suspended, either ready or blocked. It is not needed in a single process system because the single process is never suspended.</p>\n<p>16.说明有没有理由要在一个非空的目录中安装一个文件系统？如果要这样做，如何做？</p>\n<p>Mounting a file system makes any files already in the mount point directory inaccessible, so mount points are normally empty. However, a system administrator might want to copy some of the most important files normally located in the mounted directory to the mount point so they could be found in their noraml path in an emergency when the mounted device was being repaired.</p>\n<p>17.在一个操作系统中系统调用的目的是什么？</p>\n<p>A system call allows a user process to access and execute operating system functions indside the kernel. User programs use system calls to invoke operating system services.</p>\n<p>18.对于下列系统调用，给出引起失败的条件：fork、exec以及unlink。</p>\n<p>Fork can fail if there are no free slot left in the process table (and possibley if there is no memory or swap space left). Exec can fail if the file name given does not exist or is not a valid executable file. Unlink can fail if the file to be unlinked does not exist or the calling process does not have authority to unlink it.</p>\n<p>19.在count = write(fd, buffer, nbytes);调用中，能在count中而不是nbytes中返回值吗？如果能，为什么？</p>\n<p>If the call fails, for example because fd is incorrect, it can return -1. It can also fail because the disk is full and it is not possible to write the number of bytes requested. On a correct termination, it always return nbytes.</p>\n<p>20.有一个文件，其文件描述符是fd，内含字节序列：3,1,4,1,5,9,2,6,5,3,5。有如下系统调用：lseek(fd,3,SEEK_SET); read(fd,&amp;buffter,4); 其中lseek调用寻找文件中的字节3。在读操作完成后，buffer中的内容是什么？</p>\n<p>It contains the bytes: 1, 5, 9, 2.</p>\n<p>21.假设一个10MB的文件存在磁盘连续扇区的同一个轨道上（轨道号：50）。磁盘的磁头臂此时位于第100号轨道。要想从磁盘上找回这个文件，需要多长时间？假设碰头臂从一个柱面移动到下一个柱面需要1ms，当文件的开始部分存储在的扇区旋转到磁头下需要5ms，并且读的速率是100MB/s。</p>\n<p>(100-50)*1ms+5ms+10MB/100MB/s=55ms+0.1X10^3ms=155ms</p>\n<p>Time to retrieve the file = 1 * 50 ms (Time to move the arm over track # 50)</p>\n<ul>\n<li>5 ms (Time for the first sector to rotate under the head)</li>\n<li>10/100 * 1000 ms (Read 10 MB) = 155 ms</li>\n</ul>\n<p>22.块特殊文件和字符特殊文件的基本差别是什么？</p>\n<p>Block special files consist of numbered blocks, each of which can be read or written independently of all the other ones. It is possible to seek to any block and start reading and writing. This is not possible with character specical files.</p>\n<p>23.在图1-17的例子中库调用称为read，而系统调用自身称为read。这两者都有相同的名字是正常的吗？如果不是，哪一个更重要？</p>\n<p>System calls do not really have names, other than in a documentation sence. When the libray procedure read traps to the kernel, it puts the number of the system call in a register ro on the stack. This number is used to index into a table. There is really no name used anywhere. On the other hand, the name of the library procedure is very import, since this is what appears in the program.</p>\n<p>24.在分布式系统中，客户机-服务器模式很普遍。这种模式能用在单个计算机的系统中吗？</p>\n<p>Yes it can, especially if the kernel is message-passing system.</p>\n<p>25.对于程序员而言，系统调用就像对其他库过程的调用一样。有无必要让程序员了解哪一个库过程导致了系统调用？在什么情形下，为什么？</p>\n<p>As far as program logic is concerned it does not matter whether a call to a library procedure results in a system call. But if perfermance is an issue, if a task can be accomplished without a system call the program will run faster. Every system call involves overhead time in switching from the user context to the kernel context. Furthermore, on a multiuser system the operatiing system may schedule another process o run when a system call completes, further slowing the progress in real time of a calling process.</p>\n<p>26.图1-23说明有一批UNIX的系统调用没有与之相等价的Win32 API。对于所列出的每一个没有Win32等价的调用，若程序员要把一个UNIX程序转换到Windows下运行，会有什么后果？</p>\n<p>Serval UNIX calls have no counterpart in the Win32 API: Link: a Win32 program cannot refer to a file by an alternative name or see it in more than one directory. Also, attempting to create a link is a convenient way to test fro and create a lock on a file. Mount and umount: a Windows program cannot make assumptions about standard path names because on systems with multiple disk drives the drive name part of the path may be different. Chmod: Windows uses access control lists Kill: Windows programmers cannot kill a misbehaving program that is not cooperating.</p>\n<p>27.可移植的操作系统是能从一个系统体系结构到另一个体系结构的移动不需要任何修改的操作系统。请解释为什么建立一个完全可移植性的操作系统是不可行的。描述一下在设计一个高度可移植的操作系统时你设计的高级的两层是什么样的。</p>\n<p>Every system architecture has its own set of instructions that it can execute. Thus a Pentumn cannot excute SPARC programs and SPARC cannot execute Pentium programs. Also, different architectures differ in bus architecture used (such as VME, ISA, PCI, MCA, SBus, ..) as well as the word size of the CPU (usually 32 or 64 bit). Because of these differences in hardware, it is not feasible to build an operating system that is completely portable. A highly portable operating system will consist of two high-level layers—a machine-dependent layer and a machine independent layer. The machine-dependent layer addresses the specifics of the hardware, and must be implemented separately for every architecture. This layer provides a uniform interface on which the machine-independent layer is built. The machine-independent layer has to be implemented only onece. To be highly protable, the size of the machine-dependent layer must be kept as small as possible.</p>\n<p>28.请解释在建立基于微内核的操作系统时策略与机制的分离带来的好处。</p>\n<p>Separation of policy and mechanism allows OS designers to implement a small number of basic primitives in the kernel. These primitives are simpified, because they are not dependent of any specific policy. They can then be used to implement more complex mechanisms and policies at the user level.</p>\n<p>29.下面是单位转换的练习：</p>\n<ul>\n<li>a)一微年是多少秒？</li>\n<li>b)微米常称为micron。那么gigamicron是多长？</li>\n<li>c)1TB存储器有多少字节？</li>\n<li>d)地球的质量是6000yottagram，换算成kilogram是多少？</li>\n</ul>\n<p>answers:</p>\n<ul>\n<li>a) A micro year is 10^-6 X 365 X 24 X 3600 = 31.536 sec.</li>\n<li>b) 10^9*10^-6=1000m</li>\n<li>c) 2^10 X 2^10 X 2^10 X 2^10 = 2^40 Bytes</li>\n<li>d) 6000 X 10^24 X 10^-3 = 6 X 10^24 kilogram</li>\n</ul>\n<p>30.写一个各图1-19类似的shell，但是包含足够的实际可工作的代码，这样读者可以测试它。读者还可以添加某些功能，如输入输出重定向、管道以及后台作业等。</p>\n<p>31.如果读者拥有一个个人UNIX类操作系统（Linux/MINIX/FreeBSD等），可以安全地崩溃和再启动，请写一个可以试图创建一个无限制数量子进程的shell脚本并观察所发生的事。在运行实验之前 ，通过shell键入sync，在磁盘上备份好文件缓冲区以避免毁坏文件系统。（注意：在没有得到系统管理呐的允许之前，不要在分时系统上进行这一尝试。其后果将会立即发生，尝试者可能会被抓住并受到惩罚。）</p>\n<p>32.用一个类似于UNIX od或MS-DOS DEBUG的程序考察并尝试解释UNIX类系统或Windows的目录。提示：如何进行取决于OS允许做什么。一个有益的技巧是在一个有某个操作系统的软盘上创建一个目录，然后使用一个允许进行此类的访问的不同的操作系统读盘上的原始数据。</p>"},{"title":"MySQL 索引的创建、删除和查看","date":"2016-11-15T14:04:35.000Z","_content":"\n在索引列上，除了有序查找之外，数据库利用各种各样的快速定位技术，能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。\n\n<!--more-->\n\n 例如，有 3 个未索引的表 t1、t2、t3，分别只包含列 c1、c2、c3，每个表分别含有 1000 行数据组成，指为 1～1000 的数值，查找对应值相等行的查询如下所示。\n\n```sql\nSELECT c1, c2, c3 FROM t1, t2, t3 WHERE c1 = c2 AND c1 = c3\n```\n\n此查询结果应该为 1000 行，每行包含 3 个相等的值。在无索引的情况下处理此查询，必须寻找 3 个表所有的组合，以便得出与 WHERE 子句相配的那些行。而可能的组合数目为 1000 × 1000 × 1000（十亿），显然查询将会非常慢。\n\n   如果对每个表进行索引，就能极大地加速查询进程。利用索引的查询处理如下。\n\n（1）从表 t1 中选择第一行，查看此行所包含的数据。\n\n（2）使用表 t2 上的索引，直接定位 t2 中与 t1 的值匹配的行。类似，利用表 t3 上的索引，直接定位 t3 中与来自 t1 的值匹配的行。\n\n（3）扫描表 t1 的下一行并重复前面的过程，直到遍历 t1 中所有的行。\n\n   在此情形下，仍然对表 t1 执行了一个完全扫描，但能够在表 t2 和 t3 上进行索引查找直接取出这些表中的行，比未用索引时要快一百万倍。\n\n   利用索引，MySQL 加速了 WHERE 子句满足条件行的搜索，而在多表连接查询时，在执行连接时加快了与其他表中的行匹配的速度。\n\n## 创建索引\n\n在执行 CREATE TABLE 语句时可以创建索引，也可以单独用 CREATE INDEX 或 ALTER TABLE 来为表增加索引。\n\n### ALTER TABLE\n\n```sql\nALTER TABLE table_name ADD INDEX index_name (column_list)\n\nALTER TABLE table_name ADD UNIQUE (column_list)\n\nALTER TABLE table_name ADD PRIMARY KEY (column_list)\n```\n其中 table_name 是要增加索引的表名，column_list 指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名 index_name 可选，缺省时，MySQL 将根据第一个索引列赋一个名称。另外，ALTER TABLE 允许在单个语句中更改多个表，因此可以在同时创建多个索引。\n\n### CREATE INDEX\n\nCREATE INDEX 可对表增加普通索引或 UNIQUE 索引。\n\n ```sql\nCREATE INDEX index_name ON table_name (column_list)\n\nCREATE UNIQUE INDEX index_name ON table_name (column_list)\n```\n\ntable_name、index_name 和 column_list 具有与 ALTER TABLE 语句中相同的含义，索引名不可选。另外，不能用 CREATE INDEX 语句创建 PRIMARY KEY 索引。\n\n### 索引类型\n\n在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为 PRIMARY KEY 或 UNIQUE 索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。\n\nPRIMARY KEY 索引和 UNIQUE 索引非常类似。事实上，PRIMARY KEY 索引仅是一个具有名称 PRIMARY 的 UNIQUE 索引。这表示一个表只能包含一个 PRIMARY KEY，因为一个表中不可能具有两个同名的索引。\n\n下面的SQL语句对 students 表在 sid 上添加 PRIMARY KEY 索引。\n\n ```sql\nALTER TABLE students ADD PRIMARY KEY (sid)\n```\n\n## 删除索引\n\n可利用 ALTER TABLE 或 DROP INDEX 语句来删除索引。类似于 CREATE INDEX 语句，DROP INDEX 可以在 ALTER TABLE 内部作为一条语句处理，语法如下。\n\n```sql\nDROP INDEX index_name ON talbe_name\n\nALTER TABLE table_name DROP INDEX index_name\n\nALTER TABLE table_name DROP PRIMARY KEY\n```\n\n其中，前两条语句是等价的，删除掉 table_name 中的索引 index_name 。\n\n第 3 条语句只在删除 PRIMARY KEY 索引时使用，因为一个表只可能有一个 PRIMARY KEY 索引，因此不需要指定索引名。如果没有创建 PRIMARY KEY 索引，但表具有一个或多个 UNIQUE 索引，则 MySQL 将删除第一个 UNIQUE 索引。\n\n如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。\n\n## 查看索引\n\n```bash\nmysql> show index from table_name;\n\nmysql> show keys from table_name;\n```\n\n- Table\n\n    表的名称。\n\n- Non_unique\n\n  如果索引不能包括重复词，则为 0 。如果可以，则为 1 。\n\n- Key_name\n\n  索引的名称。\n\n- Seq_in_index\n\n  索引中的列序列号，从 1 开始。\n\n- Column_name\n\n  列名称。\n\n- Collation\n\n  列以什么方式存储在索引中。在 MySQL 中，有值 A（升序）或 NULL（无分类）。\n\n- Cardinality\n\n  索引中唯一值的数目的估计值。通过运行 ANALYZE TABLE 或 myisamchk -a 可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。\n\n- Sub_part\n\n  如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为 NULL 。\n\n- Packed\n\n  指示关键字如何被压缩。如果没有被压缩，则为 NULL 。\n\n- Null\n\n  如果列含有 NULL，则含有 YES 。如果没有，则该列含有 NO 。\n\n- Index_type\n\n  用过的索引方法（BTREE，FULLTEXT，HASH，RTREE）。\n\n{% note class_name %} 本文转载自：[MySQL索引的创建、删除和查看](http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html) {% endnote %}\n","source":"_posts/mysql-index.md","raw":"---\ntitle: MySQL 索引的创建、删除和查看\ndate: 2016-11-15 22:04:35\ntags: MySQL\ncategory: 码梦为生\n---\n\n在索引列上，除了有序查找之外，数据库利用各种各样的快速定位技术，能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。\n\n<!--more-->\n\n 例如，有 3 个未索引的表 t1、t2、t3，分别只包含列 c1、c2、c3，每个表分别含有 1000 行数据组成，指为 1～1000 的数值，查找对应值相等行的查询如下所示。\n\n```sql\nSELECT c1, c2, c3 FROM t1, t2, t3 WHERE c1 = c2 AND c1 = c3\n```\n\n此查询结果应该为 1000 行，每行包含 3 个相等的值。在无索引的情况下处理此查询，必须寻找 3 个表所有的组合，以便得出与 WHERE 子句相配的那些行。而可能的组合数目为 1000 × 1000 × 1000（十亿），显然查询将会非常慢。\n\n   如果对每个表进行索引，就能极大地加速查询进程。利用索引的查询处理如下。\n\n（1）从表 t1 中选择第一行，查看此行所包含的数据。\n\n（2）使用表 t2 上的索引，直接定位 t2 中与 t1 的值匹配的行。类似，利用表 t3 上的索引，直接定位 t3 中与来自 t1 的值匹配的行。\n\n（3）扫描表 t1 的下一行并重复前面的过程，直到遍历 t1 中所有的行。\n\n   在此情形下，仍然对表 t1 执行了一个完全扫描，但能够在表 t2 和 t3 上进行索引查找直接取出这些表中的行，比未用索引时要快一百万倍。\n\n   利用索引，MySQL 加速了 WHERE 子句满足条件行的搜索，而在多表连接查询时，在执行连接时加快了与其他表中的行匹配的速度。\n\n## 创建索引\n\n在执行 CREATE TABLE 语句时可以创建索引，也可以单独用 CREATE INDEX 或 ALTER TABLE 来为表增加索引。\n\n### ALTER TABLE\n\n```sql\nALTER TABLE table_name ADD INDEX index_name (column_list)\n\nALTER TABLE table_name ADD UNIQUE (column_list)\n\nALTER TABLE table_name ADD PRIMARY KEY (column_list)\n```\n其中 table_name 是要增加索引的表名，column_list 指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名 index_name 可选，缺省时，MySQL 将根据第一个索引列赋一个名称。另外，ALTER TABLE 允许在单个语句中更改多个表，因此可以在同时创建多个索引。\n\n### CREATE INDEX\n\nCREATE INDEX 可对表增加普通索引或 UNIQUE 索引。\n\n ```sql\nCREATE INDEX index_name ON table_name (column_list)\n\nCREATE UNIQUE INDEX index_name ON table_name (column_list)\n```\n\ntable_name、index_name 和 column_list 具有与 ALTER TABLE 语句中相同的含义，索引名不可选。另外，不能用 CREATE INDEX 语句创建 PRIMARY KEY 索引。\n\n### 索引类型\n\n在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为 PRIMARY KEY 或 UNIQUE 索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。\n\nPRIMARY KEY 索引和 UNIQUE 索引非常类似。事实上，PRIMARY KEY 索引仅是一个具有名称 PRIMARY 的 UNIQUE 索引。这表示一个表只能包含一个 PRIMARY KEY，因为一个表中不可能具有两个同名的索引。\n\n下面的SQL语句对 students 表在 sid 上添加 PRIMARY KEY 索引。\n\n ```sql\nALTER TABLE students ADD PRIMARY KEY (sid)\n```\n\n## 删除索引\n\n可利用 ALTER TABLE 或 DROP INDEX 语句来删除索引。类似于 CREATE INDEX 语句，DROP INDEX 可以在 ALTER TABLE 内部作为一条语句处理，语法如下。\n\n```sql\nDROP INDEX index_name ON talbe_name\n\nALTER TABLE table_name DROP INDEX index_name\n\nALTER TABLE table_name DROP PRIMARY KEY\n```\n\n其中，前两条语句是等价的，删除掉 table_name 中的索引 index_name 。\n\n第 3 条语句只在删除 PRIMARY KEY 索引时使用，因为一个表只可能有一个 PRIMARY KEY 索引，因此不需要指定索引名。如果没有创建 PRIMARY KEY 索引，但表具有一个或多个 UNIQUE 索引，则 MySQL 将删除第一个 UNIQUE 索引。\n\n如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。\n\n## 查看索引\n\n```bash\nmysql> show index from table_name;\n\nmysql> show keys from table_name;\n```\n\n- Table\n\n    表的名称。\n\n- Non_unique\n\n  如果索引不能包括重复词，则为 0 。如果可以，则为 1 。\n\n- Key_name\n\n  索引的名称。\n\n- Seq_in_index\n\n  索引中的列序列号，从 1 开始。\n\n- Column_name\n\n  列名称。\n\n- Collation\n\n  列以什么方式存储在索引中。在 MySQL 中，有值 A（升序）或 NULL（无分类）。\n\n- Cardinality\n\n  索引中唯一值的数目的估计值。通过运行 ANALYZE TABLE 或 myisamchk -a 可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。\n\n- Sub_part\n\n  如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为 NULL 。\n\n- Packed\n\n  指示关键字如何被压缩。如果没有被压缩，则为 NULL 。\n\n- Null\n\n  如果列含有 NULL，则含有 YES 。如果没有，则该列含有 NO 。\n\n- Index_type\n\n  用过的索引方法（BTREE，FULLTEXT，HASH，RTREE）。\n\n{% note class_name %} 本文转载自：[MySQL索引的创建、删除和查看](http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html) {% endnote %}\n","slug":"mysql-index","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpu0018slm46wtj6is2","content":"<p>在索引列上，除了有序查找之外，数据库利用各种各样的快速定位技术，能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。</p>\n<a id=\"more\"></a>\n<p> 例如，有 3 个未索引的表 t1、t2、t3，分别只包含列 c1、c2、c3，每个表分别含有 1000 行数据组成，指为 1～1000 的数值，查找对应值相等行的查询如下所示。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> c1, c2, c3 <span class=\"keyword\">FROM</span> t1, t2, t3 <span class=\"keyword\">WHERE</span> c1 = c2 <span class=\"keyword\">AND</span> c1 = c3</span><br></pre></td></tr></table></figure>\n<p>此查询结果应该为 1000 行，每行包含 3 个相等的值。在无索引的情况下处理此查询，必须寻找 3 个表所有的组合，以便得出与 WHERE 子句相配的那些行。而可能的组合数目为 1000 × 1000 × 1000（十亿），显然查询将会非常慢。</p>\n<p>   如果对每个表进行索引，就能极大地加速查询进程。利用索引的查询处理如下。</p>\n<p>（1）从表 t1 中选择第一行，查看此行所包含的数据。</p>\n<p>（2）使用表 t2 上的索引，直接定位 t2 中与 t1 的值匹配的行。类似，利用表 t3 上的索引，直接定位 t3 中与来自 t1 的值匹配的行。</p>\n<p>（3）扫描表 t1 的下一行并重复前面的过程，直到遍历 t1 中所有的行。</p>\n<p>   在此情形下，仍然对表 t1 执行了一个完全扫描，但能够在表 t2 和 t3 上进行索引查找直接取出这些表中的行，比未用索引时要快一百万倍。</p>\n<p>   利用索引，MySQL 加速了 WHERE 子句满足条件行的搜索，而在多表连接查询时，在执行连接时加快了与其他表中的行匹配的速度。</p>\n<h2 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h2><p>在执行 CREATE TABLE 语句时可以创建索引，也可以单独用 CREATE INDEX 或 ALTER TABLE 来为表增加索引。</p>\n<h3 id=\"ALTER-TABLE\"><a href=\"#ALTER-TABLE\" class=\"headerlink\" title=\"ALTER TABLE\"></a>ALTER TABLE</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span> (column_list)</span><br></pre></td></tr></table></figure>\n<p>其中 table_name 是要增加索引的表名，column_list 指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名 index_name 可选，缺省时，MySQL 将根据第一个索引列赋一个名称。另外，ALTER TABLE 允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p>\n<h3 id=\"CREATE-INDEX\"><a href=\"#CREATE-INDEX\" class=\"headerlink\" title=\"CREATE INDEX\"></a>CREATE INDEX</h3><p>CREATE INDEX 可对表增加普通索引或 UNIQUE 索引。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> table_name (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> table_name (column_list)</span><br></pre></td></tr></table></figure>\n<p>table_name、index_name 和 column_list 具有与 ALTER TABLE 语句中相同的含义，索引名不可选。另外，不能用 CREATE INDEX 语句创建 PRIMARY KEY 索引。</p>\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><p>在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为 PRIMARY KEY 或 UNIQUE 索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。</p>\n<p>PRIMARY KEY 索引和 UNIQUE 索引非常类似。事实上，PRIMARY KEY 索引仅是一个具有名称 PRIMARY 的 UNIQUE 索引。这表示一个表只能包含一个 PRIMARY KEY，因为一个表中不可能具有两个同名的索引。</p>\n<p>下面的SQL语句对 students 表在 sid 上添加 PRIMARY KEY 索引。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> students <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">sid</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h2><p>可利用 ALTER TABLE 或 DROP INDEX 语句来删除索引。类似于 CREATE INDEX 语句，DROP INDEX 可以在 ALTER TABLE 内部作为一条语句处理，语法如下。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> talbe_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> PRIMARY <span class=\"keyword\">KEY</span></span><br></pre></td></tr></table></figure>\n<p>其中，前两条语句是等价的，删除掉 table_name 中的索引 index_name 。</p>\n<p>第 3 条语句只在删除 PRIMARY KEY 索引时使用，因为一个表只可能有一个 PRIMARY KEY 索引，因此不需要指定索引名。如果没有创建 PRIMARY KEY 索引，但表具有一个或多个 UNIQUE 索引，则 MySQL 将删除第一个 UNIQUE 索引。</p>\n<p>如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</p>\n<h2 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show index from table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show keys from table_name;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Table</p>\n<p>  表的名称。</p>\n</li>\n<li><p>Non_unique</p>\n<p>如果索引不能包括重复词，则为 0 。如果可以，则为 1 。</p>\n</li>\n<li><p>Key_name</p>\n<p>索引的名称。</p>\n</li>\n<li><p>Seq_in_index</p>\n<p>索引中的列序列号，从 1 开始。</p>\n</li>\n<li><p>Column_name</p>\n<p>列名称。</p>\n</li>\n<li><p>Collation</p>\n<p>列以什么方式存储在索引中。在 MySQL 中，有值 A（升序）或 NULL（无分类）。</p>\n</li>\n<li><p>Cardinality</p>\n<p>索引中唯一值的数目的估计值。通过运行 ANALYZE TABLE 或 myisamchk -a 可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。</p>\n</li>\n<li><p>Sub_part</p>\n<p>如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为 NULL 。</p>\n</li>\n<li><p>Packed</p>\n<p>指示关键字如何被压缩。如果没有被压缩，则为 NULL 。</p>\n</li>\n<li><p>Null</p>\n<p>如果列含有 NULL，则含有 YES 。如果没有，则该列含有 NO 。</p>\n</li>\n<li><p>Index_type</p>\n<p>用过的索引方法（BTREE，FULLTEXT，HASH，RTREE）。</p>\n</li>\n</ul>\n<div class=\"note class_name\"><p>本文转载自：<a href=\"http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html\" target=\"_blank\" rel=\"noopener\">MySQL索引的创建、删除和查看</a> </p></div>\n","site":{"data":{}},"excerpt":"<p>在索引列上，除了有序查找之外，数据库利用各种各样的快速定位技术，能够大大提高查询效率。特别是当数据量非常大，查询涉及多个表时，使用索引往往能使查询速度加快成千上万倍。</p>","more":"<p> 例如，有 3 个未索引的表 t1、t2、t3，分别只包含列 c1、c2、c3，每个表分别含有 1000 行数据组成，指为 1～1000 的数值，查找对应值相等行的查询如下所示。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> c1, c2, c3 <span class=\"keyword\">FROM</span> t1, t2, t3 <span class=\"keyword\">WHERE</span> c1 = c2 <span class=\"keyword\">AND</span> c1 = c3</span><br></pre></td></tr></table></figure>\n<p>此查询结果应该为 1000 行，每行包含 3 个相等的值。在无索引的情况下处理此查询，必须寻找 3 个表所有的组合，以便得出与 WHERE 子句相配的那些行。而可能的组合数目为 1000 × 1000 × 1000（十亿），显然查询将会非常慢。</p>\n<p>   如果对每个表进行索引，就能极大地加速查询进程。利用索引的查询处理如下。</p>\n<p>（1）从表 t1 中选择第一行，查看此行所包含的数据。</p>\n<p>（2）使用表 t2 上的索引，直接定位 t2 中与 t1 的值匹配的行。类似，利用表 t3 上的索引，直接定位 t3 中与来自 t1 的值匹配的行。</p>\n<p>（3）扫描表 t1 的下一行并重复前面的过程，直到遍历 t1 中所有的行。</p>\n<p>   在此情形下，仍然对表 t1 执行了一个完全扫描，但能够在表 t2 和 t3 上进行索引查找直接取出这些表中的行，比未用索引时要快一百万倍。</p>\n<p>   利用索引，MySQL 加速了 WHERE 子句满足条件行的搜索，而在多表连接查询时，在执行连接时加快了与其他表中的行匹配的速度。</p>\n<h2 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h2><p>在执行 CREATE TABLE 语句时可以创建索引，也可以单独用 CREATE INDEX 或 ALTER TABLE 来为表增加索引。</p>\n<h3 id=\"ALTER-TABLE\"><a href=\"#ALTER-TABLE\" class=\"headerlink\" title=\"ALTER TABLE\"></a>ALTER TABLE</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">INDEX</span> index_name (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> <span class=\"keyword\">UNIQUE</span> (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span> (column_list)</span><br></pre></td></tr></table></figure>\n<p>其中 table_name 是要增加索引的表名，column_list 指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名 index_name 可选，缺省时，MySQL 将根据第一个索引列赋一个名称。另外，ALTER TABLE 允许在单个语句中更改多个表，因此可以在同时创建多个索引。</p>\n<h3 id=\"CREATE-INDEX\"><a href=\"#CREATE-INDEX\" class=\"headerlink\" title=\"CREATE INDEX\"></a>CREATE INDEX</h3><p>CREATE INDEX 可对表增加普通索引或 UNIQUE 索引。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> table_name (column_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> table_name (column_list)</span><br></pre></td></tr></table></figure>\n<p>table_name、index_name 和 column_list 具有与 ALTER TABLE 语句中相同的含义，索引名不可选。另外，不能用 CREATE INDEX 语句创建 PRIMARY KEY 索引。</p>\n<h3 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h3><p>在创建索引时，可以规定索引能否包含重复值。如果不包含，则索引应该创建为 PRIMARY KEY 或 UNIQUE 索引。对于单列惟一性索引，这保证单列不包含重复的值。对于多列惟一性索引，保证多个值的组合不重复。</p>\n<p>PRIMARY KEY 索引和 UNIQUE 索引非常类似。事实上，PRIMARY KEY 索引仅是一个具有名称 PRIMARY 的 UNIQUE 索引。这表示一个表只能包含一个 PRIMARY KEY，因为一个表中不可能具有两个同名的索引。</p>\n<p>下面的SQL语句对 students 表在 sid 上添加 PRIMARY KEY 索引。</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> students <span class=\"keyword\">ADD</span> PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">sid</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h2><p>可利用 ALTER TABLE 或 DROP INDEX 语句来删除索引。类似于 CREATE INDEX 语句，DROP INDEX 可以在 ALTER TABLE 内部作为一条语句处理，语法如下。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name <span class=\"keyword\">ON</span> talbe_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> index_name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> table_name <span class=\"keyword\">DROP</span> PRIMARY <span class=\"keyword\">KEY</span></span><br></pre></td></tr></table></figure>\n<p>其中，前两条语句是等价的，删除掉 table_name 中的索引 index_name 。</p>\n<p>第 3 条语句只在删除 PRIMARY KEY 索引时使用，因为一个表只可能有一个 PRIMARY KEY 索引，因此不需要指定索引名。如果没有创建 PRIMARY KEY 索引，但表具有一个或多个 UNIQUE 索引，则 MySQL 将删除第一个 UNIQUE 索引。</p>\n<p>如果从表中删除了某列，则索引会受到影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</p>\n<h2 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; show index from table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show keys from table_name;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>Table</p>\n<p>  表的名称。</p>\n</li>\n<li><p>Non_unique</p>\n<p>如果索引不能包括重复词，则为 0 。如果可以，则为 1 。</p>\n</li>\n<li><p>Key_name</p>\n<p>索引的名称。</p>\n</li>\n<li><p>Seq_in_index</p>\n<p>索引中的列序列号，从 1 开始。</p>\n</li>\n<li><p>Column_name</p>\n<p>列名称。</p>\n</li>\n<li><p>Collation</p>\n<p>列以什么方式存储在索引中。在 MySQL 中，有值 A（升序）或 NULL（无分类）。</p>\n</li>\n<li><p>Cardinality</p>\n<p>索引中唯一值的数目的估计值。通过运行 ANALYZE TABLE 或 myisamchk -a 可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。</p>\n</li>\n<li><p>Sub_part</p>\n<p>如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为 NULL 。</p>\n</li>\n<li><p>Packed</p>\n<p>指示关键字如何被压缩。如果没有被压缩，则为 NULL 。</p>\n</li>\n<li><p>Null</p>\n<p>如果列含有 NULL，则含有 YES 。如果没有，则该列含有 NO 。</p>\n</li>\n<li><p>Index_type</p>\n<p>用过的索引方法（BTREE，FULLTEXT，HASH，RTREE）。</p>\n</li>\n</ul>\n<div class=\"note class_name\"><p>本文转载自：<a href=\"http://www.cnblogs.com/tianhuilove/archive/2011/09/05/2167795.html\" target=\"_blank\" rel=\"noopener\">MySQL索引的创建、删除和查看</a> </p></div>"},{"title":"MySQL 性能优化","date":"2016-09-02T12:00:14.000Z","_content":"\nMySQL性能优化的一些建议。\n\n<!--more-->\n\n## 复合索引\n\n比如有一条语句是这样的：\n\n```sql\nselect * from users where area = 'beijing' and age = 22;\n```\n\n如果我们是在 area 和 age 上分别创建单个索引的话，由于**MySQL查询每次只能使用一个索引**，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在 area、age 两列上创建复合索引的话将带来更高的效率。如果我们创建了 (area, age, salary) 的复合索引，那么其实相当于创建了 (area,age,salary)、(area,age)、(area) 三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。\n\n<!--more-->\n\n## 索引不会包含有NULL值的列\n\n只要列中包含有 NULL 值都将不会被包含在索引中，复合索引中只要有一列含有 NULL 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL 。\n\n## like语句操作\n\n一般情况下不鼓励使用 like 操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引，而 like “aaa%” 可以使用索引。\n\n## 不要在列上进行运算\n\n```sql\nselect * from users where YEAR(adddate) < 2007;\n```\n\n将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成：\n\n```sql\nselect * from users where adddate < ‘2007-01-01’;\n```\n\n## 不使用NOT IN和<>操作\n\nNOT IN 和 <> 操作都不会使用索引将进行全表扫描。NOT IN 可以 NOT EXISTS 代替，id <> 3 则可使用 id > 3 or id < 3 来代替。\n\n## 不建议使用float、double来存小数\n\n为了防止精度丢失，建议使用 decimal 。\n\n## 高效分页\n\nlimit m,n 其实是先执行 limit m + n，然后从第 m 行取 n 行，这样当 limit 翻页越往后越大，性能越低，如：\n\n```sql\nselect * from users limit 100000, 10;\n```\n\n建议改成：\n\n```sql\nselect * from users where id >= (select id from users limit 100000, 1) limit 10;\n```\n\n## 范围查找\n\n范围查找包括 between、大于、小于以及 in 。mysql 中的 in 查询的条件有数量的限制，数量较小可以走索引，数量较大，就成了全表扫描了。而 between、大于、小于等，这些查询不会走索引，所以尽量放在走索引的查询条件后面。\n\n## 多表链接\n\n子查询和 join 都可以实现多张表之间取数据，但是子查询的性能较差，建议使用 join 。对于mysql的 join ，它用的是 Nested Loop Join 算法，也就是通过前一个表查询的结果集去后一个表中查询，比如前一个表的结果集是 100 条数据，后一个表有 10W 数据，就需要在 100 × 10W 的数据集合中取过滤的到最终的结果集，因此，尽量用小结果集的表去和大表做 join ，同时在 join 的字段上建立索引。\n","source":"_posts/mysql-optimization.md","raw":"---\ntitle: MySQL 性能优化\ndate: 2016-09-02 20:00:14\ntags: MySQL\ncategory: 码梦为生\n---\n\nMySQL性能优化的一些建议。\n\n<!--more-->\n\n## 复合索引\n\n比如有一条语句是这样的：\n\n```sql\nselect * from users where area = 'beijing' and age = 22;\n```\n\n如果我们是在 area 和 age 上分别创建单个索引的话，由于**MySQL查询每次只能使用一个索引**，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在 area、age 两列上创建复合索引的话将带来更高的效率。如果我们创建了 (area, age, salary) 的复合索引，那么其实相当于创建了 (area,age,salary)、(area,age)、(area) 三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。\n\n<!--more-->\n\n## 索引不会包含有NULL值的列\n\n只要列中包含有 NULL 值都将不会被包含在索引中，复合索引中只要有一列含有 NULL 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL 。\n\n## like语句操作\n\n一般情况下不鼓励使用 like 操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引，而 like “aaa%” 可以使用索引。\n\n## 不要在列上进行运算\n\n```sql\nselect * from users where YEAR(adddate) < 2007;\n```\n\n将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成：\n\n```sql\nselect * from users where adddate < ‘2007-01-01’;\n```\n\n## 不使用NOT IN和<>操作\n\nNOT IN 和 <> 操作都不会使用索引将进行全表扫描。NOT IN 可以 NOT EXISTS 代替，id <> 3 则可使用 id > 3 or id < 3 来代替。\n\n## 不建议使用float、double来存小数\n\n为了防止精度丢失，建议使用 decimal 。\n\n## 高效分页\n\nlimit m,n 其实是先执行 limit m + n，然后从第 m 行取 n 行，这样当 limit 翻页越往后越大，性能越低，如：\n\n```sql\nselect * from users limit 100000, 10;\n```\n\n建议改成：\n\n```sql\nselect * from users where id >= (select id from users limit 100000, 1) limit 10;\n```\n\n## 范围查找\n\n范围查找包括 between、大于、小于以及 in 。mysql 中的 in 查询的条件有数量的限制，数量较小可以走索引，数量较大，就成了全表扫描了。而 between、大于、小于等，这些查询不会走索引，所以尽量放在走索引的查询条件后面。\n\n## 多表链接\n\n子查询和 join 都可以实现多张表之间取数据，但是子查询的性能较差，建议使用 join 。对于mysql的 join ，它用的是 Nested Loop Join 算法，也就是通过前一个表查询的结果集去后一个表中查询，比如前一个表的结果集是 100 条数据，后一个表有 10W 数据，就需要在 100 × 10W 的数据集合中取过滤的到最终的结果集，因此，尽量用小结果集的表去和大表做 join ，同时在 join 的字段上建立索引。\n","slug":"mysql-optimization","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpv001aslm4vmcdqgd9","content":"<p>MySQL性能优化的一些建议。</p>\n<a id=\"more\"></a>\n<h2 id=\"复合索引\"><a href=\"#复合索引\" class=\"headerlink\" title=\"复合索引\"></a>复合索引</h2><p>比如有一条语句是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> area = <span class=\"string\">'beijing'</span> <span class=\"keyword\">and</span> age = <span class=\"number\">22</span>;</span><br></pre></td></tr></table></figure>\n<p>如果我们是在 area 和 age 上分别创建单个索引的话，由于<strong>MySQL查询每次只能使用一个索引</strong>，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在 area、age 两列上创建复合索引的话将带来更高的效率。如果我们创建了 (area, age, salary) 的复合索引，那么其实相当于创建了 (area,age,salary)、(area,age)、(area) 三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。</p>\n<!--more-->\n<h2 id=\"索引不会包含有NULL值的列\"><a href=\"#索引不会包含有NULL值的列\" class=\"headerlink\" title=\"索引不会包含有NULL值的列\"></a>索引不会包含有NULL值的列</h2><p>只要列中包含有 NULL 值都将不会被包含在索引中，复合索引中只要有一列含有 NULL 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL 。</p>\n<h2 id=\"like语句操作\"><a href=\"#like语句操作\" class=\"headerlink\" title=\"like语句操作\"></a>like语句操作</h2><p>一般情况下不鼓励使用 like 操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引，而 like “aaa%” 可以使用索引。</p>\n<h2 id=\"不要在列上进行运算\"><a href=\"#不要在列上进行运算\" class=\"headerlink\" title=\"不要在列上进行运算\"></a>不要在列上进行运算</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">YEAR</span>(adddate) &lt; <span class=\"number\">2007</span>;</span><br></pre></td></tr></table></figure>\n<p>将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> adddate &lt; ‘<span class=\"number\">2007</span><span class=\"number\">-01</span><span class=\"number\">-01</span>’;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不使用NOT-IN和-lt-gt-操作\"><a href=\"#不使用NOT-IN和-lt-gt-操作\" class=\"headerlink\" title=\"不使用NOT IN和&lt;&gt;操作\"></a>不使用NOT IN和&lt;&gt;操作</h2><p>NOT IN 和 &lt;&gt; 操作都不会使用索引将进行全表扫描。NOT IN 可以 NOT EXISTS 代替，id &lt;&gt; 3 则可使用 id &gt; 3 or id &lt; 3 来代替。</p>\n<h2 id=\"不建议使用float、double来存小数\"><a href=\"#不建议使用float、double来存小数\" class=\"headerlink\" title=\"不建议使用float、double来存小数\"></a>不建议使用float、double来存小数</h2><p>为了防止精度丢失，建议使用 decimal 。</p>\n<h2 id=\"高效分页\"><a href=\"#高效分页\" class=\"headerlink\" title=\"高效分页\"></a>高效分页</h2><p>limit m,n 其实是先执行 limit m + n，然后从第 m 行取 n 行，这样当 limit 翻页越往后越大，性能越低，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">limit</span> <span class=\"number\">100000</span>, <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>建议改成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt;= (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">limit</span> <span class=\"number\">100000</span>, <span class=\"number\">1</span>) <span class=\"keyword\">limit</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"范围查找\"><a href=\"#范围查找\" class=\"headerlink\" title=\"范围查找\"></a>范围查找</h2><p>范围查找包括 between、大于、小于以及 in 。mysql 中的 in 查询的条件有数量的限制，数量较小可以走索引，数量较大，就成了全表扫描了。而 between、大于、小于等，这些查询不会走索引，所以尽量放在走索引的查询条件后面。</p>\n<h2 id=\"多表链接\"><a href=\"#多表链接\" class=\"headerlink\" title=\"多表链接\"></a>多表链接</h2><p>子查询和 join 都可以实现多张表之间取数据，但是子查询的性能较差，建议使用 join 。对于mysql的 join ，它用的是 Nested Loop Join 算法，也就是通过前一个表查询的结果集去后一个表中查询，比如前一个表的结果集是 100 条数据，后一个表有 10W 数据，就需要在 100 × 10W 的数据集合中取过滤的到最终的结果集，因此，尽量用小结果集的表去和大表做 join ，同时在 join 的字段上建立索引。</p>\n","site":{"data":{}},"excerpt":"<p>MySQL性能优化的一些建议。</p>","more":"<h2 id=\"复合索引\"><a href=\"#复合索引\" class=\"headerlink\" title=\"复合索引\"></a>复合索引</h2><p>比如有一条语句是这样的：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> area = <span class=\"string\">'beijing'</span> <span class=\"keyword\">and</span> age = <span class=\"number\">22</span>;</span><br></pre></td></tr></table></figure>\n<p>如果我们是在 area 和 age 上分别创建单个索引的话，由于<strong>MySQL查询每次只能使用一个索引</strong>，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在 area、age 两列上创建复合索引的话将带来更高的效率。如果我们创建了 (area, age, salary) 的复合索引，那么其实相当于创建了 (area,age,salary)、(area,age)、(area) 三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。</p>\n<!--more-->\n<h2 id=\"索引不会包含有NULL值的列\"><a href=\"#索引不会包含有NULL值的列\" class=\"headerlink\" title=\"索引不会包含有NULL值的列\"></a>索引不会包含有NULL值的列</h2><p>只要列中包含有 NULL 值都将不会被包含在索引中，复合索引中只要有一列含有 NULL 值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为 NULL 。</p>\n<h2 id=\"like语句操作\"><a href=\"#like语句操作\" class=\"headerlink\" title=\"like语句操作\"></a>like语句操作</h2><p>一般情况下不鼓励使用 like 操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引，而 like “aaa%” 可以使用索引。</p>\n<h2 id=\"不要在列上进行运算\"><a href=\"#不要在列上进行运算\" class=\"headerlink\" title=\"不要在列上进行运算\"></a>不要在列上进行运算</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">YEAR</span>(adddate) &lt; <span class=\"number\">2007</span>;</span><br></pre></td></tr></table></figure>\n<p>将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> adddate &lt; ‘<span class=\"number\">2007</span><span class=\"number\">-01</span><span class=\"number\">-01</span>’;</span><br></pre></td></tr></table></figure>\n<h2 id=\"不使用NOT-IN和-lt-gt-操作\"><a href=\"#不使用NOT-IN和-lt-gt-操作\" class=\"headerlink\" title=\"不使用NOT IN和&lt;&gt;操作\"></a>不使用NOT IN和&lt;&gt;操作</h2><p>NOT IN 和 &lt;&gt; 操作都不会使用索引将进行全表扫描。NOT IN 可以 NOT EXISTS 代替，id &lt;&gt; 3 则可使用 id &gt; 3 or id &lt; 3 来代替。</p>\n<h2 id=\"不建议使用float、double来存小数\"><a href=\"#不建议使用float、double来存小数\" class=\"headerlink\" title=\"不建议使用float、double来存小数\"></a>不建议使用float、double来存小数</h2><p>为了防止精度丢失，建议使用 decimal 。</p>\n<h2 id=\"高效分页\"><a href=\"#高效分页\" class=\"headerlink\" title=\"高效分页\"></a>高效分页</h2><p>limit m,n 其实是先执行 limit m + n，然后从第 m 行取 n 行，这样当 limit 翻页越往后越大，性能越低，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">limit</span> <span class=\"number\">100000</span>, <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<p>建议改成：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">where</span> <span class=\"keyword\">id</span> &gt;= (<span class=\"keyword\">select</span> <span class=\"keyword\">id</span> <span class=\"keyword\">from</span> <span class=\"keyword\">users</span> <span class=\"keyword\">limit</span> <span class=\"number\">100000</span>, <span class=\"number\">1</span>) <span class=\"keyword\">limit</span> <span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"范围查找\"><a href=\"#范围查找\" class=\"headerlink\" title=\"范围查找\"></a>范围查找</h2><p>范围查找包括 between、大于、小于以及 in 。mysql 中的 in 查询的条件有数量的限制，数量较小可以走索引，数量较大，就成了全表扫描了。而 between、大于、小于等，这些查询不会走索引，所以尽量放在走索引的查询条件后面。</p>\n<h2 id=\"多表链接\"><a href=\"#多表链接\" class=\"headerlink\" title=\"多表链接\"></a>多表链接</h2><p>子查询和 join 都可以实现多张表之间取数据，但是子查询的性能较差，建议使用 join 。对于mysql的 join ，它用的是 Nested Loop Join 算法，也就是通过前一个表查询的结果集去后一个表中查询，比如前一个表的结果集是 100 条数据，后一个表有 10W 数据，就需要在 100 × 10W 的数据集合中取过滤的到最终的结果集，因此，尽量用小结果集的表去和大表做 join ，同时在 join 的字段上建立索引。</p>"},{"title":"Markdown 代码高亮的标记大全","date":"2018-10-30T13:43:37.000Z","_content":"\n用 markdown 写文档的话经常会用到代码的语法高亮，这里列出了常用的语法高亮标签，前面是标签，括号里是对应的文件扩展名。\n\n<!--more-->\n\n## Syntax Highlight\n\n- Cucumber (‘*.feature’)\n- abap (‘*.abap’)\n- ada (‘.adb’, ‘.ads’, ‘*.ada’)\n- ahk (‘.ahk’, ‘.ahkl’)\n- apacheconf (‘.htaccess’, ‘apache.conf’, ‘apache2.conf’)\n- applescript (‘*.applescript’)\n- as (‘*.as’)\n- as3 (‘*.as’)\n- asy (‘*.asy’)\n- bash (‘.sh’, ‘.ksh’, ‘.bash’, ‘.ebuild’, ‘*.eclass’)\n- bat (‘.bat’, ‘.cmd’)\n- befunge (‘*.befunge’)\n- blitzmax (‘*.bmx’)\n- boo (‘*.boo’)\n- brainfuck (‘.bf’, ‘.b’)\n- c (‘.c’, ‘.h’)\n- cfm (‘.cfm’, ‘.cfml’, ‘*.cfc’)\n- cheetah (‘.tmpl’, ‘.spt’)\n- cl (‘.cl’, ‘.lisp’, ‘*.el’)\n- clojure (‘.clj’, ‘.cljs’)\n- cmake (‘*.cmake’, ‘CMakeLists.txt’)\n- coffeescript (‘*.coffee’)\n- console (‘*.sh-session’)\n- control (‘control’)\n- cpp (‘.cpp’, ‘.hpp’, ‘.c++’, ‘.h++’, ‘.cc’, ‘.hh’, ‘.cxx’, ‘.hxx’, ‘*.pde’)\n- csharp (‘*.cs’)\n- css (‘*.css’)\n- cython (‘.pyx’, ‘.pxd’, ‘*.pxi’)\n- d (‘.d’, ‘.di’)\n- delphi (‘*.pas’)\n- diff (‘.diff’, ‘.patch’)\n- dpatch (‘.dpatch’, ‘.darcspatch’)\n- duel (‘.duel’, ‘.jbst’)\n- dylan (‘.dylan’, ‘.dyl’)\n- erb (‘*.erb’)\n- erl (‘*.erl-sh’)\n- erlang (‘.erl’, ‘.hrl’)\n- evoque (‘*.evoque’)\n- factor (‘*.factor’)\n- felix (‘.flx’, ‘.flxh’)\n- fortran (‘.f’, ‘.f90’)\n- gas (‘.s’, ‘.S’)\n- genshi (‘*.kid’)\n- glsl (‘.vert’, ‘.frag’, ‘*.geo’)\n- gnuplot (‘.plot’, ‘.plt’)\n- go (‘*.go’)\n- groff (‘.(1234567)’, ‘.man’)\n- haml (‘*.haml’)\n- haskell (‘*.hs’)\n- html (‘.html’, ‘.htm’, ‘.xhtml’, ‘.xslt’)\n- hx (‘*.hx’)\n- hybris (‘.hy’, ‘.hyb’)\n- ini (‘.ini’, ‘.cfg’)\n- io (‘*.io’)\n- ioke (‘*.ik’)\n- irc (‘*.weechatlog’)\n- jade (‘*.jade’)\n- java (‘*.java’)\n- js (‘*.js’)\n- jsp (‘*.jsp’)\n- lhs (‘*.lhs’)\n- llvm (‘*.ll’)\n- logtalk (‘*.lgt’)\n- lua (‘.lua’, ‘.wlua’)\n- make (‘.mak’, ‘Makefile’, ‘makefile’, ‘Makefile.‘, ‘GNUmakefile’)\n- mako (‘*.mao’)\n- maql (‘*.maql’)\n- mason (‘.mhtml’, ‘.mc’, ‘*.mi’, ‘autohandler’, ‘dhandler’)\n- markdown (‘*.md’)\n- modelica (‘*.mo’)\n- modula2 (‘.def’, ‘.mod’)\n- moocode (‘*.moo’)\n- mupad (‘*.mu’)\n- mxml (‘*.mxml’)\n- myghty (‘*.myt’, ‘autodelegate’)\n- nasm (‘.asm’, ‘.ASM’)\n- newspeak (‘*.ns2’)\n- objdump (‘*.objdump’)\n- objectivec (‘*.m’)\n- objectivej (‘*.j’)\n- ocaml (‘.ml’, ‘.mli’, ‘.mll’, ‘.mly’)\n- ooc (‘*.ooc’)\n- perl (‘.pl’, ‘.pm’)\n- php (‘.php’, ‘.php(345)’)\n- postscript (‘.ps’, ‘.eps’)\n- pot (‘.pot’, ‘.po’)\n- pov (‘.pov’, ‘.inc’)\n- prolog (‘.prolog’, ‘.pro’, ‘*.pl’)\n- properties (‘*.properties’)\n- protobuf (‘*.proto’)\n- py3tb (‘*.py3tb’)\n- pytb (‘*.pytb’)\n- python (‘.py’, ‘.pyw’, ‘.sc’, ‘SConstruct’, ‘SConscript’, ‘.tac’)\n- rb (‘.rb’, ‘.rbw’, ‘Rakefile’, ‘.rake’, ‘.gemspec’, ‘.rbx’, ‘.duby’)\n- rconsole (‘*.Rout’)\n- rebol (‘.r’, ‘.r3’)\n- redcode (‘*.cw’)\n- rhtml (‘*.rhtml’)\n- rst (‘.rst’, ‘.rest’)\n- sass (‘*.sass’)\n- scala (‘*.scala’)\n- scaml (‘*.scaml’)\n- scheme (‘*.scm’)\n- scss (‘*.scss’)\n- smalltalk (‘*.st’)\n- smarty (‘*.tpl’)\n- sourceslist (‘sources.list’)\n- splus (‘.S’, ‘.R’)\n- sql (‘*.sql’)\n- sqlite3 (‘*.sqlite3-console’)\n- squidconf (‘squid.conf’)\n- ssp (‘*.ssp’)\n- tcl (‘*.tcl’)\n- tcsh (‘.tcsh’, ‘.csh’)\n- tex (‘.tex’, ‘.aux’, ‘*.toc’)\n- text (‘*.txt’)\n- v (‘.v’, ‘.sv’)\n- vala (‘.vala’, ‘.vapi’)\n- vbnet (‘.vb’, ‘.bas’)\n- velocity (‘.vm’, ‘.fhtml’)\n- vim (‘*.vim’, ‘.vimrc’)\n- xml (‘.xml’, ‘.xsl’, ‘.rss’, ‘.xslt’, ‘.xsd’, ‘.wsdl’)\n- xquery (‘.xqy’, ‘.xquery’)\n- xslt (‘.xsl’, ‘.xslt’)\n- yaml (‘.yaml’, ‘.yml’)\n","source":"_posts/markdown-syntax-highlight.md","raw":"---\ntitle: Markdown 代码高亮的标记大全\ndate: 2018-10-30 21:43:37\ntags:\n    - Markdown\n---\n\n用 markdown 写文档的话经常会用到代码的语法高亮，这里列出了常用的语法高亮标签，前面是标签，括号里是对应的文件扩展名。\n\n<!--more-->\n\n## Syntax Highlight\n\n- Cucumber (‘*.feature’)\n- abap (‘*.abap’)\n- ada (‘.adb’, ‘.ads’, ‘*.ada’)\n- ahk (‘.ahk’, ‘.ahkl’)\n- apacheconf (‘.htaccess’, ‘apache.conf’, ‘apache2.conf’)\n- applescript (‘*.applescript’)\n- as (‘*.as’)\n- as3 (‘*.as’)\n- asy (‘*.asy’)\n- bash (‘.sh’, ‘.ksh’, ‘.bash’, ‘.ebuild’, ‘*.eclass’)\n- bat (‘.bat’, ‘.cmd’)\n- befunge (‘*.befunge’)\n- blitzmax (‘*.bmx’)\n- boo (‘*.boo’)\n- brainfuck (‘.bf’, ‘.b’)\n- c (‘.c’, ‘.h’)\n- cfm (‘.cfm’, ‘.cfml’, ‘*.cfc’)\n- cheetah (‘.tmpl’, ‘.spt’)\n- cl (‘.cl’, ‘.lisp’, ‘*.el’)\n- clojure (‘.clj’, ‘.cljs’)\n- cmake (‘*.cmake’, ‘CMakeLists.txt’)\n- coffeescript (‘*.coffee’)\n- console (‘*.sh-session’)\n- control (‘control’)\n- cpp (‘.cpp’, ‘.hpp’, ‘.c++’, ‘.h++’, ‘.cc’, ‘.hh’, ‘.cxx’, ‘.hxx’, ‘*.pde’)\n- csharp (‘*.cs’)\n- css (‘*.css’)\n- cython (‘.pyx’, ‘.pxd’, ‘*.pxi’)\n- d (‘.d’, ‘.di’)\n- delphi (‘*.pas’)\n- diff (‘.diff’, ‘.patch’)\n- dpatch (‘.dpatch’, ‘.darcspatch’)\n- duel (‘.duel’, ‘.jbst’)\n- dylan (‘.dylan’, ‘.dyl’)\n- erb (‘*.erb’)\n- erl (‘*.erl-sh’)\n- erlang (‘.erl’, ‘.hrl’)\n- evoque (‘*.evoque’)\n- factor (‘*.factor’)\n- felix (‘.flx’, ‘.flxh’)\n- fortran (‘.f’, ‘.f90’)\n- gas (‘.s’, ‘.S’)\n- genshi (‘*.kid’)\n- glsl (‘.vert’, ‘.frag’, ‘*.geo’)\n- gnuplot (‘.plot’, ‘.plt’)\n- go (‘*.go’)\n- groff (‘.(1234567)’, ‘.man’)\n- haml (‘*.haml’)\n- haskell (‘*.hs’)\n- html (‘.html’, ‘.htm’, ‘.xhtml’, ‘.xslt’)\n- hx (‘*.hx’)\n- hybris (‘.hy’, ‘.hyb’)\n- ini (‘.ini’, ‘.cfg’)\n- io (‘*.io’)\n- ioke (‘*.ik’)\n- irc (‘*.weechatlog’)\n- jade (‘*.jade’)\n- java (‘*.java’)\n- js (‘*.js’)\n- jsp (‘*.jsp’)\n- lhs (‘*.lhs’)\n- llvm (‘*.ll’)\n- logtalk (‘*.lgt’)\n- lua (‘.lua’, ‘.wlua’)\n- make (‘.mak’, ‘Makefile’, ‘makefile’, ‘Makefile.‘, ‘GNUmakefile’)\n- mako (‘*.mao’)\n- maql (‘*.maql’)\n- mason (‘.mhtml’, ‘.mc’, ‘*.mi’, ‘autohandler’, ‘dhandler’)\n- markdown (‘*.md’)\n- modelica (‘*.mo’)\n- modula2 (‘.def’, ‘.mod’)\n- moocode (‘*.moo’)\n- mupad (‘*.mu’)\n- mxml (‘*.mxml’)\n- myghty (‘*.myt’, ‘autodelegate’)\n- nasm (‘.asm’, ‘.ASM’)\n- newspeak (‘*.ns2’)\n- objdump (‘*.objdump’)\n- objectivec (‘*.m’)\n- objectivej (‘*.j’)\n- ocaml (‘.ml’, ‘.mli’, ‘.mll’, ‘.mly’)\n- ooc (‘*.ooc’)\n- perl (‘.pl’, ‘.pm’)\n- php (‘.php’, ‘.php(345)’)\n- postscript (‘.ps’, ‘.eps’)\n- pot (‘.pot’, ‘.po’)\n- pov (‘.pov’, ‘.inc’)\n- prolog (‘.prolog’, ‘.pro’, ‘*.pl’)\n- properties (‘*.properties’)\n- protobuf (‘*.proto’)\n- py3tb (‘*.py3tb’)\n- pytb (‘*.pytb’)\n- python (‘.py’, ‘.pyw’, ‘.sc’, ‘SConstruct’, ‘SConscript’, ‘.tac’)\n- rb (‘.rb’, ‘.rbw’, ‘Rakefile’, ‘.rake’, ‘.gemspec’, ‘.rbx’, ‘.duby’)\n- rconsole (‘*.Rout’)\n- rebol (‘.r’, ‘.r3’)\n- redcode (‘*.cw’)\n- rhtml (‘*.rhtml’)\n- rst (‘.rst’, ‘.rest’)\n- sass (‘*.sass’)\n- scala (‘*.scala’)\n- scaml (‘*.scaml’)\n- scheme (‘*.scm’)\n- scss (‘*.scss’)\n- smalltalk (‘*.st’)\n- smarty (‘*.tpl’)\n- sourceslist (‘sources.list’)\n- splus (‘.S’, ‘.R’)\n- sql (‘*.sql’)\n- sqlite3 (‘*.sqlite3-console’)\n- squidconf (‘squid.conf’)\n- ssp (‘*.ssp’)\n- tcl (‘*.tcl’)\n- tcsh (‘.tcsh’, ‘.csh’)\n- tex (‘.tex’, ‘.aux’, ‘*.toc’)\n- text (‘*.txt’)\n- v (‘.v’, ‘.sv’)\n- vala (‘.vala’, ‘.vapi’)\n- vbnet (‘.vb’, ‘.bas’)\n- velocity (‘.vm’, ‘.fhtml’)\n- vim (‘*.vim’, ‘.vimrc’)\n- xml (‘.xml’, ‘.xsl’, ‘.rss’, ‘.xslt’, ‘.xsd’, ‘.wsdl’)\n- xquery (‘.xqy’, ‘.xquery’)\n- xslt (‘.xsl’, ‘.xslt’)\n- yaml (‘.yaml’, ‘.yml’)\n","slug":"markdown-syntax-highlight","published":1,"updated":"2018-12-06T13:53:34.736Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpw001eslm4pzgdzoch","content":"<p>用 markdown 写文档的话经常会用到代码的语法高亮，这里列出了常用的语法高亮标签，前面是标签，括号里是对应的文件扩展名。</p>\n<a id=\"more\"></a>\n<h2 id=\"Syntax-Highlight\"><a href=\"#Syntax-Highlight\" class=\"headerlink\" title=\"Syntax Highlight\"></a>Syntax Highlight</h2><ul>\n<li>Cucumber (‘*.feature’)</li>\n<li>abap (‘*.abap’)</li>\n<li>ada (‘.adb’, ‘.ads’, ‘*.ada’)</li>\n<li>ahk (‘.ahk’, ‘.ahkl’)</li>\n<li>apacheconf (‘.htaccess’, ‘apache.conf’, ‘apache2.conf’)</li>\n<li>applescript (‘*.applescript’)</li>\n<li>as (‘*.as’)</li>\n<li>as3 (‘*.as’)</li>\n<li>asy (‘*.asy’)</li>\n<li>bash (‘.sh’, ‘.ksh’, ‘.bash’, ‘.ebuild’, ‘*.eclass’)</li>\n<li>bat (‘.bat’, ‘.cmd’)</li>\n<li>befunge (‘*.befunge’)</li>\n<li>blitzmax (‘*.bmx’)</li>\n<li>boo (‘*.boo’)</li>\n<li>brainfuck (‘.bf’, ‘.b’)</li>\n<li>c (‘.c’, ‘.h’)</li>\n<li>cfm (‘.cfm’, ‘.cfml’, ‘*.cfc’)</li>\n<li>cheetah (‘.tmpl’, ‘.spt’)</li>\n<li>cl (‘.cl’, ‘.lisp’, ‘*.el’)</li>\n<li>clojure (‘.clj’, ‘.cljs’)</li>\n<li>cmake (‘*.cmake’, ‘CMakeLists.txt’)</li>\n<li>coffeescript (‘*.coffee’)</li>\n<li>console (‘*.sh-session’)</li>\n<li>control (‘control’)</li>\n<li>cpp (‘.cpp’, ‘.hpp’, ‘.c++’, ‘.h++’, ‘.cc’, ‘.hh’, ‘.cxx’, ‘.hxx’, ‘*.pde’)</li>\n<li>csharp (‘*.cs’)</li>\n<li>css (‘*.css’)</li>\n<li>cython (‘.pyx’, ‘.pxd’, ‘*.pxi’)</li>\n<li>d (‘.d’, ‘.di’)</li>\n<li>delphi (‘*.pas’)</li>\n<li>diff (‘.diff’, ‘.patch’)</li>\n<li>dpatch (‘.dpatch’, ‘.darcspatch’)</li>\n<li>duel (‘.duel’, ‘.jbst’)</li>\n<li>dylan (‘.dylan’, ‘.dyl’)</li>\n<li>erb (‘*.erb’)</li>\n<li>erl (‘*.erl-sh’)</li>\n<li>erlang (‘.erl’, ‘.hrl’)</li>\n<li>evoque (‘*.evoque’)</li>\n<li>factor (‘*.factor’)</li>\n<li>felix (‘.flx’, ‘.flxh’)</li>\n<li>fortran (‘.f’, ‘.f90’)</li>\n<li>gas (‘.s’, ‘.S’)</li>\n<li>genshi (‘*.kid’)</li>\n<li>glsl (‘.vert’, ‘.frag’, ‘*.geo’)</li>\n<li>gnuplot (‘.plot’, ‘.plt’)</li>\n<li>go (‘*.go’)</li>\n<li>groff (‘.(1234567)’, ‘.man’)</li>\n<li>haml (‘*.haml’)</li>\n<li>haskell (‘*.hs’)</li>\n<li>html (‘.html’, ‘.htm’, ‘.xhtml’, ‘.xslt’)</li>\n<li>hx (‘*.hx’)</li>\n<li>hybris (‘.hy’, ‘.hyb’)</li>\n<li>ini (‘.ini’, ‘.cfg’)</li>\n<li>io (‘*.io’)</li>\n<li>ioke (‘*.ik’)</li>\n<li>irc (‘*.weechatlog’)</li>\n<li>jade (‘*.jade’)</li>\n<li>java (‘*.java’)</li>\n<li>js (‘*.js’)</li>\n<li>jsp (‘*.jsp’)</li>\n<li>lhs (‘*.lhs’)</li>\n<li>llvm (‘*.ll’)</li>\n<li>logtalk (‘*.lgt’)</li>\n<li>lua (‘.lua’, ‘.wlua’)</li>\n<li>make (‘.mak’, ‘Makefile’, ‘makefile’, ‘Makefile.‘, ‘GNUmakefile’)</li>\n<li>mako (‘*.mao’)</li>\n<li>maql (‘*.maql’)</li>\n<li>mason (‘.mhtml’, ‘.mc’, ‘*.mi’, ‘autohandler’, ‘dhandler’)</li>\n<li>markdown (‘*.md’)</li>\n<li>modelica (‘*.mo’)</li>\n<li>modula2 (‘.def’, ‘.mod’)</li>\n<li>moocode (‘*.moo’)</li>\n<li>mupad (‘*.mu’)</li>\n<li>mxml (‘*.mxml’)</li>\n<li>myghty (‘*.myt’, ‘autodelegate’)</li>\n<li>nasm (‘.asm’, ‘.ASM’)</li>\n<li>newspeak (‘*.ns2’)</li>\n<li>objdump (‘*.objdump’)</li>\n<li>objectivec (‘*.m’)</li>\n<li>objectivej (‘*.j’)</li>\n<li>ocaml (‘.ml’, ‘.mli’, ‘.mll’, ‘.mly’)</li>\n<li>ooc (‘*.ooc’)</li>\n<li>perl (‘.pl’, ‘.pm’)</li>\n<li>php (‘.php’, ‘.php(345)’)</li>\n<li>postscript (‘.ps’, ‘.eps’)</li>\n<li>pot (‘.pot’, ‘.po’)</li>\n<li>pov (‘.pov’, ‘.inc’)</li>\n<li>prolog (‘.prolog’, ‘.pro’, ‘*.pl’)</li>\n<li>properties (‘*.properties’)</li>\n<li>protobuf (‘*.proto’)</li>\n<li>py3tb (‘*.py3tb’)</li>\n<li>pytb (‘*.pytb’)</li>\n<li>python (‘.py’, ‘.pyw’, ‘.sc’, ‘SConstruct’, ‘SConscript’, ‘.tac’)</li>\n<li>rb (‘.rb’, ‘.rbw’, ‘Rakefile’, ‘.rake’, ‘.gemspec’, ‘.rbx’, ‘.duby’)</li>\n<li>rconsole (‘*.Rout’)</li>\n<li>rebol (‘.r’, ‘.r3’)</li>\n<li>redcode (‘*.cw’)</li>\n<li>rhtml (‘*.rhtml’)</li>\n<li>rst (‘.rst’, ‘.rest’)</li>\n<li>sass (‘*.sass’)</li>\n<li>scala (‘*.scala’)</li>\n<li>scaml (‘*.scaml’)</li>\n<li>scheme (‘*.scm’)</li>\n<li>scss (‘*.scss’)</li>\n<li>smalltalk (‘*.st’)</li>\n<li>smarty (‘*.tpl’)</li>\n<li>sourceslist (‘sources.list’)</li>\n<li>splus (‘.S’, ‘.R’)</li>\n<li>sql (‘*.sql’)</li>\n<li>sqlite3 (‘*.sqlite3-console’)</li>\n<li>squidconf (‘squid.conf’)</li>\n<li>ssp (‘*.ssp’)</li>\n<li>tcl (‘*.tcl’)</li>\n<li>tcsh (‘.tcsh’, ‘.csh’)</li>\n<li>tex (‘.tex’, ‘.aux’, ‘*.toc’)</li>\n<li>text (‘*.txt’)</li>\n<li>v (‘.v’, ‘.sv’)</li>\n<li>vala (‘.vala’, ‘.vapi’)</li>\n<li>vbnet (‘.vb’, ‘.bas’)</li>\n<li>velocity (‘.vm’, ‘.fhtml’)</li>\n<li>vim (‘*.vim’, ‘.vimrc’)</li>\n<li>xml (‘.xml’, ‘.xsl’, ‘.rss’, ‘.xslt’, ‘.xsd’, ‘.wsdl’)</li>\n<li>xquery (‘.xqy’, ‘.xquery’)</li>\n<li>xslt (‘.xsl’, ‘.xslt’)</li>\n<li>yaml (‘.yaml’, ‘.yml’)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>用 markdown 写文档的话经常会用到代码的语法高亮，这里列出了常用的语法高亮标签，前面是标签，括号里是对应的文件扩展名。</p>","more":"<h2 id=\"Syntax-Highlight\"><a href=\"#Syntax-Highlight\" class=\"headerlink\" title=\"Syntax Highlight\"></a>Syntax Highlight</h2><ul>\n<li>Cucumber (‘*.feature’)</li>\n<li>abap (‘*.abap’)</li>\n<li>ada (‘.adb’, ‘.ads’, ‘*.ada’)</li>\n<li>ahk (‘.ahk’, ‘.ahkl’)</li>\n<li>apacheconf (‘.htaccess’, ‘apache.conf’, ‘apache2.conf’)</li>\n<li>applescript (‘*.applescript’)</li>\n<li>as (‘*.as’)</li>\n<li>as3 (‘*.as’)</li>\n<li>asy (‘*.asy’)</li>\n<li>bash (‘.sh’, ‘.ksh’, ‘.bash’, ‘.ebuild’, ‘*.eclass’)</li>\n<li>bat (‘.bat’, ‘.cmd’)</li>\n<li>befunge (‘*.befunge’)</li>\n<li>blitzmax (‘*.bmx’)</li>\n<li>boo (‘*.boo’)</li>\n<li>brainfuck (‘.bf’, ‘.b’)</li>\n<li>c (‘.c’, ‘.h’)</li>\n<li>cfm (‘.cfm’, ‘.cfml’, ‘*.cfc’)</li>\n<li>cheetah (‘.tmpl’, ‘.spt’)</li>\n<li>cl (‘.cl’, ‘.lisp’, ‘*.el’)</li>\n<li>clojure (‘.clj’, ‘.cljs’)</li>\n<li>cmake (‘*.cmake’, ‘CMakeLists.txt’)</li>\n<li>coffeescript (‘*.coffee’)</li>\n<li>console (‘*.sh-session’)</li>\n<li>control (‘control’)</li>\n<li>cpp (‘.cpp’, ‘.hpp’, ‘.c++’, ‘.h++’, ‘.cc’, ‘.hh’, ‘.cxx’, ‘.hxx’, ‘*.pde’)</li>\n<li>csharp (‘*.cs’)</li>\n<li>css (‘*.css’)</li>\n<li>cython (‘.pyx’, ‘.pxd’, ‘*.pxi’)</li>\n<li>d (‘.d’, ‘.di’)</li>\n<li>delphi (‘*.pas’)</li>\n<li>diff (‘.diff’, ‘.patch’)</li>\n<li>dpatch (‘.dpatch’, ‘.darcspatch’)</li>\n<li>duel (‘.duel’, ‘.jbst’)</li>\n<li>dylan (‘.dylan’, ‘.dyl’)</li>\n<li>erb (‘*.erb’)</li>\n<li>erl (‘*.erl-sh’)</li>\n<li>erlang (‘.erl’, ‘.hrl’)</li>\n<li>evoque (‘*.evoque’)</li>\n<li>factor (‘*.factor’)</li>\n<li>felix (‘.flx’, ‘.flxh’)</li>\n<li>fortran (‘.f’, ‘.f90’)</li>\n<li>gas (‘.s’, ‘.S’)</li>\n<li>genshi (‘*.kid’)</li>\n<li>glsl (‘.vert’, ‘.frag’, ‘*.geo’)</li>\n<li>gnuplot (‘.plot’, ‘.plt’)</li>\n<li>go (‘*.go’)</li>\n<li>groff (‘.(1234567)’, ‘.man’)</li>\n<li>haml (‘*.haml’)</li>\n<li>haskell (‘*.hs’)</li>\n<li>html (‘.html’, ‘.htm’, ‘.xhtml’, ‘.xslt’)</li>\n<li>hx (‘*.hx’)</li>\n<li>hybris (‘.hy’, ‘.hyb’)</li>\n<li>ini (‘.ini’, ‘.cfg’)</li>\n<li>io (‘*.io’)</li>\n<li>ioke (‘*.ik’)</li>\n<li>irc (‘*.weechatlog’)</li>\n<li>jade (‘*.jade’)</li>\n<li>java (‘*.java’)</li>\n<li>js (‘*.js’)</li>\n<li>jsp (‘*.jsp’)</li>\n<li>lhs (‘*.lhs’)</li>\n<li>llvm (‘*.ll’)</li>\n<li>logtalk (‘*.lgt’)</li>\n<li>lua (‘.lua’, ‘.wlua’)</li>\n<li>make (‘.mak’, ‘Makefile’, ‘makefile’, ‘Makefile.‘, ‘GNUmakefile’)</li>\n<li>mako (‘*.mao’)</li>\n<li>maql (‘*.maql’)</li>\n<li>mason (‘.mhtml’, ‘.mc’, ‘*.mi’, ‘autohandler’, ‘dhandler’)</li>\n<li>markdown (‘*.md’)</li>\n<li>modelica (‘*.mo’)</li>\n<li>modula2 (‘.def’, ‘.mod’)</li>\n<li>moocode (‘*.moo’)</li>\n<li>mupad (‘*.mu’)</li>\n<li>mxml (‘*.mxml’)</li>\n<li>myghty (‘*.myt’, ‘autodelegate’)</li>\n<li>nasm (‘.asm’, ‘.ASM’)</li>\n<li>newspeak (‘*.ns2’)</li>\n<li>objdump (‘*.objdump’)</li>\n<li>objectivec (‘*.m’)</li>\n<li>objectivej (‘*.j’)</li>\n<li>ocaml (‘.ml’, ‘.mli’, ‘.mll’, ‘.mly’)</li>\n<li>ooc (‘*.ooc’)</li>\n<li>perl (‘.pl’, ‘.pm’)</li>\n<li>php (‘.php’, ‘.php(345)’)</li>\n<li>postscript (‘.ps’, ‘.eps’)</li>\n<li>pot (‘.pot’, ‘.po’)</li>\n<li>pov (‘.pov’, ‘.inc’)</li>\n<li>prolog (‘.prolog’, ‘.pro’, ‘*.pl’)</li>\n<li>properties (‘*.properties’)</li>\n<li>protobuf (‘*.proto’)</li>\n<li>py3tb (‘*.py3tb’)</li>\n<li>pytb (‘*.pytb’)</li>\n<li>python (‘.py’, ‘.pyw’, ‘.sc’, ‘SConstruct’, ‘SConscript’, ‘.tac’)</li>\n<li>rb (‘.rb’, ‘.rbw’, ‘Rakefile’, ‘.rake’, ‘.gemspec’, ‘.rbx’, ‘.duby’)</li>\n<li>rconsole (‘*.Rout’)</li>\n<li>rebol (‘.r’, ‘.r3’)</li>\n<li>redcode (‘*.cw’)</li>\n<li>rhtml (‘*.rhtml’)</li>\n<li>rst (‘.rst’, ‘.rest’)</li>\n<li>sass (‘*.sass’)</li>\n<li>scala (‘*.scala’)</li>\n<li>scaml (‘*.scaml’)</li>\n<li>scheme (‘*.scm’)</li>\n<li>scss (‘*.scss’)</li>\n<li>smalltalk (‘*.st’)</li>\n<li>smarty (‘*.tpl’)</li>\n<li>sourceslist (‘sources.list’)</li>\n<li>splus (‘.S’, ‘.R’)</li>\n<li>sql (‘*.sql’)</li>\n<li>sqlite3 (‘*.sqlite3-console’)</li>\n<li>squidconf (‘squid.conf’)</li>\n<li>ssp (‘*.ssp’)</li>\n<li>tcl (‘*.tcl’)</li>\n<li>tcsh (‘.tcsh’, ‘.csh’)</li>\n<li>tex (‘.tex’, ‘.aux’, ‘*.toc’)</li>\n<li>text (‘*.txt’)</li>\n<li>v (‘.v’, ‘.sv’)</li>\n<li>vala (‘.vala’, ‘.vapi’)</li>\n<li>vbnet (‘.vb’, ‘.bas’)</li>\n<li>velocity (‘.vm’, ‘.fhtml’)</li>\n<li>vim (‘*.vim’, ‘.vimrc’)</li>\n<li>xml (‘.xml’, ‘.xsl’, ‘.rss’, ‘.xslt’, ‘.xsd’, ‘.wsdl’)</li>\n<li>xquery (‘.xqy’, ‘.xquery’)</li>\n<li>xslt (‘.xsl’, ‘.xslt’)</li>\n<li>yaml (‘.yaml’, ‘.yml’)</li>\n</ul>"},{"title":"Node 循环依赖之源码解析","date":"2018-01-29T13:59:08.000Z","_content":"\n今天来讲一讲 Node 循环依赖的问题，以官网上的例子结合 Node 源码来分析为什么循环依赖不会导致死循环，以及循环依赖可能造成的问题。\n\n<!--more-->\n\n## 什么是循环依赖\n\n循环依赖是两个或多个模块之间的关系，它们直接或间接地相互依赖以正常运行。\n\n## 循环依赖的案例\n\n官网上给出的例子是这样的：\n\n`a.js`:\n\n```js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n```\n\n`b.js`:\n\n```js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n```\n\n`main.js`:\n\n```js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done=%j, b.done=%j', a.done, b.done);\n```\n\n官网的解释是： `main.js` 先加载 `a.js`，然后 `a.js` 中会加载 `b.js`，但是在 `b.js` 中又加载了 `a.js`。这个时候为了防止无限循环，会将`a.js` 未完成的 `exports` 对象返回给 `b.js` 模块，接着 `b.js` 完成加载，并且它的 `exports` 对象被提供给 `a.js` 模块。\n\n由此可以看出，之所以不会发生依赖的死循环，是因为模块能够导出未完成的 `exports` 对象。那么问题来了，为什么模块没有执行完，却能导出对象呢？\n\n下面通过分析模块源码 [lib/module.js](https://github.com/nodejs/node/blob/master/lib/module.js) 来解答这个问题。要注意的是，核心模块和文件模块（用户编写的模块）的加载是不同的，本文只讨论文件模块的加载。为了便于理解，会对源码进行简化。\n\n## Module 构造函数\n\n在 Node 中，每个模块在被 `require` 导入的时候都会创建一个模块实例，即 `Module` 实例，并且 Node 会缓存每个模块的实例，以便在下次 `require` 该模块的时候可以直接从缓存中返回。\n\n模块实例有一个 `exports` 属性，初始化为空对象。当我们在文件模块中通过 `module.exports` 或 `exports` 来导出的时候，其实就是在给模块实例的 `exports` 添加属性或者直接重写它。\n\n```js\n// Module 构造函数\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  updateChildren(parent, this, false);\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n}\n```\n\n## require 方法\n\n`require` 方法定义在 `Module` 的原型链上，被每个模块实例共享。\n\n```js\nModule.prototype.require = function(id) {\n  return Module._load(id, this, false);\n};\n```\n\n`require` 内部调用 `Module._load` 方法，下面是简化后的 `_load` 方法。\n\n```js\nModule._load = function(request, parent, isMain) {\n  // 获取模块文件的绝对路径\n  var filename = Module._resolveFilename(request, parent, isMain);\n\n  // 如果有缓存，直接返回缓存中的模块实例的 exports 属性\n  var cachedModule = Module._cache[filename];\n  if (cachedModule) {\n    return cachedModule.exports;\n  }\n\n  // 如果是核心模块，使用 NativeModule.require 方法加载\n  if (NativeModule.nonInternalExists(filename)) {\n    return NativeModule.require(filename);\n  }\n\n  // 创建模块实例，并存入缓存\n  var module = new Module(filename, parent);\n  Module._cache[filename] = module;\n\n  // 加载模块\n  module.load(filename);\n\n  return module.exports;\n};\n```\n\n上面的代码中，以模块的绝对路径作为模块id，优先从缓存中获取模块实例的 `exports` 属性。如果模块实例不在缓存中，则创建模块实例并存入缓存，最后根据模块id调用 `module.load` 加载该模块。\n\n## 加载模块\n\n模块的加载通过 `module.load` 方法完成，该方法根据模块的绝对路径确定文件扩展名，不同的文件扩展名采用不同的加载方法。\n\n```js\nModule.prototype.load = function(filename) {\n  this.filename = filename;\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\n\n  var extension = path.extname(filename) || '.js';\n  if (!Module._extensions[extension]) extension = '.js';\n  Module._extensions[extension](this, filename);\n  this.loaded = true;\n};\n```\n\n以 `.js` 扩展名为例，处理方法如下：\n\n```js\nModule._extensions['.js'] = function(module, filename) {\n  var content = fs.readFileSync(filename, 'utf8');\n  module._compile(internalModule.stripBOM(content), filename);\n};\n```\n\n`module._compile` 方法对模块文件进行编译执行。\n\n```js\nModule.prototype._compile = function(content, filename) {\n  // 将模块代码包装在一个函数中\n  var wrapper = Module.wrap(content);\n\n  // 在当前全局上下文中编译包装好的模块代码，并返回一个可执行的函数\n  var compiledWrapper = vm.runInThisContext(wrapper, { ... });\n\n  // 获取模块目录的路径\n  var dirname = path.dirname(filename);\n\n  // 扩展 require 方法，如添加 require.resolve、require.cache 等属性\n  var require = internalModule.makeRequireFunction(this);\n\n  // 传入模块实例的 exports 属性、require 方法、模块实例自身、完整文件路径\n  // 和文件目录来执行该函数。\n  var result = compiledWrapper.call(this.exports, this.exports, require, this,\n                                  filename, dirname);\n  return result;\n};\n```\n\n```js\nModule.wrap = function(script) {\n  return Module.wrapper[0] + script + Module.wrapper[1];\n};\n\nModule.wrapper = [\n  '(function (exports, require, module, __filename, __dirname) { ',\n  '\\n});'\n];\n```\n\n`vm.runInThisContext` 这个方法会在 V8 虚拟机环境中编译代码，并在当前全局的上下文中运行代码并返回结果。在全局上下文运行的好处是在模块中我们可以使用一些全局变量，如：`process`、`console` 等。具体参考：[vm 的官方文档](https://nodejs.org/dist/latest-v8.x/docs/api/vm.html)。\n\n上面的代码使用 `Module.wrap` 将模块代码包装在函数中，这样就避免了作用域被污染，接着通过执行 `vm.runInThisContext` 返回一个可执行的函数，最后传入当前模块实例的 `exports` 属性、模块实例的 `this`，以及`require` 方法、完整文件路径和文件目录来执行该函数。\n\n由此也可以看出，`module.exports` 和 `exports` 并不是全局的，而是在执行模块代码的包装函数时传入的参数（当前模块实例的 `exports`）。这也解释了为什么在文件模块中重写 `exports` 会无法导出，因为它只能改变函数形参的引用，而无法实际影响到当前模块实例的 `exports` 属性。\n\n## 循环依赖\n\n在分析完模块的整个加载过程后，回到上面那个问题：为什么模块没有执行完，却能导出对象呢？关键就在于，在加载模块时，如果模块没有缓存，会先创建模块实例，然后存入缓存，再编译执行模块代码。\n\n以官网的例子来说：\n\n1. `a.js` 先加载，所以先缓存 `a.js` 的模块实例，然后编译执行 `a.js`。\n\n2. 在执行 `a.js` 的过程中，先导出 `exports.done = false`，此时 `a.js` 模块实例的 `exports` 属性值为 `{ done: false }`。接着加载 `b.js`。\n\n3. `b.js` 在执行过程中发现需要加载 `a.js`，此时由于 `a.js` 模块已经被缓存，所以直接获取到缓存中的 `a.js` 模块实例的 `exports` 属性，值为 `{ done: false }`，然后继续执行。\n\n4. `b.js` 执行完毕返回，`a.js` 继续执行。\n\n这种循环依赖导致的问题很明显：\n\n1. `b.js` 在执行过程中获取到的 `a.js` 的导出可能是不完整的。\n\n2. 如果 `a.js` 在加载 `b.js` 后重写了 `module.exports`，`b.js` 中获取到的 `a.js` 的导出还是维持着旧的引用。\n\n具体的解决方案可以参考 Maples7 的博客：[Node.js 中的模块循环依赖及其解决](http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/)。\n\n## References\n\n- [Modules | Node.js Documentation](https://nodejs.org/docs/latest-v8.x/api/modules.html)\n- [VM | Node.js Documentation](https://nodejs.org/docs/latest-v8.x/api/vm.html)\n- [node/lib/module.js - Github](https://github.com/nodejs/node/blob/master/lib/module.js)\n- [require() 源码解读 - 阮一峰](http://www.ruanyifeng.com/blog/2015/05/require.html)\n- [Node.js 中的循环依赖 - SegmentFault](https://segmentfault.com/a/1190000004151411)\n- [Node.js 中的模块循环依赖及其解决 - Maples7](http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/)\n","source":"_posts/node-circular-dependency.md","raw":"---\ntitle: Node 循环依赖之源码解析\ndate: 2018-01-29 21:59:08\ntags:\n  - Node\n  - 模块\n  - 源码\n  - 循环依赖\ncategory: 码梦为生\n---\n\n今天来讲一讲 Node 循环依赖的问题，以官网上的例子结合 Node 源码来分析为什么循环依赖不会导致死循环，以及循环依赖可能造成的问题。\n\n<!--more-->\n\n## 什么是循环依赖\n\n循环依赖是两个或多个模块之间的关系，它们直接或间接地相互依赖以正常运行。\n\n## 循环依赖的案例\n\n官网上给出的例子是这样的：\n\n`a.js`:\n\n```js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n```\n\n`b.js`:\n\n```js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n```\n\n`main.js`:\n\n```js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done=%j, b.done=%j', a.done, b.done);\n```\n\n官网的解释是： `main.js` 先加载 `a.js`，然后 `a.js` 中会加载 `b.js`，但是在 `b.js` 中又加载了 `a.js`。这个时候为了防止无限循环，会将`a.js` 未完成的 `exports` 对象返回给 `b.js` 模块，接着 `b.js` 完成加载，并且它的 `exports` 对象被提供给 `a.js` 模块。\n\n由此可以看出，之所以不会发生依赖的死循环，是因为模块能够导出未完成的 `exports` 对象。那么问题来了，为什么模块没有执行完，却能导出对象呢？\n\n下面通过分析模块源码 [lib/module.js](https://github.com/nodejs/node/blob/master/lib/module.js) 来解答这个问题。要注意的是，核心模块和文件模块（用户编写的模块）的加载是不同的，本文只讨论文件模块的加载。为了便于理解，会对源码进行简化。\n\n## Module 构造函数\n\n在 Node 中，每个模块在被 `require` 导入的时候都会创建一个模块实例，即 `Module` 实例，并且 Node 会缓存每个模块的实例，以便在下次 `require` 该模块的时候可以直接从缓存中返回。\n\n模块实例有一个 `exports` 属性，初始化为空对象。当我们在文件模块中通过 `module.exports` 或 `exports` 来导出的时候，其实就是在给模块实例的 `exports` 添加属性或者直接重写它。\n\n```js\n// Module 构造函数\nfunction Module(id, parent) {\n  this.id = id;\n  this.exports = {};\n  this.parent = parent;\n  updateChildren(parent, this, false);\n  this.filename = null;\n  this.loaded = false;\n  this.children = [];\n}\n```\n\n## require 方法\n\n`require` 方法定义在 `Module` 的原型链上，被每个模块实例共享。\n\n```js\nModule.prototype.require = function(id) {\n  return Module._load(id, this, false);\n};\n```\n\n`require` 内部调用 `Module._load` 方法，下面是简化后的 `_load` 方法。\n\n```js\nModule._load = function(request, parent, isMain) {\n  // 获取模块文件的绝对路径\n  var filename = Module._resolveFilename(request, parent, isMain);\n\n  // 如果有缓存，直接返回缓存中的模块实例的 exports 属性\n  var cachedModule = Module._cache[filename];\n  if (cachedModule) {\n    return cachedModule.exports;\n  }\n\n  // 如果是核心模块，使用 NativeModule.require 方法加载\n  if (NativeModule.nonInternalExists(filename)) {\n    return NativeModule.require(filename);\n  }\n\n  // 创建模块实例，并存入缓存\n  var module = new Module(filename, parent);\n  Module._cache[filename] = module;\n\n  // 加载模块\n  module.load(filename);\n\n  return module.exports;\n};\n```\n\n上面的代码中，以模块的绝对路径作为模块id，优先从缓存中获取模块实例的 `exports` 属性。如果模块实例不在缓存中，则创建模块实例并存入缓存，最后根据模块id调用 `module.load` 加载该模块。\n\n## 加载模块\n\n模块的加载通过 `module.load` 方法完成，该方法根据模块的绝对路径确定文件扩展名，不同的文件扩展名采用不同的加载方法。\n\n```js\nModule.prototype.load = function(filename) {\n  this.filename = filename;\n  this.paths = Module._nodeModulePaths(path.dirname(filename));\n\n  var extension = path.extname(filename) || '.js';\n  if (!Module._extensions[extension]) extension = '.js';\n  Module._extensions[extension](this, filename);\n  this.loaded = true;\n};\n```\n\n以 `.js` 扩展名为例，处理方法如下：\n\n```js\nModule._extensions['.js'] = function(module, filename) {\n  var content = fs.readFileSync(filename, 'utf8');\n  module._compile(internalModule.stripBOM(content), filename);\n};\n```\n\n`module._compile` 方法对模块文件进行编译执行。\n\n```js\nModule.prototype._compile = function(content, filename) {\n  // 将模块代码包装在一个函数中\n  var wrapper = Module.wrap(content);\n\n  // 在当前全局上下文中编译包装好的模块代码，并返回一个可执行的函数\n  var compiledWrapper = vm.runInThisContext(wrapper, { ... });\n\n  // 获取模块目录的路径\n  var dirname = path.dirname(filename);\n\n  // 扩展 require 方法，如添加 require.resolve、require.cache 等属性\n  var require = internalModule.makeRequireFunction(this);\n\n  // 传入模块实例的 exports 属性、require 方法、模块实例自身、完整文件路径\n  // 和文件目录来执行该函数。\n  var result = compiledWrapper.call(this.exports, this.exports, require, this,\n                                  filename, dirname);\n  return result;\n};\n```\n\n```js\nModule.wrap = function(script) {\n  return Module.wrapper[0] + script + Module.wrapper[1];\n};\n\nModule.wrapper = [\n  '(function (exports, require, module, __filename, __dirname) { ',\n  '\\n});'\n];\n```\n\n`vm.runInThisContext` 这个方法会在 V8 虚拟机环境中编译代码，并在当前全局的上下文中运行代码并返回结果。在全局上下文运行的好处是在模块中我们可以使用一些全局变量，如：`process`、`console` 等。具体参考：[vm 的官方文档](https://nodejs.org/dist/latest-v8.x/docs/api/vm.html)。\n\n上面的代码使用 `Module.wrap` 将模块代码包装在函数中，这样就避免了作用域被污染，接着通过执行 `vm.runInThisContext` 返回一个可执行的函数，最后传入当前模块实例的 `exports` 属性、模块实例的 `this`，以及`require` 方法、完整文件路径和文件目录来执行该函数。\n\n由此也可以看出，`module.exports` 和 `exports` 并不是全局的，而是在执行模块代码的包装函数时传入的参数（当前模块实例的 `exports`）。这也解释了为什么在文件模块中重写 `exports` 会无法导出，因为它只能改变函数形参的引用，而无法实际影响到当前模块实例的 `exports` 属性。\n\n## 循环依赖\n\n在分析完模块的整个加载过程后，回到上面那个问题：为什么模块没有执行完，却能导出对象呢？关键就在于，在加载模块时，如果模块没有缓存，会先创建模块实例，然后存入缓存，再编译执行模块代码。\n\n以官网的例子来说：\n\n1. `a.js` 先加载，所以先缓存 `a.js` 的模块实例，然后编译执行 `a.js`。\n\n2. 在执行 `a.js` 的过程中，先导出 `exports.done = false`，此时 `a.js` 模块实例的 `exports` 属性值为 `{ done: false }`。接着加载 `b.js`。\n\n3. `b.js` 在执行过程中发现需要加载 `a.js`，此时由于 `a.js` 模块已经被缓存，所以直接获取到缓存中的 `a.js` 模块实例的 `exports` 属性，值为 `{ done: false }`，然后继续执行。\n\n4. `b.js` 执行完毕返回，`a.js` 继续执行。\n\n这种循环依赖导致的问题很明显：\n\n1. `b.js` 在执行过程中获取到的 `a.js` 的导出可能是不完整的。\n\n2. 如果 `a.js` 在加载 `b.js` 后重写了 `module.exports`，`b.js` 中获取到的 `a.js` 的导出还是维持着旧的引用。\n\n具体的解决方案可以参考 Maples7 的博客：[Node.js 中的模块循环依赖及其解决](http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/)。\n\n## References\n\n- [Modules | Node.js Documentation](https://nodejs.org/docs/latest-v8.x/api/modules.html)\n- [VM | Node.js Documentation](https://nodejs.org/docs/latest-v8.x/api/vm.html)\n- [node/lib/module.js - Github](https://github.com/nodejs/node/blob/master/lib/module.js)\n- [require() 源码解读 - 阮一峰](http://www.ruanyifeng.com/blog/2015/05/require.html)\n- [Node.js 中的循环依赖 - SegmentFault](https://segmentfault.com/a/1190000004151411)\n- [Node.js 中的模块循环依赖及其解决 - Maples7](http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/)\n","slug":"node-circular-dependency","published":1,"updated":"2018-09-28T14:06:17.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpx001hslm4r4fnf708","content":"<p>今天来讲一讲 Node 循环依赖的问题，以官网上的例子结合 Node 源码来分析为什么循环依赖不会导致死循环，以及循环依赖可能造成的问题。</p>\n<a id=\"more\"></a>\n<h2 id=\"什么是循环依赖\"><a href=\"#什么是循环依赖\" class=\"headerlink\" title=\"什么是循环依赖\"></a>什么是循环依赖</h2><p>循环依赖是两个或多个模块之间的关系，它们直接或间接地相互依赖以正常运行。</p>\n<h2 id=\"循环依赖的案例\"><a href=\"#循环依赖的案例\" class=\"headerlink\" title=\"循环依赖的案例\"></a>循环依赖的案例</h2><p>官网上给出的例子是这样的：</p>\n<p><code>a.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>b.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>main.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done=%j, b.done=%j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>官网的解释是： <code>main.js</code> 先加载 <code>a.js</code>，然后 <code>a.js</code> 中会加载 <code>b.js</code>，但是在 <code>b.js</code> 中又加载了 <code>a.js</code>。这个时候为了防止无限循环，会将<code>a.js</code> 未完成的 <code>exports</code> 对象返回给 <code>b.js</code> 模块，接着 <code>b.js</code> 完成加载，并且它的 <code>exports</code> 对象被提供给 <code>a.js</code> 模块。</p>\n<p>由此可以看出，之所以不会发生依赖的死循环，是因为模块能够导出未完成的 <code>exports</code> 对象。那么问题来了，为什么模块没有执行完，却能导出对象呢？</p>\n<p>下面通过分析模块源码 <a href=\"https://github.com/nodejs/node/blob/master/lib/module.js\" target=\"_blank\" rel=\"noopener\">lib/module.js</a> 来解答这个问题。要注意的是，核心模块和文件模块（用户编写的模块）的加载是不同的，本文只讨论文件模块的加载。为了便于理解，会对源码进行简化。</p>\n<h2 id=\"Module-构造函数\"><a href=\"#Module-构造函数\" class=\"headerlink\" title=\"Module 构造函数\"></a>Module 构造函数</h2><p>在 Node 中，每个模块在被 <code>require</code> 导入的时候都会创建一个模块实例，即 <code>Module</code> 实例，并且 Node 会缓存每个模块的实例，以便在下次 <code>require</code> 该模块的时候可以直接从缓存中返回。</p>\n<p>模块实例有一个 <code>exports</code> 属性，初始化为空对象。当我们在文件模块中通过 <code>module.exports</code> 或 <code>exports</code> 来导出的时候，其实就是在给模块实例的 <code>exports</code> 添加属性或者直接重写它。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Module 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span>(<span class=\"params\">id, parent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.exports = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">  updateChildren(parent, <span class=\"keyword\">this</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.filename = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"require-方法\"><a href=\"#require-方法\" class=\"headerlink\" title=\"require 方法\"></a>require 方法</h2><p><code>require</code> 方法定义在 <code>Module</code> 的原型链上，被每个模块实例共享。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.prototype.require = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Module._load(id, <span class=\"keyword\">this</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>require</code> 内部调用 <code>Module._load</code> 方法，下面是简化后的 <code>_load</code> 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module._load = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, parent, isMain</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取模块文件的绝对路径</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> filename = Module._resolveFilename(request, parent, isMain);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果有缓存，直接返回缓存中的模块实例的 exports 属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cachedModule = Module._cache[filename];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cachedModule) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cachedModule.exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果是核心模块，使用 NativeModule.require 方法加载</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (NativeModule.nonInternalExists(filename)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> NativeModule.require(filename);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建模块实例，并存入缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = <span class=\"keyword\">new</span> Module(filename, parent);</span><br><span class=\"line\">  Module._cache[filename] = <span class=\"built_in\">module</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载模块</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.load(filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，以模块的绝对路径作为模块id，优先从缓存中获取模块实例的 <code>exports</code> 属性。如果模块实例不在缓存中，则创建模块实例并存入缓存，最后根据模块id调用 <code>module.load</code> 加载该模块。</p>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><p>模块的加载通过 <code>module.load</code> 方法完成，该方法根据模块的绝对路径确定文件扩展名，不同的文件扩展名采用不同的加载方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.prototype.load = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.filename = filename;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.paths = Module._nodeModulePaths(path.dirname(filename));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> extension = path.extname(filename) || <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!Module._extensions[extension]) extension = <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">  Module._extensions[extension](<span class=\"keyword\">this</span>, filename);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以 <code>.js</code> 扩展名为例，处理方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module._extensions[<span class=\"string\">'.js'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> content = fs.readFileSync(filename, <span class=\"string\">'utf8'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">module</span>._compile(internalModule.stripBOM(content), filename);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>module._compile</code> 方法对模块文件进行编译执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.prototype._compile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content, filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将模块代码包装在一个函数中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> wrapper = Module.wrap(content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在当前全局上下文中编译包装好的模块代码，并返回一个可执行的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> compiledWrapper = vm.runInThisContext(wrapper, &#123; ... &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取模块目录的路径</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dirname = path.dirname(filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 扩展 require 方法，如添加 require.resolve、require.cache 等属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">require</span> = internalModule.makeRequireFunction(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传入模块实例的 exports 属性、require 方法、模块实例自身、完整文件路径</span></span><br><span class=\"line\">  <span class=\"comment\">// 和文件目录来执行该函数。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = compiledWrapper.call(<span class=\"keyword\">this</span>.exports, <span class=\"keyword\">this</span>.exports, <span class=\"built_in\">require</span>, <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                                  filename, dirname);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.wrap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">script</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Module.wrapper[<span class=\"number\">0</span>] + script + Module.wrapper[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Module.wrapper = [</span><br><span class=\"line\">  <span class=\"string\">'(function (exports, require, module, __filename, __dirname) &#123; '</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\n&#125;);'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p><code>vm.runInThisContext</code> 这个方法会在 V8 虚拟机环境中编译代码，并在当前全局的上下文中运行代码并返回结果。在全局上下文运行的好处是在模块中我们可以使用一些全局变量，如：<code>process</code>、<code>console</code> 等。具体参考：<a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/vm.html\" target=\"_blank\" rel=\"noopener\">vm 的官方文档</a>。</p>\n<p>上面的代码使用 <code>Module.wrap</code> 将模块代码包装在函数中，这样就避免了作用域被污染，接着通过执行 <code>vm.runInThisContext</code> 返回一个可执行的函数，最后传入当前模块实例的 <code>exports</code> 属性、模块实例的 <code>this</code>，以及<code>require</code> 方法、完整文件路径和文件目录来执行该函数。</p>\n<p>由此也可以看出，<code>module.exports</code> 和 <code>exports</code> 并不是全局的，而是在执行模块代码的包装函数时传入的参数（当前模块实例的 <code>exports</code>）。这也解释了为什么在文件模块中重写 <code>exports</code> 会无法导出，因为它只能改变函数形参的引用，而无法实际影响到当前模块实例的 <code>exports</code> 属性。</p>\n<h2 id=\"循环依赖\"><a href=\"#循环依赖\" class=\"headerlink\" title=\"循环依赖\"></a>循环依赖</h2><p>在分析完模块的整个加载过程后，回到上面那个问题：为什么模块没有执行完，却能导出对象呢？关键就在于，在加载模块时，如果模块没有缓存，会先创建模块实例，然后存入缓存，再编译执行模块代码。</p>\n<p>以官网的例子来说：</p>\n<ol>\n<li><p><code>a.js</code> 先加载，所以先缓存 <code>a.js</code> 的模块实例，然后编译执行 <code>a.js</code>。</p>\n</li>\n<li><p>在执行 <code>a.js</code> 的过程中，先导出 <code>exports.done = false</code>，此时 <code>a.js</code> 模块实例的 <code>exports</code> 属性值为 <code>{ done: false }</code>。接着加载 <code>b.js</code>。</p>\n</li>\n<li><p><code>b.js</code> 在执行过程中发现需要加载 <code>a.js</code>，此时由于 <code>a.js</code> 模块已经被缓存，所以直接获取到缓存中的 <code>a.js</code> 模块实例的 <code>exports</code> 属性，值为 <code>{ done: false }</code>，然后继续执行。</p>\n</li>\n<li><p><code>b.js</code> 执行完毕返回，<code>a.js</code> 继续执行。</p>\n</li>\n</ol>\n<p>这种循环依赖导致的问题很明显：</p>\n<ol>\n<li><p><code>b.js</code> 在执行过程中获取到的 <code>a.js</code> 的导出可能是不完整的。</p>\n</li>\n<li><p>如果 <code>a.js</code> 在加载 <code>b.js</code> 后重写了 <code>module.exports</code>，<code>b.js</code> 中获取到的 <code>a.js</code> 的导出还是维持着旧的引用。</p>\n</li>\n</ol>\n<p>具体的解决方案可以参考 Maples7 的博客：<a href=\"http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/\" target=\"_blank\" rel=\"noopener\">Node.js 中的模块循环依赖及其解决</a>。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://nodejs.org/docs/latest-v8.x/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules | Node.js Documentation</a></li>\n<li><a href=\"https://nodejs.org/docs/latest-v8.x/api/vm.html\" target=\"_blank\" rel=\"noopener\">VM | Node.js Documentation</a></li>\n<li><a href=\"https://github.com/nodejs/node/blob/master/lib/module.js\" target=\"_blank\" rel=\"noopener\">node/lib/module.js - Github</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/05/require.html\" target=\"_blank\" rel=\"noopener\">require() 源码解读 - 阮一峰</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004151411\" target=\"_blank\" rel=\"noopener\">Node.js 中的循环依赖 - SegmentFault</a></li>\n<li><a href=\"http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/\" target=\"_blank\" rel=\"noopener\">Node.js 中的模块循环依赖及其解决 - Maples7</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>今天来讲一讲 Node 循环依赖的问题，以官网上的例子结合 Node 源码来分析为什么循环依赖不会导致死循环，以及循环依赖可能造成的问题。</p>","more":"<h2 id=\"什么是循环依赖\"><a href=\"#什么是循环依赖\" class=\"headerlink\" title=\"什么是循环依赖\"></a>什么是循环依赖</h2><p>循环依赖是两个或多个模块之间的关系，它们直接或间接地相互依赖以正常运行。</p>\n<h2 id=\"循环依赖的案例\"><a href=\"#循环依赖的案例\" class=\"headerlink\" title=\"循环依赖的案例\"></a>循环依赖的案例</h2><p>官网上给出的例子是这样的：</p>\n<p><code>a.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>b.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>main.js</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done=%j, b.done=%j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>官网的解释是： <code>main.js</code> 先加载 <code>a.js</code>，然后 <code>a.js</code> 中会加载 <code>b.js</code>，但是在 <code>b.js</code> 中又加载了 <code>a.js</code>。这个时候为了防止无限循环，会将<code>a.js</code> 未完成的 <code>exports</code> 对象返回给 <code>b.js</code> 模块，接着 <code>b.js</code> 完成加载，并且它的 <code>exports</code> 对象被提供给 <code>a.js</code> 模块。</p>\n<p>由此可以看出，之所以不会发生依赖的死循环，是因为模块能够导出未完成的 <code>exports</code> 对象。那么问题来了，为什么模块没有执行完，却能导出对象呢？</p>\n<p>下面通过分析模块源码 <a href=\"https://github.com/nodejs/node/blob/master/lib/module.js\" target=\"_blank\" rel=\"noopener\">lib/module.js</a> 来解答这个问题。要注意的是，核心模块和文件模块（用户编写的模块）的加载是不同的，本文只讨论文件模块的加载。为了便于理解，会对源码进行简化。</p>\n<h2 id=\"Module-构造函数\"><a href=\"#Module-构造函数\" class=\"headerlink\" title=\"Module 构造函数\"></a>Module 构造函数</h2><p>在 Node 中，每个模块在被 <code>require</code> 导入的时候都会创建一个模块实例，即 <code>Module</code> 实例，并且 Node 会缓存每个模块的实例，以便在下次 <code>require</code> 该模块的时候可以直接从缓存中返回。</p>\n<p>模块实例有一个 <code>exports</code> 属性，初始化为空对象。当我们在文件模块中通过 <code>module.exports</code> 或 <code>exports</code> 来导出的时候，其实就是在给模块实例的 <code>exports</code> 添加属性或者直接重写它。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Module 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Module</span>(<span class=\"params\">id, parent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.exports = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.parent = parent;</span><br><span class=\"line\">  updateChildren(parent, <span class=\"keyword\">this</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.filename = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"require-方法\"><a href=\"#require-方法\" class=\"headerlink\" title=\"require 方法\"></a>require 方法</h2><p><code>require</code> 方法定义在 <code>Module</code> 的原型链上，被每个模块实例共享。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.prototype.require = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Module._load(id, <span class=\"keyword\">this</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>require</code> 内部调用 <code>Module._load</code> 方法，下面是简化后的 <code>_load</code> 方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module._load = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, parent, isMain</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取模块文件的绝对路径</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> filename = Module._resolveFilename(request, parent, isMain);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果有缓存，直接返回缓存中的模块实例的 exports 属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cachedModule = Module._cache[filename];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cachedModule) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cachedModule.exports;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 如果是核心模块，使用 NativeModule.require 方法加载</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (NativeModule.nonInternalExists(filename)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> NativeModule.require(filename);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 创建模块实例，并存入缓存</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = <span class=\"keyword\">new</span> Module(filename, parent);</span><br><span class=\"line\">  Module._cache[filename] = <span class=\"built_in\">module</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载模块</span></span><br><span class=\"line\">  <span class=\"built_in\">module</span>.load(filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">module</span>.exports;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面的代码中，以模块的绝对路径作为模块id，优先从缓存中获取模块实例的 <code>exports</code> 属性。如果模块实例不在缓存中，则创建模块实例并存入缓存，最后根据模块id调用 <code>module.load</code> 加载该模块。</p>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><p>模块的加载通过 <code>module.load</code> 方法完成，该方法根据模块的绝对路径确定文件扩展名，不同的文件扩展名采用不同的加载方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.prototype.load = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.filename = filename;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.paths = Module._nodeModulePaths(path.dirname(filename));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> extension = path.extname(filename) || <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!Module._extensions[extension]) extension = <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">  Module._extensions[extension](<span class=\"keyword\">this</span>, filename);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.loaded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>以 <code>.js</code> 扩展名为例，处理方法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module._extensions[<span class=\"string\">'.js'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> content = fs.readFileSync(filename, <span class=\"string\">'utf8'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">module</span>._compile(internalModule.stripBOM(content), filename);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>module._compile</code> 方法对模块文件进行编译执行。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.prototype._compile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">content, filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将模块代码包装在一个函数中</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> wrapper = Module.wrap(content);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 在当前全局上下文中编译包装好的模块代码，并返回一个可执行的函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> compiledWrapper = vm.runInThisContext(wrapper, &#123; ... &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 获取模块目录的路径</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dirname = path.dirname(filename);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 扩展 require 方法，如添加 require.resolve、require.cache 等属性</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">require</span> = internalModule.makeRequireFunction(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 传入模块实例的 exports 属性、require 方法、模块实例自身、完整文件路径</span></span><br><span class=\"line\">  <span class=\"comment\">// 和文件目录来执行该函数。</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = compiledWrapper.call(<span class=\"keyword\">this</span>.exports, <span class=\"keyword\">this</span>.exports, <span class=\"built_in\">require</span>, <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                                  filename, dirname);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Module.wrap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">script</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Module.wrapper[<span class=\"number\">0</span>] + script + Module.wrapper[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Module.wrapper = [</span><br><span class=\"line\">  <span class=\"string\">'(function (exports, require, module, __filename, __dirname) &#123; '</span>,</span><br><span class=\"line\">  <span class=\"string\">'\\n&#125;);'</span></span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p><code>vm.runInThisContext</code> 这个方法会在 V8 虚拟机环境中编译代码，并在当前全局的上下文中运行代码并返回结果。在全局上下文运行的好处是在模块中我们可以使用一些全局变量，如：<code>process</code>、<code>console</code> 等。具体参考：<a href=\"https://nodejs.org/dist/latest-v8.x/docs/api/vm.html\" target=\"_blank\" rel=\"noopener\">vm 的官方文档</a>。</p>\n<p>上面的代码使用 <code>Module.wrap</code> 将模块代码包装在函数中，这样就避免了作用域被污染，接着通过执行 <code>vm.runInThisContext</code> 返回一个可执行的函数，最后传入当前模块实例的 <code>exports</code> 属性、模块实例的 <code>this</code>，以及<code>require</code> 方法、完整文件路径和文件目录来执行该函数。</p>\n<p>由此也可以看出，<code>module.exports</code> 和 <code>exports</code> 并不是全局的，而是在执行模块代码的包装函数时传入的参数（当前模块实例的 <code>exports</code>）。这也解释了为什么在文件模块中重写 <code>exports</code> 会无法导出，因为它只能改变函数形参的引用，而无法实际影响到当前模块实例的 <code>exports</code> 属性。</p>\n<h2 id=\"循环依赖\"><a href=\"#循环依赖\" class=\"headerlink\" title=\"循环依赖\"></a>循环依赖</h2><p>在分析完模块的整个加载过程后，回到上面那个问题：为什么模块没有执行完，却能导出对象呢？关键就在于，在加载模块时，如果模块没有缓存，会先创建模块实例，然后存入缓存，再编译执行模块代码。</p>\n<p>以官网的例子来说：</p>\n<ol>\n<li><p><code>a.js</code> 先加载，所以先缓存 <code>a.js</code> 的模块实例，然后编译执行 <code>a.js</code>。</p>\n</li>\n<li><p>在执行 <code>a.js</code> 的过程中，先导出 <code>exports.done = false</code>，此时 <code>a.js</code> 模块实例的 <code>exports</code> 属性值为 <code>{ done: false }</code>。接着加载 <code>b.js</code>。</p>\n</li>\n<li><p><code>b.js</code> 在执行过程中发现需要加载 <code>a.js</code>，此时由于 <code>a.js</code> 模块已经被缓存，所以直接获取到缓存中的 <code>a.js</code> 模块实例的 <code>exports</code> 属性，值为 <code>{ done: false }</code>，然后继续执行。</p>\n</li>\n<li><p><code>b.js</code> 执行完毕返回，<code>a.js</code> 继续执行。</p>\n</li>\n</ol>\n<p>这种循环依赖导致的问题很明显：</p>\n<ol>\n<li><p><code>b.js</code> 在执行过程中获取到的 <code>a.js</code> 的导出可能是不完整的。</p>\n</li>\n<li><p>如果 <code>a.js</code> 在加载 <code>b.js</code> 后重写了 <code>module.exports</code>，<code>b.js</code> 中获取到的 <code>a.js</code> 的导出还是维持着旧的引用。</p>\n</li>\n</ol>\n<p>具体的解决方案可以参考 Maples7 的博客：<a href=\"http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/\" target=\"_blank\" rel=\"noopener\">Node.js 中的模块循环依赖及其解决</a>。</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://nodejs.org/docs/latest-v8.x/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules | Node.js Documentation</a></li>\n<li><a href=\"https://nodejs.org/docs/latest-v8.x/api/vm.html\" target=\"_blank\" rel=\"noopener\">VM | Node.js Documentation</a></li>\n<li><a href=\"https://github.com/nodejs/node/blob/master/lib/module.js\" target=\"_blank\" rel=\"noopener\">node/lib/module.js - Github</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/05/require.html\" target=\"_blank\" rel=\"noopener\">require() 源码解读 - 阮一峰</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000004151411\" target=\"_blank\" rel=\"noopener\">Node.js 中的循环依赖 - SegmentFault</a></li>\n<li><a href=\"http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/\" target=\"_blank\" rel=\"noopener\">Node.js 中的模块循环依赖及其解决 - Maples7</a></li>\n</ul>"},{"title":"Protocol Buffer 介绍","date":"2018-06-01T18:39:05.000Z","_content":"\n`protocol buffer` 是一种语言无关，平台无关，可扩展的序列化结构化数据的方式，用于通信协议，数据存储等。\n\n<!--more-->\n\n`protocol buffer` 目前支持Java，Python，Objective-C 和 C++ 中的生成代码。使用新的 `proto3` 语言版本，您还可以使用 Go，Ruby 和 C＃ 等更多语言。\n\n## 为什么选择 Protocol Buffer ？\n\n通常我们定义好的请求和响应在客户端和服务端都需要手动编码/解码，但是随着接口的版本变化，可能需要对版本号进行判断才能做相应的处理。这样使得新的协议变得复杂，因为开发者必须确保请求发起者与处理请求的实际服务器之间的所有服务器都能理解新协议，然后才能开始使用新协议。\n\n`protocol buffer` 旨在解决这些问题：\n\n- 可以很容易地引入新的字段，中间服务器可以简单地解析并传递数据，而无需了解所有字段。\n\n- 协议格式的描述性更强，可以用各种语言来处理（C ++，Java等），并且速度更快，空间更小。\n\n## 开始使用\n\n开始使用 `protocol buffer` 的第一步，就是创建一个 `.proto` 文件来定义 `protocol buffer` 消息类型，指定你想要序列化的信息结构。\n\n每个 `protocol buffer` 消息是一个小的逻辑信息记录，包含一系列 `name-value` 对。下面是 `.proto` 文件的一个例子，定义了一条包含人员信息的消息：\n\n```\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    required string number = 1;\n    optional PhoneType type = 2 [default = HOME];\n  }\n\n  repeated PhoneNumber phone = 4;\n}\n```\n\n正如你所看到的，消息格式很简单。每种消息类型（如 `message Person`）都有一个或多个带有唯一编号的字段，每个字段都有一个名称和一个值类型。其中值类型可以是数字（整数或浮点数），布尔值，字符串，原始字节，甚至可以是其他 `protocol buffer` 的消息类型。在消息类型中，你可以指定可选字段，必填字段和重复字段。访问 [Protocol Buffer Language Guide](https://developers.google.com/protocol-buffers/docs/proto3) 以获取更多有关 `.proto` 文件的信息。\n\n当在 `.proto` 文件中定义完消息后，你需要运行 `protocol buffer` 编译器为你使用的编程语言生成数据访问类。这为每个字段提供了简单的访问器（如 `name()` 和 `set_name()`），以及对整个结构的进行序列化/解析的方法。例如，如果您选择的语言是 `C++`，那么在上面的示例中运行编译器将生成一个名为 `Person` 的类。然后，就可以在应用程序中使用此类来填充，序列化并检索 `Person` `protocol buffer` 消息。你可能会写下如下代码：\n\n```c++\nPerson person;\nperson.set_name(\"John Doe\");\nperson.set_id(1234);\nperson.set_email(\"jdoe@example.com\");\nfstream output(\"myfile\", ios::out | ios::binary);\nperson.SerializeToOstream(&output);\n```\n\n然后，可以通过以下方式读取消息：\n\n```c++\nfstream input(\"myfile\", ios::in | ios::binary);\nPerson person;\nperson.ParseFromIstream(&input);\ncout << \"Name: \" << person.name() << endl;\ncout << \"E-mail: \" << person.email() << endl;\n```\n\n你可以将新字段添加到消息格式中，而不会破坏向后兼容性; 解析时旧的二进制文件会简单地忽略新字段。所以如果你有一个使用 `protocol buffer` 作为数据格式的通信协议，你可以扩展你的协议，而不用担心破坏现有的代码。\n\n详细的 `protocol buffer` 介绍以及使用请参考 [官方文档](https://developers.google.com/protocol-buffers/)。\n","source":"_posts/protocol-buffer-introduction.md","raw":"---\ntitle: Protocol Buffer 介绍\ndate: 2018-06-02 02:39:05\ntags: Protocol Buffer\ncategory: 码梦为生\n---\n\n`protocol buffer` 是一种语言无关，平台无关，可扩展的序列化结构化数据的方式，用于通信协议，数据存储等。\n\n<!--more-->\n\n`protocol buffer` 目前支持Java，Python，Objective-C 和 C++ 中的生成代码。使用新的 `proto3` 语言版本，您还可以使用 Go，Ruby 和 C＃ 等更多语言。\n\n## 为什么选择 Protocol Buffer ？\n\n通常我们定义好的请求和响应在客户端和服务端都需要手动编码/解码，但是随着接口的版本变化，可能需要对版本号进行判断才能做相应的处理。这样使得新的协议变得复杂，因为开发者必须确保请求发起者与处理请求的实际服务器之间的所有服务器都能理解新协议，然后才能开始使用新协议。\n\n`protocol buffer` 旨在解决这些问题：\n\n- 可以很容易地引入新的字段，中间服务器可以简单地解析并传递数据，而无需了解所有字段。\n\n- 协议格式的描述性更强，可以用各种语言来处理（C ++，Java等），并且速度更快，空间更小。\n\n## 开始使用\n\n开始使用 `protocol buffer` 的第一步，就是创建一个 `.proto` 文件来定义 `protocol buffer` 消息类型，指定你想要序列化的信息结构。\n\n每个 `protocol buffer` 消息是一个小的逻辑信息记录，包含一系列 `name-value` 对。下面是 `.proto` 文件的一个例子，定义了一条包含人员信息的消息：\n\n```\nmessage Person {\n  required string name = 1;\n  required int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    required string number = 1;\n    optional PhoneType type = 2 [default = HOME];\n  }\n\n  repeated PhoneNumber phone = 4;\n}\n```\n\n正如你所看到的，消息格式很简单。每种消息类型（如 `message Person`）都有一个或多个带有唯一编号的字段，每个字段都有一个名称和一个值类型。其中值类型可以是数字（整数或浮点数），布尔值，字符串，原始字节，甚至可以是其他 `protocol buffer` 的消息类型。在消息类型中，你可以指定可选字段，必填字段和重复字段。访问 [Protocol Buffer Language Guide](https://developers.google.com/protocol-buffers/docs/proto3) 以获取更多有关 `.proto` 文件的信息。\n\n当在 `.proto` 文件中定义完消息后，你需要运行 `protocol buffer` 编译器为你使用的编程语言生成数据访问类。这为每个字段提供了简单的访问器（如 `name()` 和 `set_name()`），以及对整个结构的进行序列化/解析的方法。例如，如果您选择的语言是 `C++`，那么在上面的示例中运行编译器将生成一个名为 `Person` 的类。然后，就可以在应用程序中使用此类来填充，序列化并检索 `Person` `protocol buffer` 消息。你可能会写下如下代码：\n\n```c++\nPerson person;\nperson.set_name(\"John Doe\");\nperson.set_id(1234);\nperson.set_email(\"jdoe@example.com\");\nfstream output(\"myfile\", ios::out | ios::binary);\nperson.SerializeToOstream(&output);\n```\n\n然后，可以通过以下方式读取消息：\n\n```c++\nfstream input(\"myfile\", ios::in | ios::binary);\nPerson person;\nperson.ParseFromIstream(&input);\ncout << \"Name: \" << person.name() << endl;\ncout << \"E-mail: \" << person.email() << endl;\n```\n\n你可以将新字段添加到消息格式中，而不会破坏向后兼容性; 解析时旧的二进制文件会简单地忽略新字段。所以如果你有一个使用 `protocol buffer` 作为数据格式的通信协议，你可以扩展你的协议，而不用担心破坏现有的代码。\n\n详细的 `protocol buffer` 介绍以及使用请参考 [官方文档](https://developers.google.com/protocol-buffers/)。\n","slug":"protocol-buffer-introduction","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpy001kslm4gejwvnne","content":"<p><code>protocol buffer</code> 是一种语言无关，平台无关，可扩展的序列化结构化数据的方式，用于通信协议，数据存储等。</p>\n<a id=\"more\"></a>\n<p><code>protocol buffer</code> 目前支持Java，Python，Objective-C 和 C++ 中的生成代码。使用新的 <code>proto3</code> 语言版本，您还可以使用 Go，Ruby 和 C＃ 等更多语言。</p>\n<h2 id=\"为什么选择-Protocol-Buffer-？\"><a href=\"#为什么选择-Protocol-Buffer-？\" class=\"headerlink\" title=\"为什么选择 Protocol Buffer ？\"></a>为什么选择 Protocol Buffer ？</h2><p>通常我们定义好的请求和响应在客户端和服务端都需要手动编码/解码，但是随着接口的版本变化，可能需要对版本号进行判断才能做相应的处理。这样使得新的协议变得复杂，因为开发者必须确保请求发起者与处理请求的实际服务器之间的所有服务器都能理解新协议，然后才能开始使用新协议。</p>\n<p><code>protocol buffer</code> 旨在解决这些问题：</p>\n<ul>\n<li><p>可以很容易地引入新的字段，中间服务器可以简单地解析并传递数据，而无需了解所有字段。</p>\n</li>\n<li><p>协议格式的描述性更强，可以用各种语言来处理（C ++，Java等），并且速度更快，空间更小。</p>\n</li>\n</ul>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>开始使用 <code>protocol buffer</code> 的第一步，就是创建一个 <code>.proto</code> 文件来定义 <code>protocol buffer</code> 消息类型，指定你想要序列化的信息结构。</p>\n<p>每个 <code>protocol buffer</code> 消息是一个小的逻辑信息记录，包含一系列 <code>name-value</code> 对。下面是 <code>.proto</code> 文件的一个例子，定义了一条包含人员信息的消息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  required string name = 1;</span><br><span class=\"line\">  required int32 id = 2;</span><br><span class=\"line\">  optional string email = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">  enum PhoneType &#123;</span><br><span class=\"line\">    MOBILE = 0;</span><br><span class=\"line\">    HOME = 1;</span><br><span class=\"line\">    WORK = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  message PhoneNumber &#123;</span><br><span class=\"line\">    required string number = 1;</span><br><span class=\"line\">    optional PhoneType type = 2 [default = HOME];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  repeated PhoneNumber phone = 4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如你所看到的，消息格式很简单。每种消息类型（如 <code>message Person</code>）都有一个或多个带有唯一编号的字段，每个字段都有一个名称和一个值类型。其中值类型可以是数字（整数或浮点数），布尔值，字符串，原始字节，甚至可以是其他 <code>protocol buffer</code> 的消息类型。在消息类型中，你可以指定可选字段，必填字段和重复字段。访问 <a href=\"https://developers.google.com/protocol-buffers/docs/proto3\" target=\"_blank\" rel=\"noopener\">Protocol Buffer Language Guide</a> 以获取更多有关 <code>.proto</code> 文件的信息。</p>\n<p>当在 <code>.proto</code> 文件中定义完消息后，你需要运行 <code>protocol buffer</code> 编译器为你使用的编程语言生成数据访问类。这为每个字段提供了简单的访问器（如 <code>name()</code> 和 <code>set_name()</code>），以及对整个结构的进行序列化/解析的方法。例如，如果您选择的语言是 <code>C++</code>，那么在上面的示例中运行编译器将生成一个名为 <code>Person</code> 的类。然后，就可以在应用程序中使用此类来填充，序列化并检索 <code>Person</code> <code>protocol buffer</code> 消息。你可能会写下如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person person;</span><br><span class=\"line\">person.set_name(<span class=\"string\">\"John Doe\"</span>);</span><br><span class=\"line\">person.set_id(<span class=\"number\">1234</span>);</span><br><span class=\"line\">person.set_email(<span class=\"string\">\"jdoe@example.com\"</span>);</span><br><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">output</span><span class=\"params\">(<span class=\"string\">\"myfile\"</span>, ios::out | ios::binary)</span></span>;</span><br><span class=\"line\">person.SerializeToOstream(&amp;output);</span><br></pre></td></tr></table></figure>\n<p>然后，可以通过以下方式读取消息：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">input</span><span class=\"params\">(<span class=\"string\">\"myfile\"</span>, ios::in | ios::binary)</span></span>;</span><br><span class=\"line\">Person person;</span><br><span class=\"line\">person.ParseFromIstream(&amp;input);</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name: \"</span> &lt;&lt; person.name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"E-mail: \"</span> &lt;&lt; person.email() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>你可以将新字段添加到消息格式中，而不会破坏向后兼容性; 解析时旧的二进制文件会简单地忽略新字段。所以如果你有一个使用 <code>protocol buffer</code> 作为数据格式的通信协议，你可以扩展你的协议，而不用担心破坏现有的代码。</p>\n<p>详细的 <code>protocol buffer</code> 介绍以及使用请参考 <a href=\"https://developers.google.com/protocol-buffers/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>\n","site":{"data":{}},"excerpt":"<p><code>protocol buffer</code> 是一种语言无关，平台无关，可扩展的序列化结构化数据的方式，用于通信协议，数据存储等。</p>","more":"<p><code>protocol buffer</code> 目前支持Java，Python，Objective-C 和 C++ 中的生成代码。使用新的 <code>proto3</code> 语言版本，您还可以使用 Go，Ruby 和 C＃ 等更多语言。</p>\n<h2 id=\"为什么选择-Protocol-Buffer-？\"><a href=\"#为什么选择-Protocol-Buffer-？\" class=\"headerlink\" title=\"为什么选择 Protocol Buffer ？\"></a>为什么选择 Protocol Buffer ？</h2><p>通常我们定义好的请求和响应在客户端和服务端都需要手动编码/解码，但是随着接口的版本变化，可能需要对版本号进行判断才能做相应的处理。这样使得新的协议变得复杂，因为开发者必须确保请求发起者与处理请求的实际服务器之间的所有服务器都能理解新协议，然后才能开始使用新协议。</p>\n<p><code>protocol buffer</code> 旨在解决这些问题：</p>\n<ul>\n<li><p>可以很容易地引入新的字段，中间服务器可以简单地解析并传递数据，而无需了解所有字段。</p>\n</li>\n<li><p>协议格式的描述性更强，可以用各种语言来处理（C ++，Java等），并且速度更快，空间更小。</p>\n</li>\n</ul>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>开始使用 <code>protocol buffer</code> 的第一步，就是创建一个 <code>.proto</code> 文件来定义 <code>protocol buffer</code> 消息类型，指定你想要序列化的信息结构。</p>\n<p>每个 <code>protocol buffer</code> 消息是一个小的逻辑信息记录，包含一系列 <code>name-value</code> 对。下面是 <code>.proto</code> 文件的一个例子，定义了一条包含人员信息的消息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  required string name = 1;</span><br><span class=\"line\">  required int32 id = 2;</span><br><span class=\"line\">  optional string email = 3;</span><br><span class=\"line\"></span><br><span class=\"line\">  enum PhoneType &#123;</span><br><span class=\"line\">    MOBILE = 0;</span><br><span class=\"line\">    HOME = 1;</span><br><span class=\"line\">    WORK = 2;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  message PhoneNumber &#123;</span><br><span class=\"line\">    required string number = 1;</span><br><span class=\"line\">    optional PhoneType type = 2 [default = HOME];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  repeated PhoneNumber phone = 4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如你所看到的，消息格式很简单。每种消息类型（如 <code>message Person</code>）都有一个或多个带有唯一编号的字段，每个字段都有一个名称和一个值类型。其中值类型可以是数字（整数或浮点数），布尔值，字符串，原始字节，甚至可以是其他 <code>protocol buffer</code> 的消息类型。在消息类型中，你可以指定可选字段，必填字段和重复字段。访问 <a href=\"https://developers.google.com/protocol-buffers/docs/proto3\" target=\"_blank\" rel=\"noopener\">Protocol Buffer Language Guide</a> 以获取更多有关 <code>.proto</code> 文件的信息。</p>\n<p>当在 <code>.proto</code> 文件中定义完消息后，你需要运行 <code>protocol buffer</code> 编译器为你使用的编程语言生成数据访问类。这为每个字段提供了简单的访问器（如 <code>name()</code> 和 <code>set_name()</code>），以及对整个结构的进行序列化/解析的方法。例如，如果您选择的语言是 <code>C++</code>，那么在上面的示例中运行编译器将生成一个名为 <code>Person</code> 的类。然后，就可以在应用程序中使用此类来填充，序列化并检索 <code>Person</code> <code>protocol buffer</code> 消息。你可能会写下如下代码：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\">Person person;</span><br><span class=\"line\">person.set_name(<span class=\"string\">\"John Doe\"</span>);</span><br><span class=\"line\">person.set_id(<span class=\"number\">1234</span>);</span><br><span class=\"line\">person.set_email(<span class=\"string\">\"jdoe@example.com\"</span>);</span><br><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">output</span><span class=\"params\">(<span class=\"string\">\"myfile\"</span>, ios::out | ios::binary)</span></span>;</span><br><span class=\"line\">person.SerializeToOstream(&amp;output);</span><br></pre></td></tr></table></figure>\n<p>然后，可以通过以下方式读取消息：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">fstream <span class=\"title\">input</span><span class=\"params\">(<span class=\"string\">\"myfile\"</span>, ios::in | ios::binary)</span></span>;</span><br><span class=\"line\">Person person;</span><br><span class=\"line\">person.ParseFromIstream(&amp;input);</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Name: \"</span> &lt;&lt; person.name() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"E-mail: \"</span> &lt;&lt; person.email() &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n<p>你可以将新字段添加到消息格式中，而不会破坏向后兼容性; 解析时旧的二进制文件会简单地忽略新字段。所以如果你有一个使用 <code>protocol buffer</code> 作为数据格式的通信协议，你可以扩展你的协议，而不用担心破坏现有的代码。</p>\n<p>详细的 <code>protocol buffer</code> 介绍以及使用请参考 <a href=\"https://developers.google.com/protocol-buffers/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。</p>"},{"title":"Nodejs V8 的内存管理与垃圾回收机制","date":"2018-01-10T13:34:39.000Z","_content":"\n## V8 的内存限制\n\n在 Node 中通过 javascirpt 只能使用部分内存（64位系统下约为1.4GB，32位系统下约为0.7GB），这个限制会导致 Node 无法直接操作大内存对象，计算机的内存资源无法得到充足的使用。\n\n<!--more-->\n\n造成这个问题的主要原因在于 Node 基于 V8 构建，所以在 Node 中使用的 javascirpt 对象基本都是通过 V8 自己的方式进行分配和管理，V8 的这套内存管理机制在浏览器的应用场景下使用起来绰绰有余，但在 Node 中却限制了开发者随心所欲使用大内存的想法。还有一个深层原因是 V8 的垃圾回收机制的限制。官方说法，以1.5GB的垃圾回收堆内存为例，V8 做一次小的垃圾回收需要50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JS线程暂停执行的时间，在这样时间花销下，应用的性能和响应能力都会直线下降。\n\n在 V8 中，所有的 JS 对象都是通过堆来进行分配的。通过 `process.memoryUsage()` 命令可查看 V8 内存使用量：\n\n```bash\n{\n  rss: 18702336,    \n  heapTotal: 10295296,  # 已申请到的堆内存\n  heapUsed:5409936      # 当前使用量\n}\n```\n\nV8 依然提供了选项让我们使用更多的内存，Node 在启动时可以传递 `--max-old-space-size` 或 `--max-new-space-size` 来调整内存限制的大小，启动之后就无法改变了。例如：\n\n```bash\nnode --max-old-space-size=1700 app.js\nnode --max-new-space-size=1024 app.js\n```\n\n## V8 的垃圾回收机制\n\n在 V8 中，主要将内存分为新生代和老生代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。\n\n### 新生代内存回收机制\n\n新生代的对象通过 Scavenge 算法进行垃圾回收，她将新生代的堆内存空间一分为二，每个空间称为 semispace，其中一个处于使用中（ From 空间），另一个处于闲置状态（ To 空间）。当我们分配对象时，先是从 From 空间进行分配，当开始进行垃圾回收时，会检查 From 空间中的存活对象，这些存活对象会被复制到 To 空间，而非存活对象占用的空间将会释放，也就是释放 From 空间。完成复制后，From 空间和 To 空间角色互换。简单来说，就是通过将存活对象在两个 semispace 空间之间进行复制。\n\n在一定条件下，需要将存活周期长的对象移动到老生代中，也就是完成对象晋升。对象晋升的条件有两个，一个是对象是否经历过 Scavenge 回收，一个是 To 空间的内存占用比超过限制。\n\n- 在对象从 From 空间复制到 To 空间时，会检查它的内存地址来判断这个对象是否已经经历过一次 Scavenge 回收，如果已经经历过，会将该对象从 From 空间复制到老生代空间中，如果没有，则复制到 To 空间中。 \n    \n- 当从 From 空间复制一个对象到 To 空间时，如果 To 空间已经使用了超过25%，则这个对象直接晋升到老生代空间中。因为当这次 Scavenge 回收完成后，这个 To 空间将变成 From 空间，接下来的内存分配将在这个空间中进行，如果占比过高，会影响后续的内存分配。\n\nScavenge 的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但 Scavenge 由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。由于 Scavenge 是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge 非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。\n\n### 老生代内存回收机制\n\n对于老生代中的对象，由于存活对象占较大比重，再采用 Scavenge 的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。为此，V8 在老生代中主要采用 Mark-Sweep 和 Mark-Compack 相结合的方式进行垃圾回收。\n\n- Mark-Sweep\n\n    Mark-Sweep 是标记清除的意思，它分为标记和清除两个阶段。与 Scavenge 复制活着的对象不同，Mark-Sweep 在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。可以看出 Scavenge 只复制活着的对象，Mark-Sweep 只清除死亡对象。活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因。\n\n- Mark-Compack\n\n    Mark-Sweep 最大的问题是在进行一次标记清除后，内存空间会出现不连续的状态，这样内存碎片会对后续的内存分配造成问题，因为很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。\n    \n    为了解决 Mark-Sweep 的内存碎片问题，Mark-Compack 被提出来了。Mark-Compack 是标记整理的问题，是在 Mark-Sweep 的基础上演变而来的，它们的差别在于对象在标记为死亡后，在整理过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。\n    \n\n|回收算法\t|Mark-Sweep|\tMark-Compact|\tScavenge|\n|-|-|-|-|\n|速度|\t中等|\t最慢|\t最快|\n|空间开销|\t少（有碎片）|\t少（无碎片）\t|双倍空间（无碎片）|\n|是否移动对象|\t否|\t是\t|是|\n\n从表格上看，Mark-Sweep 和 Mark-Compact 之间，由于 Mark-Compact 需要移动对象，所以它的执行速度不可能很快，所以在取舍上，V8 主要使用 Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时才使用 Mark-Compact。\n\n\n## 增量标记\n\n为了避免出现 js 应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的3种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为“全停顿”（stop-the-world）。在 V8 的分代式垃圾回收中，一次小垃圾回收只收集新生代，由于新生代默认配置得较小，且其中存活对象通常较少，所以即便它是全停顿的影响也不大。但 V8 的老生代通常配置得较大，且存活对象较多，全堆垃圾回收（full垃圾回收）的标记、清理、整理等动作造成的停顿就会比较可怕，需要设法改善。\n\n为了降低全堆垃圾回收带来的停顿时间，V8 先从标记阶段入手，将原本要一口气停顿完成的动作改为增量标记（incremental marking），也就是拆分为许多小“步进”，每做完一“步进”就让 js 应用逻辑执行一小会，垃圾回收与应用逻辑交替执行直到标记阶段完成。\n\n![image](http://ovu6j7kst.bkt.clouddn.com/incremental_marking.png)\n\nV8 在经过增量标记的改进后，垃圾回收的最大停顿时间可以减少到原本的1/6左右。V8 后续还引入了延迟清理（lazy sweeping）与增量式整理（incremental compaction），让清理与整理动作也变成增量式的。同时还计划引入并行标记与并行清理，进一步利用多核性能降低每次停顿的时间。\n\n## 小结\n\n从 V8 的自动垃圾回收机制的设计角度可以看到，V8 对内存使用进行限制的缘由。新生代设计为一个较小的内存空间是合理的，而老生代空间过大对于垃圾回收并无特别意义。V8对内存限制的设置对于 Chrome 浏览器这种每个选项卡页面使用一个 V8 实例而言，内存的使用是绰绰有余，对于 Node 编写的服务器端来说，内存限制也并不影响正常场景下的使用。但是对于V8的垃圾回收特点和 js 在单线程上的执行情况，垃圾回收是影响性能的因素之一。想要高性能执行效率，需要注意让垃圾回收尽量少地进行，尤其是全堆垃圾回收。","source":"_posts/node-v8.md","raw":"---\ntitle: Nodejs V8 的内存管理与垃圾回收机制\ndate: 2018-01-10 21:34:39\ntags: Node.js\ncategory: 码梦为生\n---\n\n## V8 的内存限制\n\n在 Node 中通过 javascirpt 只能使用部分内存（64位系统下约为1.4GB，32位系统下约为0.7GB），这个限制会导致 Node 无法直接操作大内存对象，计算机的内存资源无法得到充足的使用。\n\n<!--more-->\n\n造成这个问题的主要原因在于 Node 基于 V8 构建，所以在 Node 中使用的 javascirpt 对象基本都是通过 V8 自己的方式进行分配和管理，V8 的这套内存管理机制在浏览器的应用场景下使用起来绰绰有余，但在 Node 中却限制了开发者随心所欲使用大内存的想法。还有一个深层原因是 V8 的垃圾回收机制的限制。官方说法，以1.5GB的垃圾回收堆内存为例，V8 做一次小的垃圾回收需要50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JS线程暂停执行的时间，在这样时间花销下，应用的性能和响应能力都会直线下降。\n\n在 V8 中，所有的 JS 对象都是通过堆来进行分配的。通过 `process.memoryUsage()` 命令可查看 V8 内存使用量：\n\n```bash\n{\n  rss: 18702336,    \n  heapTotal: 10295296,  # 已申请到的堆内存\n  heapUsed:5409936      # 当前使用量\n}\n```\n\nV8 依然提供了选项让我们使用更多的内存，Node 在启动时可以传递 `--max-old-space-size` 或 `--max-new-space-size` 来调整内存限制的大小，启动之后就无法改变了。例如：\n\n```bash\nnode --max-old-space-size=1700 app.js\nnode --max-new-space-size=1024 app.js\n```\n\n## V8 的垃圾回收机制\n\n在 V8 中，主要将内存分为新生代和老生代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。\n\n### 新生代内存回收机制\n\n新生代的对象通过 Scavenge 算法进行垃圾回收，她将新生代的堆内存空间一分为二，每个空间称为 semispace，其中一个处于使用中（ From 空间），另一个处于闲置状态（ To 空间）。当我们分配对象时，先是从 From 空间进行分配，当开始进行垃圾回收时，会检查 From 空间中的存活对象，这些存活对象会被复制到 To 空间，而非存活对象占用的空间将会释放，也就是释放 From 空间。完成复制后，From 空间和 To 空间角色互换。简单来说，就是通过将存活对象在两个 semispace 空间之间进行复制。\n\n在一定条件下，需要将存活周期长的对象移动到老生代中，也就是完成对象晋升。对象晋升的条件有两个，一个是对象是否经历过 Scavenge 回收，一个是 To 空间的内存占用比超过限制。\n\n- 在对象从 From 空间复制到 To 空间时，会检查它的内存地址来判断这个对象是否已经经历过一次 Scavenge 回收，如果已经经历过，会将该对象从 From 空间复制到老生代空间中，如果没有，则复制到 To 空间中。 \n    \n- 当从 From 空间复制一个对象到 To 空间时，如果 To 空间已经使用了超过25%，则这个对象直接晋升到老生代空间中。因为当这次 Scavenge 回收完成后，这个 To 空间将变成 From 空间，接下来的内存分配将在这个空间中进行，如果占比过高，会影响后续的内存分配。\n\nScavenge 的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但 Scavenge 由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。由于 Scavenge 是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge 非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。\n\n### 老生代内存回收机制\n\n对于老生代中的对象，由于存活对象占较大比重，再采用 Scavenge 的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。为此，V8 在老生代中主要采用 Mark-Sweep 和 Mark-Compack 相结合的方式进行垃圾回收。\n\n- Mark-Sweep\n\n    Mark-Sweep 是标记清除的意思，它分为标记和清除两个阶段。与 Scavenge 复制活着的对象不同，Mark-Sweep 在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。可以看出 Scavenge 只复制活着的对象，Mark-Sweep 只清除死亡对象。活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因。\n\n- Mark-Compack\n\n    Mark-Sweep 最大的问题是在进行一次标记清除后，内存空间会出现不连续的状态，这样内存碎片会对后续的内存分配造成问题，因为很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。\n    \n    为了解决 Mark-Sweep 的内存碎片问题，Mark-Compack 被提出来了。Mark-Compack 是标记整理的问题，是在 Mark-Sweep 的基础上演变而来的，它们的差别在于对象在标记为死亡后，在整理过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。\n    \n\n|回收算法\t|Mark-Sweep|\tMark-Compact|\tScavenge|\n|-|-|-|-|\n|速度|\t中等|\t最慢|\t最快|\n|空间开销|\t少（有碎片）|\t少（无碎片）\t|双倍空间（无碎片）|\n|是否移动对象|\t否|\t是\t|是|\n\n从表格上看，Mark-Sweep 和 Mark-Compact 之间，由于 Mark-Compact 需要移动对象，所以它的执行速度不可能很快，所以在取舍上，V8 主要使用 Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时才使用 Mark-Compact。\n\n\n## 增量标记\n\n为了避免出现 js 应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的3种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为“全停顿”（stop-the-world）。在 V8 的分代式垃圾回收中，一次小垃圾回收只收集新生代，由于新生代默认配置得较小，且其中存活对象通常较少，所以即便它是全停顿的影响也不大。但 V8 的老生代通常配置得较大，且存活对象较多，全堆垃圾回收（full垃圾回收）的标记、清理、整理等动作造成的停顿就会比较可怕，需要设法改善。\n\n为了降低全堆垃圾回收带来的停顿时间，V8 先从标记阶段入手，将原本要一口气停顿完成的动作改为增量标记（incremental marking），也就是拆分为许多小“步进”，每做完一“步进”就让 js 应用逻辑执行一小会，垃圾回收与应用逻辑交替执行直到标记阶段完成。\n\n![image](http://ovu6j7kst.bkt.clouddn.com/incremental_marking.png)\n\nV8 在经过增量标记的改进后，垃圾回收的最大停顿时间可以减少到原本的1/6左右。V8 后续还引入了延迟清理（lazy sweeping）与增量式整理（incremental compaction），让清理与整理动作也变成增量式的。同时还计划引入并行标记与并行清理，进一步利用多核性能降低每次停顿的时间。\n\n## 小结\n\n从 V8 的自动垃圾回收机制的设计角度可以看到，V8 对内存使用进行限制的缘由。新生代设计为一个较小的内存空间是合理的，而老生代空间过大对于垃圾回收并无特别意义。V8对内存限制的设置对于 Chrome 浏览器这种每个选项卡页面使用一个 V8 实例而言，内存的使用是绰绰有余，对于 Node 编写的服务器端来说，内存限制也并不影响正常场景下的使用。但是对于V8的垃圾回收特点和 js 在单线程上的执行情况，垃圾回收是影响性能的因素之一。想要高性能执行效率，需要注意让垃圾回收尽量少地进行，尤其是全堆垃圾回收。","slug":"node-v8","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cpz001nslm4dq34nwu7","content":"<h2 id=\"V8-的内存限制\"><a href=\"#V8-的内存限制\" class=\"headerlink\" title=\"V8 的内存限制\"></a>V8 的内存限制</h2><p>在 Node 中通过 javascirpt 只能使用部分内存（64位系统下约为1.4GB，32位系统下约为0.7GB），这个限制会导致 Node 无法直接操作大内存对象，计算机的内存资源无法得到充足的使用。</p>\n<a id=\"more\"></a>\n<p>造成这个问题的主要原因在于 Node 基于 V8 构建，所以在 Node 中使用的 javascirpt 对象基本都是通过 V8 自己的方式进行分配和管理，V8 的这套内存管理机制在浏览器的应用场景下使用起来绰绰有余，但在 Node 中却限制了开发者随心所欲使用大内存的想法。还有一个深层原因是 V8 的垃圾回收机制的限制。官方说法，以1.5GB的垃圾回收堆内存为例，V8 做一次小的垃圾回收需要50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JS线程暂停执行的时间，在这样时间花销下，应用的性能和响应能力都会直线下降。</p>\n<p>在 V8 中，所有的 JS 对象都是通过堆来进行分配的。通过 <code>process.memoryUsage()</code> 命令可查看 V8 内存使用量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  rss: 18702336,    </span><br><span class=\"line\">  heapTotal: 10295296,  <span class=\"comment\"># 已申请到的堆内存</span></span><br><span class=\"line\">  heapUsed:5409936      <span class=\"comment\"># 当前使用量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>V8 依然提供了选项让我们使用更多的内存，Node 在启动时可以传递 <code>--max-old-space-size</code> 或 <code>--max-new-space-size</code> 来调整内存限制的大小，启动之后就无法改变了。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node --max-old-space-size=1700 app.js</span><br><span class=\"line\">node --max-new-space-size=1024 app.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"V8-的垃圾回收机制\"><a href=\"#V8-的垃圾回收机制\" class=\"headerlink\" title=\"V8 的垃圾回收机制\"></a>V8 的垃圾回收机制</h2><p>在 V8 中，主要将内存分为新生代和老生代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。</p>\n<h3 id=\"新生代内存回收机制\"><a href=\"#新生代内存回收机制\" class=\"headerlink\" title=\"新生代内存回收机制\"></a>新生代内存回收机制</h3><p>新生代的对象通过 Scavenge 算法进行垃圾回收，她将新生代的堆内存空间一分为二，每个空间称为 semispace，其中一个处于使用中（ From 空间），另一个处于闲置状态（ To 空间）。当我们分配对象时，先是从 From 空间进行分配，当开始进行垃圾回收时，会检查 From 空间中的存活对象，这些存活对象会被复制到 To 空间，而非存活对象占用的空间将会释放，也就是释放 From 空间。完成复制后，From 空间和 To 空间角色互换。简单来说，就是通过将存活对象在两个 semispace 空间之间进行复制。</p>\n<p>在一定条件下，需要将存活周期长的对象移动到老生代中，也就是完成对象晋升。对象晋升的条件有两个，一个是对象是否经历过 Scavenge 回收，一个是 To 空间的内存占用比超过限制。</p>\n<ul>\n<li><p>在对象从 From 空间复制到 To 空间时，会检查它的内存地址来判断这个对象是否已经经历过一次 Scavenge 回收，如果已经经历过，会将该对象从 From 空间复制到老生代空间中，如果没有，则复制到 To 空间中。 </p>\n</li>\n<li><p>当从 From 空间复制一个对象到 To 空间时，如果 To 空间已经使用了超过25%，则这个对象直接晋升到老生代空间中。因为当这次 Scavenge 回收完成后，这个 To 空间将变成 From 空间，接下来的内存分配将在这个空间中进行，如果占比过高，会影响后续的内存分配。</p>\n</li>\n</ul>\n<p>Scavenge 的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但 Scavenge 由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。由于 Scavenge 是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge 非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p>\n<h3 id=\"老生代内存回收机制\"><a href=\"#老生代内存回收机制\" class=\"headerlink\" title=\"老生代内存回收机制\"></a>老生代内存回收机制</h3><p>对于老生代中的对象，由于存活对象占较大比重，再采用 Scavenge 的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。为此，V8 在老生代中主要采用 Mark-Sweep 和 Mark-Compack 相结合的方式进行垃圾回收。</p>\n<ul>\n<li><p>Mark-Sweep</p>\n<p>  Mark-Sweep 是标记清除的意思，它分为标记和清除两个阶段。与 Scavenge 复制活着的对象不同，Mark-Sweep 在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。可以看出 Scavenge 只复制活着的对象，Mark-Sweep 只清除死亡对象。活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因。</p>\n</li>\n<li><p>Mark-Compack</p>\n<p>  Mark-Sweep 最大的问题是在进行一次标记清除后，内存空间会出现不连续的状态，这样内存碎片会对后续的内存分配造成问题，因为很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。</p>\n<p>  为了解决 Mark-Sweep 的内存碎片问题，Mark-Compack 被提出来了。Mark-Compack 是标记整理的问题，是在 Mark-Sweep 的基础上演变而来的，它们的差别在于对象在标记为死亡后，在整理过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>回收算法</th>\n<th>Mark-Sweep</th>\n<th>Mark-Compact</th>\n<th>Scavenge</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>速度</td>\n<td>中等</td>\n<td>最慢</td>\n<td>最快</td>\n</tr>\n<tr>\n<td>空间开销</td>\n<td>少（有碎片）</td>\n<td>少（无碎片）</td>\n<td>双倍空间（无碎片）</td>\n</tr>\n<tr>\n<td>是否移动对象</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<p>从表格上看，Mark-Sweep 和 Mark-Compact 之间，由于 Mark-Compact 需要移动对象，所以它的执行速度不可能很快，所以在取舍上，V8 主要使用 Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时才使用 Mark-Compact。</p>\n<h2 id=\"增量标记\"><a href=\"#增量标记\" class=\"headerlink\" title=\"增量标记\"></a>增量标记</h2><p>为了避免出现 js 应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的3种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为“全停顿”（stop-the-world）。在 V8 的分代式垃圾回收中，一次小垃圾回收只收集新生代，由于新生代默认配置得较小，且其中存活对象通常较少，所以即便它是全停顿的影响也不大。但 V8 的老生代通常配置得较大，且存活对象较多，全堆垃圾回收（full垃圾回收）的标记、清理、整理等动作造成的停顿就会比较可怕，需要设法改善。</p>\n<p>为了降低全堆垃圾回收带来的停顿时间，V8 先从标记阶段入手，将原本要一口气停顿完成的动作改为增量标记（incremental marking），也就是拆分为许多小“步进”，每做完一“步进”就让 js 应用逻辑执行一小会，垃圾回收与应用逻辑交替执行直到标记阶段完成。</p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/incremental_marking.png\" alt=\"image\"></p>\n<p>V8 在经过增量标记的改进后，垃圾回收的最大停顿时间可以减少到原本的1/6左右。V8 后续还引入了延迟清理（lazy sweeping）与增量式整理（incremental compaction），让清理与整理动作也变成增量式的。同时还计划引入并行标记与并行清理，进一步利用多核性能降低每次停顿的时间。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>从 V8 的自动垃圾回收机制的设计角度可以看到，V8 对内存使用进行限制的缘由。新生代设计为一个较小的内存空间是合理的，而老生代空间过大对于垃圾回收并无特别意义。V8对内存限制的设置对于 Chrome 浏览器这种每个选项卡页面使用一个 V8 实例而言，内存的使用是绰绰有余，对于 Node 编写的服务器端来说，内存限制也并不影响正常场景下的使用。但是对于V8的垃圾回收特点和 js 在单线程上的执行情况，垃圾回收是影响性能的因素之一。想要高性能执行效率，需要注意让垃圾回收尽量少地进行，尤其是全堆垃圾回收。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"V8-的内存限制\"><a href=\"#V8-的内存限制\" class=\"headerlink\" title=\"V8 的内存限制\"></a>V8 的内存限制</h2><p>在 Node 中通过 javascirpt 只能使用部分内存（64位系统下约为1.4GB，32位系统下约为0.7GB），这个限制会导致 Node 无法直接操作大内存对象，计算机的内存资源无法得到充足的使用。</p>","more":"<p>造成这个问题的主要原因在于 Node 基于 V8 构建，所以在 Node 中使用的 javascirpt 对象基本都是通过 V8 自己的方式进行分配和管理，V8 的这套内存管理机制在浏览器的应用场景下使用起来绰绰有余，但在 Node 中却限制了开发者随心所欲使用大内存的想法。还有一个深层原因是 V8 的垃圾回收机制的限制。官方说法，以1.5GB的垃圾回收堆内存为例，V8 做一次小的垃圾回收需要50毫秒以上，做一次非增量式的垃圾回收甚至要1秒以上。这是垃圾回收中引起JS线程暂停执行的时间，在这样时间花销下，应用的性能和响应能力都会直线下降。</p>\n<p>在 V8 中，所有的 JS 对象都是通过堆来进行分配的。通过 <code>process.memoryUsage()</code> 命令可查看 V8 内存使用量：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  rss: 18702336,    </span><br><span class=\"line\">  heapTotal: 10295296,  <span class=\"comment\"># 已申请到的堆内存</span></span><br><span class=\"line\">  heapUsed:5409936      <span class=\"comment\"># 当前使用量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>V8 依然提供了选项让我们使用更多的内存，Node 在启动时可以传递 <code>--max-old-space-size</code> 或 <code>--max-new-space-size</code> 来调整内存限制的大小，启动之后就无法改变了。例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node --max-old-space-size=1700 app.js</span><br><span class=\"line\">node --max-new-space-size=1024 app.js</span><br></pre></td></tr></table></figure>\n<h2 id=\"V8-的垃圾回收机制\"><a href=\"#V8-的垃圾回收机制\" class=\"headerlink\" title=\"V8 的垃圾回收机制\"></a>V8 的垃圾回收机制</h2><p>在 V8 中，主要将内存分为新生代和老生代。新生代中的对象为存活时间较短的对象，老生代中的对象为存活时间较长或常驻内存的对象。</p>\n<h3 id=\"新生代内存回收机制\"><a href=\"#新生代内存回收机制\" class=\"headerlink\" title=\"新生代内存回收机制\"></a>新生代内存回收机制</h3><p>新生代的对象通过 Scavenge 算法进行垃圾回收，她将新生代的堆内存空间一分为二，每个空间称为 semispace，其中一个处于使用中（ From 空间），另一个处于闲置状态（ To 空间）。当我们分配对象时，先是从 From 空间进行分配，当开始进行垃圾回收时，会检查 From 空间中的存活对象，这些存活对象会被复制到 To 空间，而非存活对象占用的空间将会释放，也就是释放 From 空间。完成复制后，From 空间和 To 空间角色互换。简单来说，就是通过将存活对象在两个 semispace 空间之间进行复制。</p>\n<p>在一定条件下，需要将存活周期长的对象移动到老生代中，也就是完成对象晋升。对象晋升的条件有两个，一个是对象是否经历过 Scavenge 回收，一个是 To 空间的内存占用比超过限制。</p>\n<ul>\n<li><p>在对象从 From 空间复制到 To 空间时，会检查它的内存地址来判断这个对象是否已经经历过一次 Scavenge 回收，如果已经经历过，会将该对象从 From 空间复制到老生代空间中，如果没有，则复制到 To 空间中。 </p>\n</li>\n<li><p>当从 From 空间复制一个对象到 To 空间时，如果 To 空间已经使用了超过25%，则这个对象直接晋升到老生代空间中。因为当这次 Scavenge 回收完成后，这个 To 空间将变成 From 空间，接下来的内存分配将在这个空间中进行，如果占比过高，会影响后续的内存分配。</p>\n</li>\n</ul>\n<p>Scavenge 的缺点是只能使用堆内存中的一半，这是由划分空间和复制机制所决定的。但 Scavenge 由于只复制存活的对象，并且对于生命周期短的场景存活对象只占少部分，所以它在时间效率上有优异的表现。由于 Scavenge 是典型的牺牲空间换取时间的算法，所以无法大规模地应用到所有的垃圾回收中。但可以发现，Scavenge 非常适合应用在新生代中，因为新生代中对象的生命周期较短，恰恰适合这个算法。</p>\n<h3 id=\"老生代内存回收机制\"><a href=\"#老生代内存回收机制\" class=\"headerlink\" title=\"老生代内存回收机制\"></a>老生代内存回收机制</h3><p>对于老生代中的对象，由于存活对象占较大比重，再采用 Scavenge 的方式会有两个问题：一个是存活对象较多，复制存活对象的效率将会很低；另一个问题依然是浪费一半空间的问题。为此，V8 在老生代中主要采用 Mark-Sweep 和 Mark-Compack 相结合的方式进行垃圾回收。</p>\n<ul>\n<li><p>Mark-Sweep</p>\n<p>  Mark-Sweep 是标记清除的意思，它分为标记和清除两个阶段。与 Scavenge 复制活着的对象不同，Mark-Sweep 在标记阶段遍历堆中的所有对象，并标记活着的对象，在随后的清除阶段中，只清除没有被标记的对象。可以看出 Scavenge 只复制活着的对象，Mark-Sweep 只清除死亡对象。活对象在新生代中只占较小部分，死对象在老生代中只占较小部分，这是两种回收方式能高效处理的原因。</p>\n</li>\n<li><p>Mark-Compack</p>\n<p>  Mark-Sweep 最大的问题是在进行一次标记清除后，内存空间会出现不连续的状态，这样内存碎片会对后续的内存分配造成问题，因为很可能出现需要分配一个大对象的情况，这时所有的碎片空间都无法完成此次分配，就会提前触发垃圾回收，而这次回收是不必要的。</p>\n<p>  为了解决 Mark-Sweep 的内存碎片问题，Mark-Compack 被提出来了。Mark-Compack 是标记整理的问题，是在 Mark-Sweep 的基础上演变而来的，它们的差别在于对象在标记为死亡后，在整理过程中，将活着的对象往一端移动，移动完成后，直接清理掉边界外的内存。</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>回收算法</th>\n<th>Mark-Sweep</th>\n<th>Mark-Compact</th>\n<th>Scavenge</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>速度</td>\n<td>中等</td>\n<td>最慢</td>\n<td>最快</td>\n</tr>\n<tr>\n<td>空间开销</td>\n<td>少（有碎片）</td>\n<td>少（无碎片）</td>\n<td>双倍空间（无碎片）</td>\n</tr>\n<tr>\n<td>是否移动对象</td>\n<td>否</td>\n<td>是</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<p>从表格上看，Mark-Sweep 和 Mark-Compact 之间，由于 Mark-Compact 需要移动对象，所以它的执行速度不可能很快，所以在取舍上，V8 主要使用 Mark-Sweep，在空间不足以对从新生代中晋升过来的对象进行分配时才使用 Mark-Compact。</p>\n<h2 id=\"增量标记\"><a href=\"#增量标记\" class=\"headerlink\" title=\"增量标记\"></a>增量标记</h2><p>为了避免出现 js 应用逻辑与垃圾回收器看到的不一致的情况，垃圾回收的3种基本算法都需要将应用逻辑暂停下来，待执行完垃圾回收后再恢复执行应用逻辑，这种行为被称为“全停顿”（stop-the-world）。在 V8 的分代式垃圾回收中，一次小垃圾回收只收集新生代，由于新生代默认配置得较小，且其中存活对象通常较少，所以即便它是全停顿的影响也不大。但 V8 的老生代通常配置得较大，且存活对象较多，全堆垃圾回收（full垃圾回收）的标记、清理、整理等动作造成的停顿就会比较可怕，需要设法改善。</p>\n<p>为了降低全堆垃圾回收带来的停顿时间，V8 先从标记阶段入手，将原本要一口气停顿完成的动作改为增量标记（incremental marking），也就是拆分为许多小“步进”，每做完一“步进”就让 js 应用逻辑执行一小会，垃圾回收与应用逻辑交替执行直到标记阶段完成。</p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/incremental_marking.png\" alt=\"image\"></p>\n<p>V8 在经过增量标记的改进后，垃圾回收的最大停顿时间可以减少到原本的1/6左右。V8 后续还引入了延迟清理（lazy sweeping）与增量式整理（incremental compaction），让清理与整理动作也变成增量式的。同时还计划引入并行标记与并行清理，进一步利用多核性能降低每次停顿的时间。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>从 V8 的自动垃圾回收机制的设计角度可以看到，V8 对内存使用进行限制的缘由。新生代设计为一个较小的内存空间是合理的，而老生代空间过大对于垃圾回收并无特别意义。V8对内存限制的设置对于 Chrome 浏览器这种每个选项卡页面使用一个 V8 实例而言，内存的使用是绰绰有余，对于 Node 编写的服务器端来说，内存限制也并不影响正常场景下的使用。但是对于V8的垃圾回收特点和 js 在单线程上的执行情况，垃圾回收是影响性能的因素之一。想要高性能执行效率，需要注意让垃圾回收尽量少地进行，尤其是全堆垃圾回收。</p>"},{"title":"微信小程序 - 便利店在哪（已上线）","date":"2018-02-27T11:46:22.000Z","_content":"\n业余时间做了一个小程序  “便利店在哪”，功能很简单，就是找出你附近的便利店。\n\n<!--more-->\n\n灵感来源于经常找不到地方买烟。。。\n\n代码已经开源在 Github 上了，地址：[royeo/weapp-store](https://github.com/royeo/weapp-store) ，欢迎 star。\n\n<img src=\"http://ovu6j7kst.bkt.clouddn.com/demo.png\" style=\"margin-left: 0; border: 0\">\n\n<img src=\"http://ovu6j7kst.bkt.clouddn.com/weapp.jpg\" style=\"margin-left: 0; border: 0\">\n","source":"_posts/weapp-store.md","raw":"---\ntitle: 微信小程序 - 便利店在哪（已上线）\ndate: 2018-02-27 19:46:22\ntags: 微信小程序\n---\n\n业余时间做了一个小程序  “便利店在哪”，功能很简单，就是找出你附近的便利店。\n\n<!--more-->\n\n灵感来源于经常找不到地方买烟。。。\n\n代码已经开源在 Github 上了，地址：[royeo/weapp-store](https://github.com/royeo/weapp-store) ，欢迎 star。\n\n<img src=\"http://ovu6j7kst.bkt.clouddn.com/demo.png\" style=\"margin-left: 0; border: 0\">\n\n<img src=\"http://ovu6j7kst.bkt.clouddn.com/weapp.jpg\" style=\"margin-left: 0; border: 0\">\n","slug":"weapp-store","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cq0001pslm4vi6jzbce","content":"<p>业余时间做了一个小程序  “便利店在哪”，功能很简单，就是找出你附近的便利店。</p>\n<a id=\"more\"></a>\n<p>灵感来源于经常找不到地方买烟。。。</p>\n<p>代码已经开源在 Github 上了，地址：<a href=\"https://github.com/royeo/weapp-store\" target=\"_blank\" rel=\"noopener\">royeo/weapp-store</a> ，欢迎 star。</p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/demo.png\" style=\"margin-left: 0; border: 0\"></p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/weapp.jpg\" style=\"margin-left: 0; border: 0\"></p>\n","site":{"data":{}},"excerpt":"<p>业余时间做了一个小程序  “便利店在哪”，功能很简单，就是找出你附近的便利店。</p>","more":"<p>灵感来源于经常找不到地方买烟。。。</p>\n<p>代码已经开源在 Github 上了，地址：<a href=\"https://github.com/royeo/weapp-store\" target=\"_blank\" rel=\"noopener\">royeo/weapp-store</a> ，欢迎 star。</p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/demo.png\" style=\"margin-left: 0; border: 0\"></p>\n<p><img src=\"http://ovu6j7kst.bkt.clouddn.com/weapp.jpg\" style=\"margin-left: 0; border: 0\"></p>"},{"title":"Protocol Buffer Encoding","date":"2018-06-02T22:02:17.000Z","_content":"\n> 本文翻译自： https://developers.google.com/protocol-buffers/docs/encoding\n\n本文档介绍了 protocol buffer message 的二进制格式。你不需要知道这个就可以在你的应用程序中使用 protocol buffer，但如果你想了解 protocol buffer 格式对编码后的 message 大小的影响，该文档非常有用。\n\n<!--more-->\n\n## 一个简单的 Message\n\n假设你有如下这个非常简单的 message 定义：\n\n```sh\nmessage Test1 {\n  optional int32 a = 1;\n}\n```\n\n在应用程序中，你创建了一个 `Test1` message 并将 `a` 设置为 150，然后将 message 序列化为输出流。如果你能够检查编码后的 message，则会看到三个字节：\n\n```sh\n08 96 01\n```\n\n这些数字的含义是什么呢？我们将稍后展示。\n\n## Base 128 Varints\n\n要理解 protocol buffer 的编码，首先需要了解 varints。varints 是一种将整数序列化成一个或多个字节的方法。数字越小使用的字节数也越小。\n\nvarint 中的每个字节（最后一个字节除外）都设置了最高有效位（most significant bit），简称 msb，表示还有后续字节，如果只有单个字节则不设置 msb。每个字节的低7位用于以7位一组的形式存储数字的二进制补码，**最低有效组放在前面**。\n\n例如，数字1，它是一个单字节，所以 msb 没有被设置：\n\n```sh\n0000 0001\n```\n    \n如果是300，就有点复杂：\n\n    1010 1100 0000 0010\n    \n怎么知道这个是300的呢？首先从每个字节中删除 msb，因为 msb 只是告诉我们是否已达到数字的末尾。（如你所见，由于 varint 中有多个字节，所以 msb 被设置在第一个字节中）：\n\n\n    1010 1100 0000 0010\n    → 010 1100  000 0010\n\n\n因为 varints 的最低有效组放在前面，所以\b需要反转两个7位组。最后进行拼接来获得实际的值：\n\n```sh\n000 0010  010 1100\n→  000 0010 + 010 1100\n→  100101100\n→  256 + 32 + 8 + 4 = 300\n```\n    \n## Message 结构\n\nprotocol buffer 的 message 是一系列 key-value 对。message 的二进制形式只使用了字段的编号作为 key，每个字段的名称和声明类型则是在解码端通过引用 message 类型的定义（即 `.proto` 文件）来确定的。\n\n在对一个 message 进行编码时，key 和 value 被连接成一个字节流。当 message 被解码时，解析器需要跳过它无法识别的字段。这样，在 message 中添加新字段后也不会影响到旧程序。为此，每个 key 实际上由两个值组成：\n1. `.proto` 文件中的字段编号。\n2. 用来获取 value 长度信息的 wire 类型。\n\n可用的 wire 类型如下：\n\n|Type|Meaning|Used For|\n|-|-|-|\n|0|Varint|int32, int64, uint32, uint64, sint32, sint64, bool, enum|\n|1|64-bit|fixed64, sfixed64, double|\n|2|Length-delimited|string, bytes, embedded messages, packed repeated fields|\n|3|Start group|groups (deprecated)|\n|4|End group|groups (deprecated)|\n|5|32-bit|fixed32, sfixed32, float|\n\n在流式 message 中的每个 key 都是一个值为 `(field_number << 3) | wire_type` 的 varint。换句话说，数字的最后三位存储了 wire 类型。\n\n现在让我们回过来看看之前那个简单的例子。你现在已经知道流中的第一个数字总是一个值为 varint 的 key，例子中 key 为 08（删除 msb）：\n\n```sh\n000 1000\n```\n\n取最后三位得到 wire 类型（0），然后右移三位得到字段编号（1）。所以字段编号是1，值是一个 varint。结合前面讲到的 varint 解码知识，可以看到接下来的两个字节存储的值为150。\n\n```sh\n96 01 = 1001 0110  0000 0001\n       → 000 0001 + 001 0110 (drop the msb and reverse the groups of 7 bits)\n       → 10010110\n       → 128 + 16 + 4 + 2 = 150\n```\n\n## 更多的 value 类型\n\n#### 有符号整型（Signed Integers）\n\n正如你在前面的章节中看到的那样，与 wire 类型0相关的所有 protocol buffer 类型都被编码为 varints。但是，在编码负数时，有符号的 int 类型（`sint32` 和 `sint64`）与“标准” int 类型（`int32` 和 `int64`）之间存在很大差异。如果使用 `int32` 或 `int64` 作为负数的类型，则生成的 varint 长度总是为10个字节 - 实际上，它被视为非常大的无符号整数；如果使用 `sint32` 或 `sint64`，对应的 varint 则会使用 ZigZag 编码，所以效率更高。\n\nZigZag 编码将有符号整数映射为无符号整数，因此绝对值小的数字（例如-1）就会有一个小的 varint 编码值。ZigZag 以一种在正整数和负整数之间来回“zig-zags”的方式来实现，所以-1被编码为1，1被编码为2，-2被编码为3，依此类推，如下表所示：\n\n|Signed Original|Encoded As|\n|-|-|\n|0|0|\n|-1|1|\n|1|2|\n|-2|3|\n|2147483647|4294967294|\n|-2147483648|4294967295|\n\n换句话说，每个 `sint32` 类型的值 n 被编码为：\n\n```sh\n(n << 1) ^ (n >> 31)\n```\n\n每个 `sint64` 类型的值 n 被编码为：\n\n```sh\n(n << 1) ^ (n >> 63)\n```\n\n注意第二个移位操作 `n >> 31` 是一个算术移位。所以，这个移位操作的值要么所有位都是0（如果 n 是正数），要么所有位都为1（如果 n 是负数）。\n\n在解析 `sint32` 或 `sint64` 时，其值按上述过程的逆操作解码回原来的有符号数。\n\n#### 非 varint 数字（Non-varint Numbers）\n\n非 varint 数字类型很简单，`double` 和 `fixed64` 的 wire 类型为1，它告诉解析器提取一块64位的数据；类似的， `float` 和 `fixed32` 的 wire 类型为5，它告诉解析器提取一块32位的数据。在这两种情况下，值都以小端字节顺序存储。\n\n#### 字符串（Strings）\n\nwire 类型 2 （length-delimited）表示该值是 varint 编码的长度，\b后面跟着指定的数据字节数。\n\n例如有下面这样的 message 类型：\n\n```sh\nmessage Test2 {\n  optional string b = 2;\n}\n```\n\n将 b 的值设置为“testing”，会得到：\n\n12 07 <span style=\"color:red\">74 65 73 74 69 6e 67<span>\n\n红色的字节部分是 UTF8 编码\b的“testing”。这里的 key 是 0x12，可以得到字段编号为2，wire 类型为2。07 表示 value 的长度为7，随后的7个字节就是我们的字符串。\n\n#### 嵌套的 Message（Embedded Messages）\n\n下面是一个带有我们示例类型 Test1 的嵌入式 message 的定义：\n\n```sh\nmessage Test3 {\n  optional Test1 c = 3;\n}\n```\n\n\b下面是编码后的结果，Test1 的字段 `a` 设置为150：\n\n1a 03 <span style=\"color:red\">08 96 01<span>\n\n可以看到，最后三个字节与我们前面的第一个例子（`08 96 01`）完全相同，在它们前面是数字3。嵌入式 message 的处理方式与字符串完全相同（wire type = 2）。\n\n#### 可选和重复的元素（Optional And Repeated Elements）\n\n如果在 proto2 的 message 定义中有 `repeated` 的元素（没有`[packed = true]`选项），编码后的 message 会有零个或多个具有相同字段编号的 key-value 对。这些 repeated 的值不需要连续的出现，它们可能与其他的字段交错出现。解析时，这些元素相互之间的顺序会保存下来，但是相对于其他字段的顺序将会丢失。而 proto3 会利用打包编码（packed encoding）的方式对 repeated 字段进行编码，之后会介绍。\n\n对于 proto3 中的任何非 `repeated` 字段或 proto2 中的 `optional` 字段，编码后的 message 可能有也可能没有该字段编号的 key-value 对。\n\n通常，编码后的 message 永远不会有非 `repeated` 字段的多个实例。但是，解析器被设计为可以处理这种情况。对于数字类型和字符串，如果同一个字段出现多次，解析器将接受它看到的最后一个值。对于嵌套的 message 字段，解析器合并相同字段的多个实例，就像使用 `Message::MergeFrom` 方法一样 - 那就是，后面的实例的单个字段会替换掉前面出现的，单个嵌套 message 被合并，重复字段被连接起来。这些规则的效果是，解析串联出现的两个编码的 message 产生的结果和单独解析两个 message 然后合并它们的结果是相同的。示例如下：\n\n```sh\nMyMessage message;\nmessage.ParseFromString(str1 + str2);\n```\n\n等同于：\n\n```sh\nMyMessage message, message2;\nmessage.ParseFromString(str1);\nmessage2.ParseFromString(str2);\nmessage.MergeFrom(message2);\n```\n\n这个特性有的时候挺有用的，我们可以在不知道两个 message 的具体类型的情况下合并它们。\n\n\n#### 打包重复字段（Packed Repeated Fields）\n\nprotocol buffer 在 2.1.0 版本引入了 packed repeated 字段，这个字段在 proto2 中的声明需要在 repeated 字段后面添加 `[packed=true]`。在 proto3 中，repeated 字段默认为 packed repeated 字段。这个字段和普通的 repeated 字段的区别在于编码方式不同。一个包含0个元素的 packed repeated 字段不会出现在编码后的 message 中。否则，该字段的所有元素都将打包到一个 wire 类型为2（length-delimited）的 key-value 对中。除了前面没有 key 以外，每个元素的编码方式与通常情况下相同。\n\n假设你有如下的 message 类型：\n\n```sh\nmessage Test4 {\n  repeated int32 d = 4 [packed=true];\n}\n```\n\n现在构造一个 `Test4`，repeated 字段 `d` 的值有3、270和86942。编码后的结果如下：\n\n```sh\n22        // key (field number 4, wire type 2)\n06        // payload size (6 bytes)\n03        // first element (varint 3)\n8E 02     // second element (varint 270)\n9E A7 05  // third element (varint 86942)\n```\n\n只有原始数字类型（varint，32-bit 或 64-bit）的 repeated 字段才可以声明为“packed”。\n\n请注意，虽然通常没有理由为 packed repeated 字段对多个 key-value 对进行编码，但编码器必须准备好接受多个 key-value 对。在这种情况下，payloads 应该被连接在一起。每一对都必须包含所有元素。\n\nprotocol buffer 解析器必须能够解析被编译为 packed 的 repeated 字段，就像它们未被打包一样，反之亦然。这就保证了 `[packed=true]` 选项的前后向兼容性。\n\n#### 字段顺序（Field Order）\n\n你可以在一个 .proto 文件中以任意顺序使用字段编号，当 message 被序列化时，已知的字段会按照字段编号顺序写入，可以参考提供的 C++，Java 和 Python 的序列化代码。这允许解析代码依赖于字段编号进行优化。但是，protocol buffer 解析器必须能够以任意顺序解析字段，因为并非所有 message 都是通过简单地序列化对象来创建的。例如，有时我们会通过一个简单的连接来合并两个 message。\n\n如果 message 具有未知字段，则当前的 Java 和 C++ 实现在按顺序排序的已知字段之后以任意顺序写入它们，当前的 Python 实现则不会跟踪未知字段。\n","source":"_posts/protocol-buffer-encoding.md","raw":"---\ntitle: Protocol Buffer Encoding\ndate: 2018-06-03 06:02:17\ntags: Protocol Buffer\ncategory: 码梦为生\n---\n\n> 本文翻译自： https://developers.google.com/protocol-buffers/docs/encoding\n\n本文档介绍了 protocol buffer message 的二进制格式。你不需要知道这个就可以在你的应用程序中使用 protocol buffer，但如果你想了解 protocol buffer 格式对编码后的 message 大小的影响，该文档非常有用。\n\n<!--more-->\n\n## 一个简单的 Message\n\n假设你有如下这个非常简单的 message 定义：\n\n```sh\nmessage Test1 {\n  optional int32 a = 1;\n}\n```\n\n在应用程序中，你创建了一个 `Test1` message 并将 `a` 设置为 150，然后将 message 序列化为输出流。如果你能够检查编码后的 message，则会看到三个字节：\n\n```sh\n08 96 01\n```\n\n这些数字的含义是什么呢？我们将稍后展示。\n\n## Base 128 Varints\n\n要理解 protocol buffer 的编码，首先需要了解 varints。varints 是一种将整数序列化成一个或多个字节的方法。数字越小使用的字节数也越小。\n\nvarint 中的每个字节（最后一个字节除外）都设置了最高有效位（most significant bit），简称 msb，表示还有后续字节，如果只有单个字节则不设置 msb。每个字节的低7位用于以7位一组的形式存储数字的二进制补码，**最低有效组放在前面**。\n\n例如，数字1，它是一个单字节，所以 msb 没有被设置：\n\n```sh\n0000 0001\n```\n    \n如果是300，就有点复杂：\n\n    1010 1100 0000 0010\n    \n怎么知道这个是300的呢？首先从每个字节中删除 msb，因为 msb 只是告诉我们是否已达到数字的末尾。（如你所见，由于 varint 中有多个字节，所以 msb 被设置在第一个字节中）：\n\n\n    1010 1100 0000 0010\n    → 010 1100  000 0010\n\n\n因为 varints 的最低有效组放在前面，所以\b需要反转两个7位组。最后进行拼接来获得实际的值：\n\n```sh\n000 0010  010 1100\n→  000 0010 + 010 1100\n→  100101100\n→  256 + 32 + 8 + 4 = 300\n```\n    \n## Message 结构\n\nprotocol buffer 的 message 是一系列 key-value 对。message 的二进制形式只使用了字段的编号作为 key，每个字段的名称和声明类型则是在解码端通过引用 message 类型的定义（即 `.proto` 文件）来确定的。\n\n在对一个 message 进行编码时，key 和 value 被连接成一个字节流。当 message 被解码时，解析器需要跳过它无法识别的字段。这样，在 message 中添加新字段后也不会影响到旧程序。为此，每个 key 实际上由两个值组成：\n1. `.proto` 文件中的字段编号。\n2. 用来获取 value 长度信息的 wire 类型。\n\n可用的 wire 类型如下：\n\n|Type|Meaning|Used For|\n|-|-|-|\n|0|Varint|int32, int64, uint32, uint64, sint32, sint64, bool, enum|\n|1|64-bit|fixed64, sfixed64, double|\n|2|Length-delimited|string, bytes, embedded messages, packed repeated fields|\n|3|Start group|groups (deprecated)|\n|4|End group|groups (deprecated)|\n|5|32-bit|fixed32, sfixed32, float|\n\n在流式 message 中的每个 key 都是一个值为 `(field_number << 3) | wire_type` 的 varint。换句话说，数字的最后三位存储了 wire 类型。\n\n现在让我们回过来看看之前那个简单的例子。你现在已经知道流中的第一个数字总是一个值为 varint 的 key，例子中 key 为 08（删除 msb）：\n\n```sh\n000 1000\n```\n\n取最后三位得到 wire 类型（0），然后右移三位得到字段编号（1）。所以字段编号是1，值是一个 varint。结合前面讲到的 varint 解码知识，可以看到接下来的两个字节存储的值为150。\n\n```sh\n96 01 = 1001 0110  0000 0001\n       → 000 0001 + 001 0110 (drop the msb and reverse the groups of 7 bits)\n       → 10010110\n       → 128 + 16 + 4 + 2 = 150\n```\n\n## 更多的 value 类型\n\n#### 有符号整型（Signed Integers）\n\n正如你在前面的章节中看到的那样，与 wire 类型0相关的所有 protocol buffer 类型都被编码为 varints。但是，在编码负数时，有符号的 int 类型（`sint32` 和 `sint64`）与“标准” int 类型（`int32` 和 `int64`）之间存在很大差异。如果使用 `int32` 或 `int64` 作为负数的类型，则生成的 varint 长度总是为10个字节 - 实际上，它被视为非常大的无符号整数；如果使用 `sint32` 或 `sint64`，对应的 varint 则会使用 ZigZag 编码，所以效率更高。\n\nZigZag 编码将有符号整数映射为无符号整数，因此绝对值小的数字（例如-1）就会有一个小的 varint 编码值。ZigZag 以一种在正整数和负整数之间来回“zig-zags”的方式来实现，所以-1被编码为1，1被编码为2，-2被编码为3，依此类推，如下表所示：\n\n|Signed Original|Encoded As|\n|-|-|\n|0|0|\n|-1|1|\n|1|2|\n|-2|3|\n|2147483647|4294967294|\n|-2147483648|4294967295|\n\n换句话说，每个 `sint32` 类型的值 n 被编码为：\n\n```sh\n(n << 1) ^ (n >> 31)\n```\n\n每个 `sint64` 类型的值 n 被编码为：\n\n```sh\n(n << 1) ^ (n >> 63)\n```\n\n注意第二个移位操作 `n >> 31` 是一个算术移位。所以，这个移位操作的值要么所有位都是0（如果 n 是正数），要么所有位都为1（如果 n 是负数）。\n\n在解析 `sint32` 或 `sint64` 时，其值按上述过程的逆操作解码回原来的有符号数。\n\n#### 非 varint 数字（Non-varint Numbers）\n\n非 varint 数字类型很简单，`double` 和 `fixed64` 的 wire 类型为1，它告诉解析器提取一块64位的数据；类似的， `float` 和 `fixed32` 的 wire 类型为5，它告诉解析器提取一块32位的数据。在这两种情况下，值都以小端字节顺序存储。\n\n#### 字符串（Strings）\n\nwire 类型 2 （length-delimited）表示该值是 varint 编码的长度，\b后面跟着指定的数据字节数。\n\n例如有下面这样的 message 类型：\n\n```sh\nmessage Test2 {\n  optional string b = 2;\n}\n```\n\n将 b 的值设置为“testing”，会得到：\n\n12 07 <span style=\"color:red\">74 65 73 74 69 6e 67<span>\n\n红色的字节部分是 UTF8 编码\b的“testing”。这里的 key 是 0x12，可以得到字段编号为2，wire 类型为2。07 表示 value 的长度为7，随后的7个字节就是我们的字符串。\n\n#### 嵌套的 Message（Embedded Messages）\n\n下面是一个带有我们示例类型 Test1 的嵌入式 message 的定义：\n\n```sh\nmessage Test3 {\n  optional Test1 c = 3;\n}\n```\n\n\b下面是编码后的结果，Test1 的字段 `a` 设置为150：\n\n1a 03 <span style=\"color:red\">08 96 01<span>\n\n可以看到，最后三个字节与我们前面的第一个例子（`08 96 01`）完全相同，在它们前面是数字3。嵌入式 message 的处理方式与字符串完全相同（wire type = 2）。\n\n#### 可选和重复的元素（Optional And Repeated Elements）\n\n如果在 proto2 的 message 定义中有 `repeated` 的元素（没有`[packed = true]`选项），编码后的 message 会有零个或多个具有相同字段编号的 key-value 对。这些 repeated 的值不需要连续的出现，它们可能与其他的字段交错出现。解析时，这些元素相互之间的顺序会保存下来，但是相对于其他字段的顺序将会丢失。而 proto3 会利用打包编码（packed encoding）的方式对 repeated 字段进行编码，之后会介绍。\n\n对于 proto3 中的任何非 `repeated` 字段或 proto2 中的 `optional` 字段，编码后的 message 可能有也可能没有该字段编号的 key-value 对。\n\n通常，编码后的 message 永远不会有非 `repeated` 字段的多个实例。但是，解析器被设计为可以处理这种情况。对于数字类型和字符串，如果同一个字段出现多次，解析器将接受它看到的最后一个值。对于嵌套的 message 字段，解析器合并相同字段的多个实例，就像使用 `Message::MergeFrom` 方法一样 - 那就是，后面的实例的单个字段会替换掉前面出现的，单个嵌套 message 被合并，重复字段被连接起来。这些规则的效果是，解析串联出现的两个编码的 message 产生的结果和单独解析两个 message 然后合并它们的结果是相同的。示例如下：\n\n```sh\nMyMessage message;\nmessage.ParseFromString(str1 + str2);\n```\n\n等同于：\n\n```sh\nMyMessage message, message2;\nmessage.ParseFromString(str1);\nmessage2.ParseFromString(str2);\nmessage.MergeFrom(message2);\n```\n\n这个特性有的时候挺有用的，我们可以在不知道两个 message 的具体类型的情况下合并它们。\n\n\n#### 打包重复字段（Packed Repeated Fields）\n\nprotocol buffer 在 2.1.0 版本引入了 packed repeated 字段，这个字段在 proto2 中的声明需要在 repeated 字段后面添加 `[packed=true]`。在 proto3 中，repeated 字段默认为 packed repeated 字段。这个字段和普通的 repeated 字段的区别在于编码方式不同。一个包含0个元素的 packed repeated 字段不会出现在编码后的 message 中。否则，该字段的所有元素都将打包到一个 wire 类型为2（length-delimited）的 key-value 对中。除了前面没有 key 以外，每个元素的编码方式与通常情况下相同。\n\n假设你有如下的 message 类型：\n\n```sh\nmessage Test4 {\n  repeated int32 d = 4 [packed=true];\n}\n```\n\n现在构造一个 `Test4`，repeated 字段 `d` 的值有3、270和86942。编码后的结果如下：\n\n```sh\n22        // key (field number 4, wire type 2)\n06        // payload size (6 bytes)\n03        // first element (varint 3)\n8E 02     // second element (varint 270)\n9E A7 05  // third element (varint 86942)\n```\n\n只有原始数字类型（varint，32-bit 或 64-bit）的 repeated 字段才可以声明为“packed”。\n\n请注意，虽然通常没有理由为 packed repeated 字段对多个 key-value 对进行编码，但编码器必须准备好接受多个 key-value 对。在这种情况下，payloads 应该被连接在一起。每一对都必须包含所有元素。\n\nprotocol buffer 解析器必须能够解析被编译为 packed 的 repeated 字段，就像它们未被打包一样，反之亦然。这就保证了 `[packed=true]` 选项的前后向兼容性。\n\n#### 字段顺序（Field Order）\n\n你可以在一个 .proto 文件中以任意顺序使用字段编号，当 message 被序列化时，已知的字段会按照字段编号顺序写入，可以参考提供的 C++，Java 和 Python 的序列化代码。这允许解析代码依赖于字段编号进行优化。但是，protocol buffer 解析器必须能够以任意顺序解析字段，因为并非所有 message 都是通过简单地序列化对象来创建的。例如，有时我们会通过一个简单的连接来合并两个 message。\n\n如果 message 具有未知字段，则当前的 Java 和 C++ 实现在按顺序排序的已知字段之后以任意顺序写入它们，当前的 Python 实现则不会跟踪未知字段。\n","slug":"protocol-buffer-encoding","published":1,"updated":"2018-10-29T15:23:50.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cq2001tslm42j7ekj78","content":"<blockquote>\n<p>本文翻译自： <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/protocol-buffers/docs/encoding</a></p>\n</blockquote>\n<p>本文档介绍了 protocol buffer message 的二进制格式。你不需要知道这个就可以在你的应用程序中使用 protocol buffer，但如果你想了解 protocol buffer 格式对编码后的 message 大小的影响，该文档非常有用。</p>\n<a id=\"more\"></a>\n<h2 id=\"一个简单的-Message\"><a href=\"#一个简单的-Message\" class=\"headerlink\" title=\"一个简单的 Message\"></a>一个简单的 Message</h2><p>假设你有如下这个非常简单的 message 定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test1 &#123;</span><br><span class=\"line\">  optional int32 a = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在应用程序中，你创建了一个 <code>Test1</code> message 并将 <code>a</code> 设置为 150，然后将 message 序列化为输出流。如果你能够检查编码后的 message，则会看到三个字节：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">08 96 01</span><br></pre></td></tr></table></figure>\n<p>这些数字的含义是什么呢？我们将稍后展示。</p>\n<h2 id=\"Base-128-Varints\"><a href=\"#Base-128-Varints\" class=\"headerlink\" title=\"Base 128 Varints\"></a>Base 128 Varints</h2><p>要理解 protocol buffer 的编码，首先需要了解 varints。varints 是一种将整数序列化成一个或多个字节的方法。数字越小使用的字节数也越小。</p>\n<p>varint 中的每个字节（最后一个字节除外）都设置了最高有效位（most significant bit），简称 msb，表示还有后续字节，如果只有单个字节则不设置 msb。每个字节的低7位用于以7位一组的形式存储数字的二进制补码，<strong>最低有效组放在前面</strong>。</p>\n<p>例如，数字1，它是一个单字节，所以 msb 没有被设置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000 0001</span><br></pre></td></tr></table></figure>\n<p>如果是300，就有点复杂：</p>\n<pre><code>1010 1100 0000 0010\n</code></pre><p>怎么知道这个是300的呢？首先从每个字节中删除 msb，因为 msb 只是告诉我们是否已达到数字的末尾。（如你所见，由于 varint 中有多个字节，所以 msb 被设置在第一个字节中）：</p>\n<pre><code>1010 1100 0000 0010\n→ 010 1100  000 0010\n</code></pre><p>因为 varints 的最低有效组放在前面，所以\b需要反转两个7位组。最后进行拼接来获得实际的值：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">000 0010  010 1100</span><br><span class=\"line\">→  000 0010 + 010 1100</span><br><span class=\"line\">→  100101100</span><br><span class=\"line\">→  256 + 32 + 8 + 4 = 300</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-结构\"><a href=\"#Message-结构\" class=\"headerlink\" title=\"Message 结构\"></a>Message 结构</h2><p>protocol buffer 的 message 是一系列 key-value 对。message 的二进制形式只使用了字段的编号作为 key，每个字段的名称和声明类型则是在解码端通过引用 message 类型的定义（即 <code>.proto</code> 文件）来确定的。</p>\n<p>在对一个 message 进行编码时，key 和 value 被连接成一个字节流。当 message 被解码时，解析器需要跳过它无法识别的字段。这样，在 message 中添加新字段后也不会影响到旧程序。为此，每个 key 实际上由两个值组成：</p>\n<ol>\n<li><code>.proto</code> 文件中的字段编号。</li>\n<li>用来获取 value 长度信息的 wire 类型。</li>\n</ol>\n<p>可用的 wire 类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Meaning</th>\n<th>Used For</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Varint</td>\n<td>int32, int64, uint32, uint64, sint32, sint64, bool, enum</td>\n</tr>\n<tr>\n<td>1</td>\n<td>64-bit</td>\n<td>fixed64, sfixed64, double</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Length-delimited</td>\n<td>string, bytes, embedded messages, packed repeated fields</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Start group</td>\n<td>groups (deprecated)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>End group</td>\n<td>groups (deprecated)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>32-bit</td>\n<td>fixed32, sfixed32, float</td>\n</tr>\n</tbody>\n</table>\n<p>在流式 message 中的每个 key 都是一个值为 <code>(field_number &lt;&lt; 3) | wire_type</code> 的 varint。换句话说，数字的最后三位存储了 wire 类型。</p>\n<p>现在让我们回过来看看之前那个简单的例子。你现在已经知道流中的第一个数字总是一个值为 varint 的 key，例子中 key 为 08（删除 msb）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">000 1000</span><br></pre></td></tr></table></figure>\n<p>取最后三位得到 wire 类型（0），然后右移三位得到字段编号（1）。所以字段编号是1，值是一个 varint。结合前面讲到的 varint 解码知识，可以看到接下来的两个字节存储的值为150。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">96 01 = 1001 0110  0000 0001</span><br><span class=\"line\">       → 000 0001 + 001 0110 (drop the msb and reverse the groups of 7 bits)</span><br><span class=\"line\">       → 10010110</span><br><span class=\"line\">       → 128 + 16 + 4 + 2 = 150</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多的-value-类型\"><a href=\"#更多的-value-类型\" class=\"headerlink\" title=\"更多的 value 类型\"></a>更多的 value 类型</h2><h4 id=\"有符号整型（Signed-Integers）\"><a href=\"#有符号整型（Signed-Integers）\" class=\"headerlink\" title=\"有符号整型（Signed Integers）\"></a>有符号整型（Signed Integers）</h4><p>正如你在前面的章节中看到的那样，与 wire 类型0相关的所有 protocol buffer 类型都被编码为 varints。但是，在编码负数时，有符号的 int 类型（<code>sint32</code> 和 <code>sint64</code>）与“标准” int 类型（<code>int32</code> 和 <code>int64</code>）之间存在很大差异。如果使用 <code>int32</code> 或 <code>int64</code> 作为负数的类型，则生成的 varint 长度总是为10个字节 - 实际上，它被视为非常大的无符号整数；如果使用 <code>sint32</code> 或 <code>sint64</code>，对应的 varint 则会使用 ZigZag 编码，所以效率更高。</p>\n<p>ZigZag 编码将有符号整数映射为无符号整数，因此绝对值小的数字（例如-1）就会有一个小的 varint 编码值。ZigZag 以一种在正整数和负整数之间来回“zig-zags”的方式来实现，所以-1被编码为1，1被编码为2，-2被编码为3，依此类推，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>Signed Original</th>\n<th>Encoded As</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>-2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2147483647</td>\n<td>4294967294</td>\n</tr>\n<tr>\n<td>-2147483648</td>\n<td>4294967295</td>\n</tr>\n</tbody>\n</table>\n<p>换句话说，每个 <code>sint32</code> 类型的值 n 被编码为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(n &lt;&lt; 1) ^ (n &gt;&gt; 31)</span><br></pre></td></tr></table></figure>\n<p>每个 <code>sint64</code> 类型的值 n 被编码为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(n &lt;&lt; 1) ^ (n &gt;&gt; 63)</span><br></pre></td></tr></table></figure>\n<p>注意第二个移位操作 <code>n &gt;&gt; 31</code> 是一个算术移位。所以，这个移位操作的值要么所有位都是0（如果 n 是正数），要么所有位都为1（如果 n 是负数）。</p>\n<p>在解析 <code>sint32</code> 或 <code>sint64</code> 时，其值按上述过程的逆操作解码回原来的有符号数。</p>\n<h4 id=\"非-varint-数字（Non-varint-Numbers）\"><a href=\"#非-varint-数字（Non-varint-Numbers）\" class=\"headerlink\" title=\"非 varint 数字（Non-varint Numbers）\"></a>非 varint 数字（Non-varint Numbers）</h4><p>非 varint 数字类型很简单，<code>double</code> 和 <code>fixed64</code> 的 wire 类型为1，它告诉解析器提取一块64位的数据；类似的， <code>float</code> 和 <code>fixed32</code> 的 wire 类型为5，它告诉解析器提取一块32位的数据。在这两种情况下，值都以小端字节顺序存储。</p>\n<h4 id=\"字符串（Strings）\"><a href=\"#字符串（Strings）\" class=\"headerlink\" title=\"字符串（Strings）\"></a>字符串（Strings）</h4><p>wire 类型 2 （length-delimited）表示该值是 varint 编码的长度，\b后面跟着指定的数据字节数。</p>\n<p>例如有下面这样的 message 类型：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test2 &#123;</span><br><span class=\"line\">  optional string b = 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将 b 的值设置为“testing”，会得到：</p>\n<p>12 07 <span style=\"color:red\">74 65 73 74 69 6e 67<span></span></span></p>\n<p>红色的字节部分是 UTF8 编码\b的“testing”。这里的 key 是 0x12，可以得到字段编号为2，wire 类型为2。07 表示 value 的长度为7，随后的7个字节就是我们的字符串。</p>\n<h4 id=\"嵌套的-Message（Embedded-Messages）\"><a href=\"#嵌套的-Message（Embedded-Messages）\" class=\"headerlink\" title=\"嵌套的 Message（Embedded Messages）\"></a>嵌套的 Message（Embedded Messages）</h4><p>下面是一个带有我们示例类型 Test1 的嵌入式 message 的定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test3 &#123;</span><br><span class=\"line\">  optional Test1 c = 3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b下面是编码后的结果，Test1 的字段 <code>a</code> 设置为150：</p>\n<p>1a 03 <span style=\"color:red\">08 96 01<span></span></span></p>\n<p>可以看到，最后三个字节与我们前面的第一个例子（<code>08 96 01</code>）完全相同，在它们前面是数字3。嵌入式 message 的处理方式与字符串完全相同（wire type = 2）。</p>\n<h4 id=\"可选和重复的元素（Optional-And-Repeated-Elements）\"><a href=\"#可选和重复的元素（Optional-And-Repeated-Elements）\" class=\"headerlink\" title=\"可选和重复的元素（Optional And Repeated Elements）\"></a>可选和重复的元素（Optional And Repeated Elements）</h4><p>如果在 proto2 的 message 定义中有 <code>repeated</code> 的元素（没有<code>[packed = true]</code>选项），编码后的 message 会有零个或多个具有相同字段编号的 key-value 对。这些 repeated 的值不需要连续的出现，它们可能与其他的字段交错出现。解析时，这些元素相互之间的顺序会保存下来，但是相对于其他字段的顺序将会丢失。而 proto3 会利用打包编码（packed encoding）的方式对 repeated 字段进行编码，之后会介绍。</p>\n<p>对于 proto3 中的任何非 <code>repeated</code> 字段或 proto2 中的 <code>optional</code> 字段，编码后的 message 可能有也可能没有该字段编号的 key-value 对。</p>\n<p>通常，编码后的 message 永远不会有非 <code>repeated</code> 字段的多个实例。但是，解析器被设计为可以处理这种情况。对于数字类型和字符串，如果同一个字段出现多次，解析器将接受它看到的最后一个值。对于嵌套的 message 字段，解析器合并相同字段的多个实例，就像使用 <code>Message::MergeFrom</code> 方法一样 - 那就是，后面的实例的单个字段会替换掉前面出现的，单个嵌套 message 被合并，重复字段被连接起来。这些规则的效果是，解析串联出现的两个编码的 message 产生的结果和单独解析两个 message 然后合并它们的结果是相同的。示例如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyMessage message;</span><br><span class=\"line\">message.ParseFromString(str1 + str2);</span><br></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyMessage message, message2;</span><br><span class=\"line\">message.ParseFromString(str1);</span><br><span class=\"line\">message2.ParseFromString(str2);</span><br><span class=\"line\">message.MergeFrom(message2);</span><br></pre></td></tr></table></figure>\n<p>这个特性有的时候挺有用的，我们可以在不知道两个 message 的具体类型的情况下合并它们。</p>\n<h4 id=\"打包重复字段（Packed-Repeated-Fields）\"><a href=\"#打包重复字段（Packed-Repeated-Fields）\" class=\"headerlink\" title=\"打包重复字段（Packed Repeated Fields）\"></a>打包重复字段（Packed Repeated Fields）</h4><p>protocol buffer 在 2.1.0 版本引入了 packed repeated 字段，这个字段在 proto2 中的声明需要在 repeated 字段后面添加 <code>[packed=true]</code>。在 proto3 中，repeated 字段默认为 packed repeated 字段。这个字段和普通的 repeated 字段的区别在于编码方式不同。一个包含0个元素的 packed repeated 字段不会出现在编码后的 message 中。否则，该字段的所有元素都将打包到一个 wire 类型为2（length-delimited）的 key-value 对中。除了前面没有 key 以外，每个元素的编码方式与通常情况下相同。</p>\n<p>假设你有如下的 message 类型：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test4 &#123;</span><br><span class=\"line\">  repeated int32 d = 4 [packed=<span class=\"literal\">true</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在构造一个 <code>Test4</code>，repeated 字段 <code>d</code> 的值有3、270和86942。编码后的结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">22        // key (field number 4, wire <span class=\"built_in\">type</span> 2)</span><br><span class=\"line\">06        // payload size (6 bytes)</span><br><span class=\"line\">03        // first element (varint 3)</span><br><span class=\"line\">8E 02     // second element (varint 270)</span><br><span class=\"line\">9E A7 05  // third element (varint 86942)</span><br></pre></td></tr></table></figure>\n<p>只有原始数字类型（varint，32-bit 或 64-bit）的 repeated 字段才可以声明为“packed”。</p>\n<p>请注意，虽然通常没有理由为 packed repeated 字段对多个 key-value 对进行编码，但编码器必须准备好接受多个 key-value 对。在这种情况下，payloads 应该被连接在一起。每一对都必须包含所有元素。</p>\n<p>protocol buffer 解析器必须能够解析被编译为 packed 的 repeated 字段，就像它们未被打包一样，反之亦然。这就保证了 <code>[packed=true]</code> 选项的前后向兼容性。</p>\n<h4 id=\"字段顺序（Field-Order）\"><a href=\"#字段顺序（Field-Order）\" class=\"headerlink\" title=\"字段顺序（Field Order）\"></a>字段顺序（Field Order）</h4><p>你可以在一个 .proto 文件中以任意顺序使用字段编号，当 message 被序列化时，已知的字段会按照字段编号顺序写入，可以参考提供的 C++，Java 和 Python 的序列化代码。这允许解析代码依赖于字段编号进行优化。但是，protocol buffer 解析器必须能够以任意顺序解析字段，因为并非所有 message 都是通过简单地序列化对象来创建的。例如，有时我们会通过一个简单的连接来合并两个 message。</p>\n<p>如果 message 具有未知字段，则当前的 Java 和 C++ 实现在按顺序排序的已知字段之后以任意顺序写入它们，当前的 Python 实现则不会跟踪未知字段。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文翻译自： <a href=\"https://developers.google.com/protocol-buffers/docs/encoding\" target=\"_blank\" rel=\"noopener\">https://developers.google.com/protocol-buffers/docs/encoding</a></p>\n</blockquote>\n<p>本文档介绍了 protocol buffer message 的二进制格式。你不需要知道这个就可以在你的应用程序中使用 protocol buffer，但如果你想了解 protocol buffer 格式对编码后的 message 大小的影响，该文档非常有用。</p>","more":"<h2 id=\"一个简单的-Message\"><a href=\"#一个简单的-Message\" class=\"headerlink\" title=\"一个简单的 Message\"></a>一个简单的 Message</h2><p>假设你有如下这个非常简单的 message 定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test1 &#123;</span><br><span class=\"line\">  optional int32 a = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在应用程序中，你创建了一个 <code>Test1</code> message 并将 <code>a</code> 设置为 150，然后将 message 序列化为输出流。如果你能够检查编码后的 message，则会看到三个字节：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">08 96 01</span><br></pre></td></tr></table></figure>\n<p>这些数字的含义是什么呢？我们将稍后展示。</p>\n<h2 id=\"Base-128-Varints\"><a href=\"#Base-128-Varints\" class=\"headerlink\" title=\"Base 128 Varints\"></a>Base 128 Varints</h2><p>要理解 protocol buffer 的编码，首先需要了解 varints。varints 是一种将整数序列化成一个或多个字节的方法。数字越小使用的字节数也越小。</p>\n<p>varint 中的每个字节（最后一个字节除外）都设置了最高有效位（most significant bit），简称 msb，表示还有后续字节，如果只有单个字节则不设置 msb。每个字节的低7位用于以7位一组的形式存储数字的二进制补码，<strong>最低有效组放在前面</strong>。</p>\n<p>例如，数字1，它是一个单字节，所以 msb 没有被设置：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">0000 0001</span><br></pre></td></tr></table></figure>\n<p>如果是300，就有点复杂：</p>\n<pre><code>1010 1100 0000 0010\n</code></pre><p>怎么知道这个是300的呢？首先从每个字节中删除 msb，因为 msb 只是告诉我们是否已达到数字的末尾。（如你所见，由于 varint 中有多个字节，所以 msb 被设置在第一个字节中）：</p>\n<pre><code>1010 1100 0000 0010\n→ 010 1100  000 0010\n</code></pre><p>因为 varints 的最低有效组放在前面，所以\b需要反转两个7位组。最后进行拼接来获得实际的值：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">000 0010  010 1100</span><br><span class=\"line\">→  000 0010 + 010 1100</span><br><span class=\"line\">→  100101100</span><br><span class=\"line\">→  256 + 32 + 8 + 4 = 300</span><br></pre></td></tr></table></figure>\n<h2 id=\"Message-结构\"><a href=\"#Message-结构\" class=\"headerlink\" title=\"Message 结构\"></a>Message 结构</h2><p>protocol buffer 的 message 是一系列 key-value 对。message 的二进制形式只使用了字段的编号作为 key，每个字段的名称和声明类型则是在解码端通过引用 message 类型的定义（即 <code>.proto</code> 文件）来确定的。</p>\n<p>在对一个 message 进行编码时，key 和 value 被连接成一个字节流。当 message 被解码时，解析器需要跳过它无法识别的字段。这样，在 message 中添加新字段后也不会影响到旧程序。为此，每个 key 实际上由两个值组成：</p>\n<ol>\n<li><code>.proto</code> 文件中的字段编号。</li>\n<li>用来获取 value 长度信息的 wire 类型。</li>\n</ol>\n<p>可用的 wire 类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Meaning</th>\n<th>Used For</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>Varint</td>\n<td>int32, int64, uint32, uint64, sint32, sint64, bool, enum</td>\n</tr>\n<tr>\n<td>1</td>\n<td>64-bit</td>\n<td>fixed64, sfixed64, double</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Length-delimited</td>\n<td>string, bytes, embedded messages, packed repeated fields</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Start group</td>\n<td>groups (deprecated)</td>\n</tr>\n<tr>\n<td>4</td>\n<td>End group</td>\n<td>groups (deprecated)</td>\n</tr>\n<tr>\n<td>5</td>\n<td>32-bit</td>\n<td>fixed32, sfixed32, float</td>\n</tr>\n</tbody>\n</table>\n<p>在流式 message 中的每个 key 都是一个值为 <code>(field_number &lt;&lt; 3) | wire_type</code> 的 varint。换句话说，数字的最后三位存储了 wire 类型。</p>\n<p>现在让我们回过来看看之前那个简单的例子。你现在已经知道流中的第一个数字总是一个值为 varint 的 key，例子中 key 为 08（删除 msb）：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">000 1000</span><br></pre></td></tr></table></figure>\n<p>取最后三位得到 wire 类型（0），然后右移三位得到字段编号（1）。所以字段编号是1，值是一个 varint。结合前面讲到的 varint 解码知识，可以看到接下来的两个字节存储的值为150。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">96 01 = 1001 0110  0000 0001</span><br><span class=\"line\">       → 000 0001 + 001 0110 (drop the msb and reverse the groups of 7 bits)</span><br><span class=\"line\">       → 10010110</span><br><span class=\"line\">       → 128 + 16 + 4 + 2 = 150</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多的-value-类型\"><a href=\"#更多的-value-类型\" class=\"headerlink\" title=\"更多的 value 类型\"></a>更多的 value 类型</h2><h4 id=\"有符号整型（Signed-Integers）\"><a href=\"#有符号整型（Signed-Integers）\" class=\"headerlink\" title=\"有符号整型（Signed Integers）\"></a>有符号整型（Signed Integers）</h4><p>正如你在前面的章节中看到的那样，与 wire 类型0相关的所有 protocol buffer 类型都被编码为 varints。但是，在编码负数时，有符号的 int 类型（<code>sint32</code> 和 <code>sint64</code>）与“标准” int 类型（<code>int32</code> 和 <code>int64</code>）之间存在很大差异。如果使用 <code>int32</code> 或 <code>int64</code> 作为负数的类型，则生成的 varint 长度总是为10个字节 - 实际上，它被视为非常大的无符号整数；如果使用 <code>sint32</code> 或 <code>sint64</code>，对应的 varint 则会使用 ZigZag 编码，所以效率更高。</p>\n<p>ZigZag 编码将有符号整数映射为无符号整数，因此绝对值小的数字（例如-1）就会有一个小的 varint 编码值。ZigZag 以一种在正整数和负整数之间来回“zig-zags”的方式来实现，所以-1被编码为1，1被编码为2，-2被编码为3，依此类推，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>Signed Original</th>\n<th>Encoded As</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>-1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n</tr>\n<tr>\n<td>-2</td>\n<td>3</td>\n</tr>\n<tr>\n<td>2147483647</td>\n<td>4294967294</td>\n</tr>\n<tr>\n<td>-2147483648</td>\n<td>4294967295</td>\n</tr>\n</tbody>\n</table>\n<p>换句话说，每个 <code>sint32</code> 类型的值 n 被编码为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(n &lt;&lt; 1) ^ (n &gt;&gt; 31)</span><br></pre></td></tr></table></figure>\n<p>每个 <code>sint64</code> 类型的值 n 被编码为：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">(n &lt;&lt; 1) ^ (n &gt;&gt; 63)</span><br></pre></td></tr></table></figure>\n<p>注意第二个移位操作 <code>n &gt;&gt; 31</code> 是一个算术移位。所以，这个移位操作的值要么所有位都是0（如果 n 是正数），要么所有位都为1（如果 n 是负数）。</p>\n<p>在解析 <code>sint32</code> 或 <code>sint64</code> 时，其值按上述过程的逆操作解码回原来的有符号数。</p>\n<h4 id=\"非-varint-数字（Non-varint-Numbers）\"><a href=\"#非-varint-数字（Non-varint-Numbers）\" class=\"headerlink\" title=\"非 varint 数字（Non-varint Numbers）\"></a>非 varint 数字（Non-varint Numbers）</h4><p>非 varint 数字类型很简单，<code>double</code> 和 <code>fixed64</code> 的 wire 类型为1，它告诉解析器提取一块64位的数据；类似的， <code>float</code> 和 <code>fixed32</code> 的 wire 类型为5，它告诉解析器提取一块32位的数据。在这两种情况下，值都以小端字节顺序存储。</p>\n<h4 id=\"字符串（Strings）\"><a href=\"#字符串（Strings）\" class=\"headerlink\" title=\"字符串（Strings）\"></a>字符串（Strings）</h4><p>wire 类型 2 （length-delimited）表示该值是 varint 编码的长度，\b后面跟着指定的数据字节数。</p>\n<p>例如有下面这样的 message 类型：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test2 &#123;</span><br><span class=\"line\">  optional string b = 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将 b 的值设置为“testing”，会得到：</p>\n<p>12 07 <span style=\"color:red\">74 65 73 74 69 6e 67<span></span></span></p>\n<p>红色的字节部分是 UTF8 编码\b的“testing”。这里的 key 是 0x12，可以得到字段编号为2，wire 类型为2。07 表示 value 的长度为7，随后的7个字节就是我们的字符串。</p>\n<h4 id=\"嵌套的-Message（Embedded-Messages）\"><a href=\"#嵌套的-Message（Embedded-Messages）\" class=\"headerlink\" title=\"嵌套的 Message（Embedded Messages）\"></a>嵌套的 Message（Embedded Messages）</h4><p>下面是一个带有我们示例类型 Test1 的嵌入式 message 的定义：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test3 &#123;</span><br><span class=\"line\">  optional Test1 c = 3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b下面是编码后的结果，Test1 的字段 <code>a</code> 设置为150：</p>\n<p>1a 03 <span style=\"color:red\">08 96 01<span></span></span></p>\n<p>可以看到，最后三个字节与我们前面的第一个例子（<code>08 96 01</code>）完全相同，在它们前面是数字3。嵌入式 message 的处理方式与字符串完全相同（wire type = 2）。</p>\n<h4 id=\"可选和重复的元素（Optional-And-Repeated-Elements）\"><a href=\"#可选和重复的元素（Optional-And-Repeated-Elements）\" class=\"headerlink\" title=\"可选和重复的元素（Optional And Repeated Elements）\"></a>可选和重复的元素（Optional And Repeated Elements）</h4><p>如果在 proto2 的 message 定义中有 <code>repeated</code> 的元素（没有<code>[packed = true]</code>选项），编码后的 message 会有零个或多个具有相同字段编号的 key-value 对。这些 repeated 的值不需要连续的出现，它们可能与其他的字段交错出现。解析时，这些元素相互之间的顺序会保存下来，但是相对于其他字段的顺序将会丢失。而 proto3 会利用打包编码（packed encoding）的方式对 repeated 字段进行编码，之后会介绍。</p>\n<p>对于 proto3 中的任何非 <code>repeated</code> 字段或 proto2 中的 <code>optional</code> 字段，编码后的 message 可能有也可能没有该字段编号的 key-value 对。</p>\n<p>通常，编码后的 message 永远不会有非 <code>repeated</code> 字段的多个实例。但是，解析器被设计为可以处理这种情况。对于数字类型和字符串，如果同一个字段出现多次，解析器将接受它看到的最后一个值。对于嵌套的 message 字段，解析器合并相同字段的多个实例，就像使用 <code>Message::MergeFrom</code> 方法一样 - 那就是，后面的实例的单个字段会替换掉前面出现的，单个嵌套 message 被合并，重复字段被连接起来。这些规则的效果是，解析串联出现的两个编码的 message 产生的结果和单独解析两个 message 然后合并它们的结果是相同的。示例如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyMessage message;</span><br><span class=\"line\">message.ParseFromString(str1 + str2);</span><br></pre></td></tr></table></figure>\n<p>等同于：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">MyMessage message, message2;</span><br><span class=\"line\">message.ParseFromString(str1);</span><br><span class=\"line\">message2.ParseFromString(str2);</span><br><span class=\"line\">message.MergeFrom(message2);</span><br></pre></td></tr></table></figure>\n<p>这个特性有的时候挺有用的，我们可以在不知道两个 message 的具体类型的情况下合并它们。</p>\n<h4 id=\"打包重复字段（Packed-Repeated-Fields）\"><a href=\"#打包重复字段（Packed-Repeated-Fields）\" class=\"headerlink\" title=\"打包重复字段（Packed Repeated Fields）\"></a>打包重复字段（Packed Repeated Fields）</h4><p>protocol buffer 在 2.1.0 版本引入了 packed repeated 字段，这个字段在 proto2 中的声明需要在 repeated 字段后面添加 <code>[packed=true]</code>。在 proto3 中，repeated 字段默认为 packed repeated 字段。这个字段和普通的 repeated 字段的区别在于编码方式不同。一个包含0个元素的 packed repeated 字段不会出现在编码后的 message 中。否则，该字段的所有元素都将打包到一个 wire 类型为2（length-delimited）的 key-value 对中。除了前面没有 key 以外，每个元素的编码方式与通常情况下相同。</p>\n<p>假设你有如下的 message 类型：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">message Test4 &#123;</span><br><span class=\"line\">  repeated int32 d = 4 [packed=<span class=\"literal\">true</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在构造一个 <code>Test4</code>，repeated 字段 <code>d</code> 的值有3、270和86942。编码后的结果如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">22        // key (field number 4, wire <span class=\"built_in\">type</span> 2)</span><br><span class=\"line\">06        // payload size (6 bytes)</span><br><span class=\"line\">03        // first element (varint 3)</span><br><span class=\"line\">8E 02     // second element (varint 270)</span><br><span class=\"line\">9E A7 05  // third element (varint 86942)</span><br></pre></td></tr></table></figure>\n<p>只有原始数字类型（varint，32-bit 或 64-bit）的 repeated 字段才可以声明为“packed”。</p>\n<p>请注意，虽然通常没有理由为 packed repeated 字段对多个 key-value 对进行编码，但编码器必须准备好接受多个 key-value 对。在这种情况下，payloads 应该被连接在一起。每一对都必须包含所有元素。</p>\n<p>protocol buffer 解析器必须能够解析被编译为 packed 的 repeated 字段，就像它们未被打包一样，反之亦然。这就保证了 <code>[packed=true]</code> 选项的前后向兼容性。</p>\n<h4 id=\"字段顺序（Field-Order）\"><a href=\"#字段顺序（Field-Order）\" class=\"headerlink\" title=\"字段顺序（Field Order）\"></a>字段顺序（Field Order）</h4><p>你可以在一个 .proto 文件中以任意顺序使用字段编号，当 message 被序列化时，已知的字段会按照字段编号顺序写入，可以参考提供的 C++，Java 和 Python 的序列化代码。这允许解析代码依赖于字段编号进行优化。但是，protocol buffer 解析器必须能够以任意顺序解析字段，因为并非所有 message 都是通过简单地序列化对象来创建的。例如，有时我们会通过一个简单的连接来合并两个 message。</p>\n<p>如果 message 具有未知字段，则当前的 Java 和 C++ 实现在按顺序排序的已知字段之后以任意顺序写入它们，当前的 Python 实现则不会跟踪未知字段。</p>"},{"title":"vscode 常用快捷键","date":"2016-07-21T12:45:55.000Z","_content":"\nVSCode 的快捷键继承了一些 IDE 风格，有 VS 的身影，也有 Emacs 的身影。简言之，内置快捷键玩熟了，效率提高不是一点两点。\n\n<!--more-->\n\n## 窗口\n\n|操作|快捷键|\n|-|-|\n|打开文件|Ctrl + O|\n|打开文件夹|Ctrl + K + O|\n|保存文件|Ctrl + S|\n|另存为|Ctrl + Shift + S|\n|新建文件|Ctrl + N|\n|关闭当前文件|Ctrl + W 或 Ctrl + F4|\n|关闭所有编辑窗口|Ctrl + K + W|\n|打开新编辑器|Ctrl + Shift + N|\n|关闭编辑器|Ctrl + Shift + W|\n|撤销最近关闭的一个文件编辑窗口|Ctrl + Shift + T|\n|切换打开的文件|Ctrl + Tab|\n|快速切换文件，可搜索|Ctrl + E 或 Ctrl + P|\n|切换标签页的位置|Ctrl + Shift + PgUp / PgDown|\n|多个编辑窗口|Ctrl + 1 Ctrl + 2 Ctrl + 3 或 Ctrl + \\ 或 Ctrl + Click file|\n    \n## 代码编辑\n\n|操作|快捷键|\n|-|-|\n|代码行缩进|Ctrl + [、Ctrl + ]|\n|折叠/展开区域代码|Ctrl + Shift + [、Ctrl + Shift + ]|\n|折叠/展开所有子区域代码|Ctrl + K + [、Ctrl + K + ]|\n|折叠/展开所有区域代码|Ctrl + K + 0、Ctrl + K + J|\n|注释/取消注释|Ctrl + /|\n|块区域注释|Shift + Alt + A|\n|添加函数注释|Ctrl + Alt + D + D|\n|选中当前行|Ctrl + i|\n|删除当前行|Ctrl + Shift + K 或 Shift + Delete|\n|删除光标右侧的单词|Ctrl + Delete|\n|在当前行下边插入一行 |Ctrl + Enter|\n|在当前行上方插入一行| Ctrl + Shift + Enter|\n|历史文件切换|Alt + Left / Right|\n|当前代码行上下移动| Alt + Up / Down|\n|向上向下复制一行|Shift + Alt + Up / Down|\n|视图上下偏移|Ctrl + Up / Down|\n|跳转到上一个 / 下一个错误或者警告|F8 / Shift + F8|\n  \n## 光标相关\n\n|操作|快捷键|\n|-|-|\n|移动到行首|Home|\n|移动到行尾|End|\n|选择从光标到行首|Shift + Home|\n|选择从光标到行尾|Shift + End|\n|移动到文件开头|Ctrl + Home|\n|移动到文件结尾|Ctrl + End|\n|跳转到指定行|Ctrl + G|\n|扩展选取范围|Shift + Alt + Right|\n|缩小选取范围|Shift + Alt + Left|\n|匹配并跳转到花括号的闭合处|Ctrl + Shift + \\|\n|插入光标-支持多个|Alt + Click|\n|上下插入光标-支持多个|Shift + Alt + Click 或 Ctrl + Alt + Up / Down|\n|撤销最后一次光标操作|Ctrl + U|\n|插入光标到选中范围内所有行结束符|Shift + Alt + i|\n|插入光标到所有匹配到的末尾|Ctrl + Shift + L|\n\n## 查询与替换\n\n|操作|快捷键|\n|-|-|\n|当前文件中查找|Ctrl + F|\n|整个文件夹中查找|Ctrl + Shift + F|\n|下一个 / 上一个查询结果|F3 / Shift + F3|\n|选中所有出现在查询中的|Alt + Enter|\n|当前文件中查找替换|Ctrl + H|\n|整个文件夹中查找替换|Ctrl + Shift + H|\n\n## 语言操作\n\n|操作|快捷键|\n|-|-|\n|Emmet指令触发 / 缩进|Tab|\n|格式化代码|Shift + Alt + F|\n|格式化选中部分的代码|Ctrl + K + F|\n|跳转到定义处|F12|\n|查看定义处缩略图|Alt + F12|\n|查看引用|Shift + F12|\n|在其他窗口打开定义处|Ctrl + K + F12|\n|快速修复部分可以修复的语法错误|Ctrl + .|\n|重命名符号以及所有引用|F2|\n|移除空白字符|Ctrl + K + X|\t\n\n## 显示\n\n|操作|快捷键|\n|-|-|\n|打开命令面板|F1 或 Ctrl + Shift + P|\n|全屏|F11|\n|放大 / 缩小字体|Ctrl + = / Ctrl + -|\n|预览markdown|Ctrl + Shift + V|\n|显示 / 隐藏侧边栏|Ctrl + B|\n|打开资源视图|Ctrl + Shift + E|\n|打开全局搜索|Ctrl + Shift + F|\n|打开 Git 可视管理|Ctrl + Shift + G|\n|打开 DeBug 面板|Ctrl + Shift + D|\n|打开插件市场面板|Ctrl + Shift + X|\n|打开问题面板|Ctrl + Shift + M|\n|打开输出面板|Ctrl + Shift + U|\n|打开调试控制台面板|Ctrl + Shift + Y|\n\n## 调试\n\n|操作|快捷键|\n|-|-|\n|启动调试、继续|F5|\n|添加 / 删除断点|F9|\n|单步跳过|F10|\n|单步进入 / 单步跳出|F11 / Shift + F11|\n|显示悬浮|Ctrl + k + i|\n\n## 集成终端\n\n|操作|快捷键|\n|-|-|\n|打开集成终端|Ctrl + `|\n|创建一个新的终端|Ctrl + Shift + `|\n|页面上下翻屏|Shift + PgUp / PgDown|\n|滚动到页面头部或尾部|Ctrl + Home / End|\n\n## 其他\n\n|操作|快捷键|\n|-|-|\n|修改主题|F1 后输入 theme 回车，然后上下键即可预览|\n|修改默认快捷键|File -> Preferences -> Keyboard Shortcuts|","source":"_posts/vscode-hot-key.md","raw":"---\ntitle: vscode 常用快捷键\ndate: 2016-07-21 20:45:55\ntags:\n  - VS Code\n  - editor\n  - 快捷键\ncategory: 码梦为生\n---\n\nVSCode 的快捷键继承了一些 IDE 风格，有 VS 的身影，也有 Emacs 的身影。简言之，内置快捷键玩熟了，效率提高不是一点两点。\n\n<!--more-->\n\n## 窗口\n\n|操作|快捷键|\n|-|-|\n|打开文件|Ctrl + O|\n|打开文件夹|Ctrl + K + O|\n|保存文件|Ctrl + S|\n|另存为|Ctrl + Shift + S|\n|新建文件|Ctrl + N|\n|关闭当前文件|Ctrl + W 或 Ctrl + F4|\n|关闭所有编辑窗口|Ctrl + K + W|\n|打开新编辑器|Ctrl + Shift + N|\n|关闭编辑器|Ctrl + Shift + W|\n|撤销最近关闭的一个文件编辑窗口|Ctrl + Shift + T|\n|切换打开的文件|Ctrl + Tab|\n|快速切换文件，可搜索|Ctrl + E 或 Ctrl + P|\n|切换标签页的位置|Ctrl + Shift + PgUp / PgDown|\n|多个编辑窗口|Ctrl + 1 Ctrl + 2 Ctrl + 3 或 Ctrl + \\ 或 Ctrl + Click file|\n    \n## 代码编辑\n\n|操作|快捷键|\n|-|-|\n|代码行缩进|Ctrl + [、Ctrl + ]|\n|折叠/展开区域代码|Ctrl + Shift + [、Ctrl + Shift + ]|\n|折叠/展开所有子区域代码|Ctrl + K + [、Ctrl + K + ]|\n|折叠/展开所有区域代码|Ctrl + K + 0、Ctrl + K + J|\n|注释/取消注释|Ctrl + /|\n|块区域注释|Shift + Alt + A|\n|添加函数注释|Ctrl + Alt + D + D|\n|选中当前行|Ctrl + i|\n|删除当前行|Ctrl + Shift + K 或 Shift + Delete|\n|删除光标右侧的单词|Ctrl + Delete|\n|在当前行下边插入一行 |Ctrl + Enter|\n|在当前行上方插入一行| Ctrl + Shift + Enter|\n|历史文件切换|Alt + Left / Right|\n|当前代码行上下移动| Alt + Up / Down|\n|向上向下复制一行|Shift + Alt + Up / Down|\n|视图上下偏移|Ctrl + Up / Down|\n|跳转到上一个 / 下一个错误或者警告|F8 / Shift + F8|\n  \n## 光标相关\n\n|操作|快捷键|\n|-|-|\n|移动到行首|Home|\n|移动到行尾|End|\n|选择从光标到行首|Shift + Home|\n|选择从光标到行尾|Shift + End|\n|移动到文件开头|Ctrl + Home|\n|移动到文件结尾|Ctrl + End|\n|跳转到指定行|Ctrl + G|\n|扩展选取范围|Shift + Alt + Right|\n|缩小选取范围|Shift + Alt + Left|\n|匹配并跳转到花括号的闭合处|Ctrl + Shift + \\|\n|插入光标-支持多个|Alt + Click|\n|上下插入光标-支持多个|Shift + Alt + Click 或 Ctrl + Alt + Up / Down|\n|撤销最后一次光标操作|Ctrl + U|\n|插入光标到选中范围内所有行结束符|Shift + Alt + i|\n|插入光标到所有匹配到的末尾|Ctrl + Shift + L|\n\n## 查询与替换\n\n|操作|快捷键|\n|-|-|\n|当前文件中查找|Ctrl + F|\n|整个文件夹中查找|Ctrl + Shift + F|\n|下一个 / 上一个查询结果|F3 / Shift + F3|\n|选中所有出现在查询中的|Alt + Enter|\n|当前文件中查找替换|Ctrl + H|\n|整个文件夹中查找替换|Ctrl + Shift + H|\n\n## 语言操作\n\n|操作|快捷键|\n|-|-|\n|Emmet指令触发 / 缩进|Tab|\n|格式化代码|Shift + Alt + F|\n|格式化选中部分的代码|Ctrl + K + F|\n|跳转到定义处|F12|\n|查看定义处缩略图|Alt + F12|\n|查看引用|Shift + F12|\n|在其他窗口打开定义处|Ctrl + K + F12|\n|快速修复部分可以修复的语法错误|Ctrl + .|\n|重命名符号以及所有引用|F2|\n|移除空白字符|Ctrl + K + X|\t\n\n## 显示\n\n|操作|快捷键|\n|-|-|\n|打开命令面板|F1 或 Ctrl + Shift + P|\n|全屏|F11|\n|放大 / 缩小字体|Ctrl + = / Ctrl + -|\n|预览markdown|Ctrl + Shift + V|\n|显示 / 隐藏侧边栏|Ctrl + B|\n|打开资源视图|Ctrl + Shift + E|\n|打开全局搜索|Ctrl + Shift + F|\n|打开 Git 可视管理|Ctrl + Shift + G|\n|打开 DeBug 面板|Ctrl + Shift + D|\n|打开插件市场面板|Ctrl + Shift + X|\n|打开问题面板|Ctrl + Shift + M|\n|打开输出面板|Ctrl + Shift + U|\n|打开调试控制台面板|Ctrl + Shift + Y|\n\n## 调试\n\n|操作|快捷键|\n|-|-|\n|启动调试、继续|F5|\n|添加 / 删除断点|F9|\n|单步跳过|F10|\n|单步进入 / 单步跳出|F11 / Shift + F11|\n|显示悬浮|Ctrl + k + i|\n\n## 集成终端\n\n|操作|快捷键|\n|-|-|\n|打开集成终端|Ctrl + `|\n|创建一个新的终端|Ctrl + Shift + `|\n|页面上下翻屏|Shift + PgUp / PgDown|\n|滚动到页面头部或尾部|Ctrl + Home / End|\n\n## 其他\n\n|操作|快捷键|\n|-|-|\n|修改主题|F1 后输入 theme 回车，然后上下键即可预览|\n|修改默认快捷键|File -> Preferences -> Keyboard Shortcuts|","slug":"vscode-hot-key","published":1,"updated":"2018-06-02T05:26:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr0l2cq3001wslm4porlyt2e","content":"<p>VSCode 的快捷键继承了一些 IDE 风格，有 VS 的身影，也有 Emacs 的身影。简言之，内置快捷键玩熟了，效率提高不是一点两点。</p>\n<a id=\"more\"></a>\n<h2 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开文件</td>\n<td>Ctrl + O</td>\n</tr>\n<tr>\n<td>打开文件夹</td>\n<td>Ctrl + K + O</td>\n</tr>\n<tr>\n<td>保存文件</td>\n<td>Ctrl + S</td>\n</tr>\n<tr>\n<td>另存为</td>\n<td>Ctrl + Shift + S</td>\n</tr>\n<tr>\n<td>新建文件</td>\n<td>Ctrl + N</td>\n</tr>\n<tr>\n<td>关闭当前文件</td>\n<td>Ctrl + W 或 Ctrl + F4</td>\n</tr>\n<tr>\n<td>关闭所有编辑窗口</td>\n<td>Ctrl + K + W</td>\n</tr>\n<tr>\n<td>打开新编辑器</td>\n<td>Ctrl + Shift + N</td>\n</tr>\n<tr>\n<td>关闭编辑器</td>\n<td>Ctrl + Shift + W</td>\n</tr>\n<tr>\n<td>撤销最近关闭的一个文件编辑窗口</td>\n<td>Ctrl + Shift + T</td>\n</tr>\n<tr>\n<td>切换打开的文件</td>\n<td>Ctrl + Tab</td>\n</tr>\n<tr>\n<td>快速切换文件，可搜索</td>\n<td>Ctrl + E 或 Ctrl + P</td>\n</tr>\n<tr>\n<td>切换标签页的位置</td>\n<td>Ctrl + Shift + PgUp / PgDown</td>\n</tr>\n<tr>\n<td>多个编辑窗口</td>\n<td>Ctrl + 1 Ctrl + 2 Ctrl + 3 或 Ctrl + \\ 或 Ctrl + Click file</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码编辑\"><a href=\"#代码编辑\" class=\"headerlink\" title=\"代码编辑\"></a>代码编辑</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码行缩进</td>\n<td>Ctrl + [、Ctrl + ]</td>\n</tr>\n<tr>\n<td>折叠/展开区域代码</td>\n<td>Ctrl + Shift + [、Ctrl + Shift + ]</td>\n</tr>\n<tr>\n<td>折叠/展开所有子区域代码</td>\n<td>Ctrl + K + [、Ctrl + K + ]</td>\n</tr>\n<tr>\n<td>折叠/展开所有区域代码</td>\n<td>Ctrl + K + 0、Ctrl + K + J</td>\n</tr>\n<tr>\n<td>注释/取消注释</td>\n<td>Ctrl + /</td>\n</tr>\n<tr>\n<td>块区域注释</td>\n<td>Shift + Alt + A</td>\n</tr>\n<tr>\n<td>添加函数注释</td>\n<td>Ctrl + Alt + D + D</td>\n</tr>\n<tr>\n<td>选中当前行</td>\n<td>Ctrl + i</td>\n</tr>\n<tr>\n<td>删除当前行</td>\n<td>Ctrl + Shift + K 或 Shift + Delete</td>\n</tr>\n<tr>\n<td>删除光标右侧的单词</td>\n<td>Ctrl + Delete</td>\n</tr>\n<tr>\n<td>在当前行下边插入一行</td>\n<td>Ctrl + Enter</td>\n</tr>\n<tr>\n<td>在当前行上方插入一行</td>\n<td>Ctrl + Shift + Enter</td>\n</tr>\n<tr>\n<td>历史文件切换</td>\n<td>Alt + Left / Right</td>\n</tr>\n<tr>\n<td>当前代码行上下移动</td>\n<td>Alt + Up / Down</td>\n</tr>\n<tr>\n<td>向上向下复制一行</td>\n<td>Shift + Alt + Up / Down</td>\n</tr>\n<tr>\n<td>视图上下偏移</td>\n<td>Ctrl + Up / Down</td>\n</tr>\n<tr>\n<td>跳转到上一个 / 下一个错误或者警告</td>\n<td>F8 / Shift + F8</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"光标相关\"><a href=\"#光标相关\" class=\"headerlink\" title=\"光标相关\"></a>光标相关</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>移动到行首</td>\n<td>Home</td>\n</tr>\n<tr>\n<td>移动到行尾</td>\n<td>End</td>\n</tr>\n<tr>\n<td>选择从光标到行首</td>\n<td>Shift + Home</td>\n</tr>\n<tr>\n<td>选择从光标到行尾</td>\n<td>Shift + End</td>\n</tr>\n<tr>\n<td>移动到文件开头</td>\n<td>Ctrl + Home</td>\n</tr>\n<tr>\n<td>移动到文件结尾</td>\n<td>Ctrl + End</td>\n</tr>\n<tr>\n<td>跳转到指定行</td>\n<td>Ctrl + G</td>\n</tr>\n<tr>\n<td>扩展选取范围</td>\n<td>Shift + Alt + Right</td>\n</tr>\n<tr>\n<td>缩小选取范围</td>\n<td>Shift + Alt + Left</td>\n</tr>\n<tr>\n<td>匹配并跳转到花括号的闭合处</td>\n<td>Ctrl + Shift + \\</td>\n</tr>\n<tr>\n<td>插入光标-支持多个</td>\n<td>Alt + Click</td>\n</tr>\n<tr>\n<td>上下插入光标-支持多个</td>\n<td>Shift + Alt + Click 或 Ctrl + Alt + Up / Down</td>\n</tr>\n<tr>\n<td>撤销最后一次光标操作</td>\n<td>Ctrl + U</td>\n</tr>\n<tr>\n<td>插入光标到选中范围内所有行结束符</td>\n<td>Shift + Alt + i</td>\n</tr>\n<tr>\n<td>插入光标到所有匹配到的末尾</td>\n<td>Ctrl + Shift + L</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查询与替换\"><a href=\"#查询与替换\" class=\"headerlink\" title=\"查询与替换\"></a>查询与替换</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>当前文件中查找</td>\n<td>Ctrl + F</td>\n</tr>\n<tr>\n<td>整个文件夹中查找</td>\n<td>Ctrl + Shift + F</td>\n</tr>\n<tr>\n<td>下一个 / 上一个查询结果</td>\n<td>F3 / Shift + F3</td>\n</tr>\n<tr>\n<td>选中所有出现在查询中的</td>\n<td>Alt + Enter</td>\n</tr>\n<tr>\n<td>当前文件中查找替换</td>\n<td>Ctrl + H</td>\n</tr>\n<tr>\n<td>整个文件夹中查找替换</td>\n<td>Ctrl + Shift + H</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语言操作\"><a href=\"#语言操作\" class=\"headerlink\" title=\"语言操作\"></a>语言操作</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Emmet指令触发 / 缩进</td>\n<td>Tab</td>\n</tr>\n<tr>\n<td>格式化代码</td>\n<td>Shift + Alt + F</td>\n</tr>\n<tr>\n<td>格式化选中部分的代码</td>\n<td>Ctrl + K + F</td>\n</tr>\n<tr>\n<td>跳转到定义处</td>\n<td>F12</td>\n</tr>\n<tr>\n<td>查看定义处缩略图</td>\n<td>Alt + F12</td>\n</tr>\n<tr>\n<td>查看引用</td>\n<td>Shift + F12</td>\n</tr>\n<tr>\n<td>在其他窗口打开定义处</td>\n<td>Ctrl + K + F12</td>\n</tr>\n<tr>\n<td>快速修复部分可以修复的语法错误</td>\n<td>Ctrl + .</td>\n</tr>\n<tr>\n<td>重命名符号以及所有引用</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>移除空白字符</td>\n<td>Ctrl + K + X</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"显示\"><a href=\"#显示\" class=\"headerlink\" title=\"显示\"></a>显示</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开命令面板</td>\n<td>F1 或 Ctrl + Shift + P</td>\n</tr>\n<tr>\n<td>全屏</td>\n<td>F11</td>\n</tr>\n<tr>\n<td>放大 / 缩小字体</td>\n<td>Ctrl + = / Ctrl + -</td>\n</tr>\n<tr>\n<td>预览markdown</td>\n<td>Ctrl + Shift + V</td>\n</tr>\n<tr>\n<td>显示 / 隐藏侧边栏</td>\n<td>Ctrl + B</td>\n</tr>\n<tr>\n<td>打开资源视图</td>\n<td>Ctrl + Shift + E</td>\n</tr>\n<tr>\n<td>打开全局搜索</td>\n<td>Ctrl + Shift + F</td>\n</tr>\n<tr>\n<td>打开 Git 可视管理</td>\n<td>Ctrl + Shift + G</td>\n</tr>\n<tr>\n<td>打开 DeBug 面板</td>\n<td>Ctrl + Shift + D</td>\n</tr>\n<tr>\n<td>打开插件市场面板</td>\n<td>Ctrl + Shift + X</td>\n</tr>\n<tr>\n<td>打开问题面板</td>\n<td>Ctrl + Shift + M</td>\n</tr>\n<tr>\n<td>打开输出面板</td>\n<td>Ctrl + Shift + U</td>\n</tr>\n<tr>\n<td>打开调试控制台面板</td>\n<td>Ctrl + Shift + Y</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动调试、继续</td>\n<td>F5</td>\n</tr>\n<tr>\n<td>添加 / 删除断点</td>\n<td>F9</td>\n</tr>\n<tr>\n<td>单步跳过</td>\n<td>F10</td>\n</tr>\n<tr>\n<td>单步进入 / 单步跳出</td>\n<td>F11 / Shift + F11</td>\n</tr>\n<tr>\n<td>显示悬浮</td>\n<td>Ctrl + k + i</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"集成终端\"><a href=\"#集成终端\" class=\"headerlink\" title=\"集成终端\"></a>集成终端</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开集成终端</td>\n<td>Ctrl + `</td>\n</tr>\n<tr>\n<td>创建一个新的终端</td>\n<td>Ctrl + Shift + `</td>\n</tr>\n<tr>\n<td>页面上下翻屏</td>\n<td>Shift + PgUp / PgDown</td>\n</tr>\n<tr>\n<td>滚动到页面头部或尾部</td>\n<td>Ctrl + Home / End</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>修改主题</td>\n<td>F1 后输入 theme 回车，然后上下键即可预览</td>\n</tr>\n<tr>\n<td>修改默认快捷键</td>\n<td>File -&gt; Preferences -&gt; Keyboard Shortcuts</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>VSCode 的快捷键继承了一些 IDE 风格，有 VS 的身影，也有 Emacs 的身影。简言之，内置快捷键玩熟了，效率提高不是一点两点。</p>","more":"<h2 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开文件</td>\n<td>Ctrl + O</td>\n</tr>\n<tr>\n<td>打开文件夹</td>\n<td>Ctrl + K + O</td>\n</tr>\n<tr>\n<td>保存文件</td>\n<td>Ctrl + S</td>\n</tr>\n<tr>\n<td>另存为</td>\n<td>Ctrl + Shift + S</td>\n</tr>\n<tr>\n<td>新建文件</td>\n<td>Ctrl + N</td>\n</tr>\n<tr>\n<td>关闭当前文件</td>\n<td>Ctrl + W 或 Ctrl + F4</td>\n</tr>\n<tr>\n<td>关闭所有编辑窗口</td>\n<td>Ctrl + K + W</td>\n</tr>\n<tr>\n<td>打开新编辑器</td>\n<td>Ctrl + Shift + N</td>\n</tr>\n<tr>\n<td>关闭编辑器</td>\n<td>Ctrl + Shift + W</td>\n</tr>\n<tr>\n<td>撤销最近关闭的一个文件编辑窗口</td>\n<td>Ctrl + Shift + T</td>\n</tr>\n<tr>\n<td>切换打开的文件</td>\n<td>Ctrl + Tab</td>\n</tr>\n<tr>\n<td>快速切换文件，可搜索</td>\n<td>Ctrl + E 或 Ctrl + P</td>\n</tr>\n<tr>\n<td>切换标签页的位置</td>\n<td>Ctrl + Shift + PgUp / PgDown</td>\n</tr>\n<tr>\n<td>多个编辑窗口</td>\n<td>Ctrl + 1 Ctrl + 2 Ctrl + 3 或 Ctrl + \\ 或 Ctrl + Click file</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码编辑\"><a href=\"#代码编辑\" class=\"headerlink\" title=\"代码编辑\"></a>代码编辑</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码行缩进</td>\n<td>Ctrl + [、Ctrl + ]</td>\n</tr>\n<tr>\n<td>折叠/展开区域代码</td>\n<td>Ctrl + Shift + [、Ctrl + Shift + ]</td>\n</tr>\n<tr>\n<td>折叠/展开所有子区域代码</td>\n<td>Ctrl + K + [、Ctrl + K + ]</td>\n</tr>\n<tr>\n<td>折叠/展开所有区域代码</td>\n<td>Ctrl + K + 0、Ctrl + K + J</td>\n</tr>\n<tr>\n<td>注释/取消注释</td>\n<td>Ctrl + /</td>\n</tr>\n<tr>\n<td>块区域注释</td>\n<td>Shift + Alt + A</td>\n</tr>\n<tr>\n<td>添加函数注释</td>\n<td>Ctrl + Alt + D + D</td>\n</tr>\n<tr>\n<td>选中当前行</td>\n<td>Ctrl + i</td>\n</tr>\n<tr>\n<td>删除当前行</td>\n<td>Ctrl + Shift + K 或 Shift + Delete</td>\n</tr>\n<tr>\n<td>删除光标右侧的单词</td>\n<td>Ctrl + Delete</td>\n</tr>\n<tr>\n<td>在当前行下边插入一行</td>\n<td>Ctrl + Enter</td>\n</tr>\n<tr>\n<td>在当前行上方插入一行</td>\n<td>Ctrl + Shift + Enter</td>\n</tr>\n<tr>\n<td>历史文件切换</td>\n<td>Alt + Left / Right</td>\n</tr>\n<tr>\n<td>当前代码行上下移动</td>\n<td>Alt + Up / Down</td>\n</tr>\n<tr>\n<td>向上向下复制一行</td>\n<td>Shift + Alt + Up / Down</td>\n</tr>\n<tr>\n<td>视图上下偏移</td>\n<td>Ctrl + Up / Down</td>\n</tr>\n<tr>\n<td>跳转到上一个 / 下一个错误或者警告</td>\n<td>F8 / Shift + F8</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"光标相关\"><a href=\"#光标相关\" class=\"headerlink\" title=\"光标相关\"></a>光标相关</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>移动到行首</td>\n<td>Home</td>\n</tr>\n<tr>\n<td>移动到行尾</td>\n<td>End</td>\n</tr>\n<tr>\n<td>选择从光标到行首</td>\n<td>Shift + Home</td>\n</tr>\n<tr>\n<td>选择从光标到行尾</td>\n<td>Shift + End</td>\n</tr>\n<tr>\n<td>移动到文件开头</td>\n<td>Ctrl + Home</td>\n</tr>\n<tr>\n<td>移动到文件结尾</td>\n<td>Ctrl + End</td>\n</tr>\n<tr>\n<td>跳转到指定行</td>\n<td>Ctrl + G</td>\n</tr>\n<tr>\n<td>扩展选取范围</td>\n<td>Shift + Alt + Right</td>\n</tr>\n<tr>\n<td>缩小选取范围</td>\n<td>Shift + Alt + Left</td>\n</tr>\n<tr>\n<td>匹配并跳转到花括号的闭合处</td>\n<td>Ctrl + Shift + \\</td>\n</tr>\n<tr>\n<td>插入光标-支持多个</td>\n<td>Alt + Click</td>\n</tr>\n<tr>\n<td>上下插入光标-支持多个</td>\n<td>Shift + Alt + Click 或 Ctrl + Alt + Up / Down</td>\n</tr>\n<tr>\n<td>撤销最后一次光标操作</td>\n<td>Ctrl + U</td>\n</tr>\n<tr>\n<td>插入光标到选中范围内所有行结束符</td>\n<td>Shift + Alt + i</td>\n</tr>\n<tr>\n<td>插入光标到所有匹配到的末尾</td>\n<td>Ctrl + Shift + L</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"查询与替换\"><a href=\"#查询与替换\" class=\"headerlink\" title=\"查询与替换\"></a>查询与替换</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>当前文件中查找</td>\n<td>Ctrl + F</td>\n</tr>\n<tr>\n<td>整个文件夹中查找</td>\n<td>Ctrl + Shift + F</td>\n</tr>\n<tr>\n<td>下一个 / 上一个查询结果</td>\n<td>F3 / Shift + F3</td>\n</tr>\n<tr>\n<td>选中所有出现在查询中的</td>\n<td>Alt + Enter</td>\n</tr>\n<tr>\n<td>当前文件中查找替换</td>\n<td>Ctrl + H</td>\n</tr>\n<tr>\n<td>整个文件夹中查找替换</td>\n<td>Ctrl + Shift + H</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"语言操作\"><a href=\"#语言操作\" class=\"headerlink\" title=\"语言操作\"></a>语言操作</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Emmet指令触发 / 缩进</td>\n<td>Tab</td>\n</tr>\n<tr>\n<td>格式化代码</td>\n<td>Shift + Alt + F</td>\n</tr>\n<tr>\n<td>格式化选中部分的代码</td>\n<td>Ctrl + K + F</td>\n</tr>\n<tr>\n<td>跳转到定义处</td>\n<td>F12</td>\n</tr>\n<tr>\n<td>查看定义处缩略图</td>\n<td>Alt + F12</td>\n</tr>\n<tr>\n<td>查看引用</td>\n<td>Shift + F12</td>\n</tr>\n<tr>\n<td>在其他窗口打开定义处</td>\n<td>Ctrl + K + F12</td>\n</tr>\n<tr>\n<td>快速修复部分可以修复的语法错误</td>\n<td>Ctrl + .</td>\n</tr>\n<tr>\n<td>重命名符号以及所有引用</td>\n<td>F2</td>\n</tr>\n<tr>\n<td>移除空白字符</td>\n<td>Ctrl + K + X</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"显示\"><a href=\"#显示\" class=\"headerlink\" title=\"显示\"></a>显示</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开命令面板</td>\n<td>F1 或 Ctrl + Shift + P</td>\n</tr>\n<tr>\n<td>全屏</td>\n<td>F11</td>\n</tr>\n<tr>\n<td>放大 / 缩小字体</td>\n<td>Ctrl + = / Ctrl + -</td>\n</tr>\n<tr>\n<td>预览markdown</td>\n<td>Ctrl + Shift + V</td>\n</tr>\n<tr>\n<td>显示 / 隐藏侧边栏</td>\n<td>Ctrl + B</td>\n</tr>\n<tr>\n<td>打开资源视图</td>\n<td>Ctrl + Shift + E</td>\n</tr>\n<tr>\n<td>打开全局搜索</td>\n<td>Ctrl + Shift + F</td>\n</tr>\n<tr>\n<td>打开 Git 可视管理</td>\n<td>Ctrl + Shift + G</td>\n</tr>\n<tr>\n<td>打开 DeBug 面板</td>\n<td>Ctrl + Shift + D</td>\n</tr>\n<tr>\n<td>打开插件市场面板</td>\n<td>Ctrl + Shift + X</td>\n</tr>\n<tr>\n<td>打开问题面板</td>\n<td>Ctrl + Shift + M</td>\n</tr>\n<tr>\n<td>打开输出面板</td>\n<td>Ctrl + Shift + U</td>\n</tr>\n<tr>\n<td>打开调试控制台面板</td>\n<td>Ctrl + Shift + Y</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动调试、继续</td>\n<td>F5</td>\n</tr>\n<tr>\n<td>添加 / 删除断点</td>\n<td>F9</td>\n</tr>\n<tr>\n<td>单步跳过</td>\n<td>F10</td>\n</tr>\n<tr>\n<td>单步进入 / 单步跳出</td>\n<td>F11 / Shift + F11</td>\n</tr>\n<tr>\n<td>显示悬浮</td>\n<td>Ctrl + k + i</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"集成终端\"><a href=\"#集成终端\" class=\"headerlink\" title=\"集成终端\"></a>集成终端</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>打开集成终端</td>\n<td>Ctrl + `</td>\n</tr>\n<tr>\n<td>创建一个新的终端</td>\n<td>Ctrl + Shift + `</td>\n</tr>\n<tr>\n<td>页面上下翻屏</td>\n<td>Shift + PgUp / PgDown</td>\n</tr>\n<tr>\n<td>滚动到页面头部或尾部</td>\n<td>Ctrl + Home / End</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>快捷键</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>修改主题</td>\n<td>F1 后输入 theme 回车，然后上下键即可预览</td>\n</tr>\n<tr>\n<td>修改默认快捷键</td>\n<td>File -&gt; Preferences -&gt; Keyboard Shortcuts</td>\n</tr>\n</tbody>\n</table>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjr0l2cp40000slm4fte7t9ms","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpk000eslm4vw13o28r"},{"post_id":"cjr0l2cpf0009slm4u02axt2t","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpl000hslm4ps4wwd8z"},{"post_id":"cjr0l2cph000cslm4jnjumubw","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpm000kslm4rlz2qjr9"},{"post_id":"cjr0l2cp80002slm42y9oetv7","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpo000nslm4pv0p2qdn"},{"post_id":"cjr0l2cpl000gslm43m36ry0q","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpp000qslm4azn6qkg9"},{"post_id":"cjr0l2cpm000jslm42grqferx","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpq000uslm416p1ypue"},{"post_id":"cjr0l2cpn000mslm42wofuoah","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpr000xslm45oeoxz3y"},{"post_id":"cjr0l2cpi000dslm4o1uazgex","category_id":"cjr0l2cpl000islm426urj080","_id":"cjr0l2cps000zslm4dxq49z37"},{"post_id":"cjr0l2cpo000pslm4m0nlwhxh","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpt0013slm40nezmau2"},{"post_id":"cjr0l2cpp000tslm4vbv76bx8","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpu0016slm4e235yjl9"},{"post_id":"cjr0l2cpq000wslm4fyr793xu","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpv0019slm47dv5wbhy"},{"post_id":"cjr0l2cpr000yslm4opvr3oie","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpw001bslm40ghb8zcv"},{"post_id":"cjr0l2cps0012slm47fw59k1q","category_id":"cjr0l2cpl000islm426urj080","_id":"cjr0l2cpx001fslm4gglpbfgm"},{"post_id":"cjr0l2cpu0018slm46wtj6is2","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpy001islm45rj750d2"},{"post_id":"cjr0l2cpv001aslm4vmcdqgd9","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cpz001lslm4fc2h5fyy"},{"post_id":"cjr0l2cpx001hslm4r4fnf708","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cq1001qslm4opz17kf1"},{"post_id":"cjr0l2cpy001kslm4gejwvnne","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cq2001uslm4le08uwy9"},{"post_id":"cjr0l2cpz001nslm4dq34nwu7","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cq4001xslm4nv6b0eqq"},{"post_id":"cjr0l2cq2001tslm42j7ekj78","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cq40021slm4qobzk13s"},{"post_id":"cjr0l2cq3001wslm4porlyt2e","category_id":"cjr0l2cpa0004slm4pddmzcgj","_id":"cjr0l2cq50023slm4xd613f5l"}],"PostTag":[{"post_id":"cjr0l2cp40000slm4fte7t9ms","tag_id":"cjr0l2cpb0005slm4j5fjsg7m","_id":"cjr0l2cpo000oslm45tottkwl"},{"post_id":"cjr0l2cp40000slm4fte7t9ms","tag_id":"cjr0l2cpg000bslm4tv2fpa8x","_id":"cjr0l2cpp000rslm4sqvf6n34"},{"post_id":"cjr0l2cp40000slm4fte7t9ms","tag_id":"cjr0l2cpk000fslm40o4iumnj","_id":"cjr0l2cpq000vslm4mhbnvs4h"},{"post_id":"cjr0l2cp80002slm42y9oetv7","tag_id":"cjr0l2cpn000lslm448cifnde","_id":"cjr0l2cps0011slm4frpxtr08"},{"post_id":"cjr0l2cp80002slm42y9oetv7","tag_id":"cjr0l2cpp000sslm4x60iejtj","_id":"cjr0l2cpt0014slm4qyzx3ovx"},{"post_id":"cjr0l2cpu0018slm46wtj6is2","tag_id":"cjr0l2cps0010slm4afridj63","_id":"cjr0l2cpw001dslm4wzywhgz3"},{"post_id":"cjr0l2cpv001aslm4vmcdqgd9","tag_id":"cjr0l2cps0010slm4afridj63","_id":"cjr0l2cpx001gslm45c6gr1gr"},{"post_id":"cjr0l2cpc0006slm4tnmcuu6k","tag_id":"cjr0l2cps0010slm4afridj63","_id":"cjr0l2cpz001mslm4ynomdavl"},{"post_id":"cjr0l2cpc0006slm4tnmcuu6k","tag_id":"cjr0l2cpu0017slm4pxsvjik2","_id":"cjr0l2cq0001oslm4rgcb6gpw"},{"post_id":"cjr0l2cpc0006slm4tnmcuu6k","tag_id":"cjr0l2cpw001cslm4eimka6ia","_id":"cjr0l2cq2001sslm4zokdw2xx"},{"post_id":"cjr0l2cpz001nslm4dq34nwu7","tag_id":"cjr0l2cpn000lslm448cifnde","_id":"cjr0l2cq2001vslm4766m4qto"},{"post_id":"cjr0l2cpf0009slm4u02axt2t","tag_id":"cjr0l2cpy001jslm4ml9g450n","_id":"cjr0l2cq4001zslm4kgq6ythw"},{"post_id":"cjr0l2cph000cslm4jnjumubw","tag_id":"cjr0l2cq1001rslm4zs5dknix","_id":"cjr0l2cq40020slm4578ib6cd"},{"post_id":"cjr0l2cpi000dslm4o1uazgex","tag_id":"cjr0l2cq4001yslm4a71wfur4","_id":"cjr0l2cq50025slm45r94qpnt"},{"post_id":"cjr0l2cpi000dslm4o1uazgex","tag_id":"cjr0l2cq40022slm4pys5xlj5","_id":"cjr0l2cq50026slm42t17faeh"},{"post_id":"cjr0l2cpl000gslm43m36ry0q","tag_id":"cjr0l2cq50024slm46gc0havg","_id":"cjr0l2cq60029slm4s7jj3oqj"},{"post_id":"cjr0l2cpl000gslm43m36ry0q","tag_id":"cjr0l2cpn000lslm448cifnde","_id":"cjr0l2cq6002aslm4tt2dzel6"},{"post_id":"cjr0l2cpm000jslm42grqferx","tag_id":"cjr0l2cq60028slm4hfl5p0xu","_id":"cjr0l2cq6002dslm4q5gk9okj"},{"post_id":"cjr0l2cpm000jslm42grqferx","tag_id":"cjr0l2cq6002bslm4ziyd504a","_id":"cjr0l2cq6002eslm4v8tkq2qk"},{"post_id":"cjr0l2cpn000mslm42wofuoah","tag_id":"cjr0l2cq6002cslm4gnt58nz5","_id":"cjr0l2cq7002gslm4mm20j9ao"},{"post_id":"cjr0l2cpo000pslm4m0nlwhxh","tag_id":"cjr0l2cq6002fslm4cjzxmo60","_id":"cjr0l2cq7002islm4ubo1t5kh"},{"post_id":"cjr0l2cpp000tslm4vbv76bx8","tag_id":"cjr0l2cq7002hslm4sqsto0g2","_id":"cjr0l2cq7002kslm4tvx4jcnd"},{"post_id":"cjr0l2cpq000wslm4fyr793xu","tag_id":"cjr0l2cq7002jslm4bvjgf93d","_id":"cjr0l2cq8002mslm4ugqgibfb"},{"post_id":"cjr0l2cpq000wslm4fyr793xu","tag_id":"cjr0l2cpb0005slm4j5fjsg7m","_id":"cjr0l2cq8002nslm46169s6xa"},{"post_id":"cjr0l2cpr000yslm4opvr3oie","tag_id":"cjr0l2cq7002lslm4iha5nf2q","_id":"cjr0l2cq8002pslm4ainsj8xv"},{"post_id":"cjr0l2cps0012slm47fw59k1q","tag_id":"cjr0l2cq4001yslm4a71wfur4","_id":"cjr0l2cq9002rslm4pt8ca2l5"},{"post_id":"cjr0l2cpt0015slm408464oar","tag_id":"cjr0l2cq8002qslm4f4nq88pv","_id":"cjr0l2cq9002tslm4trcpfpa3"},{"post_id":"cjr0l2cpw001eslm4pzgdzoch","tag_id":"cjr0l2cq7002lslm4iha5nf2q","_id":"cjr0l2cq9002vslm4fowl3qvh"},{"post_id":"cjr0l2cpx001hslm4r4fnf708","tag_id":"cjr0l2cq9002uslm4fbkpcbg5","_id":"cjr0l2cqa0030slm4kb72gi3b"},{"post_id":"cjr0l2cpx001hslm4r4fnf708","tag_id":"cjr0l2cq9002wslm435uod8gv","_id":"cjr0l2cqa0031slm43mjgqqjz"},{"post_id":"cjr0l2cpx001hslm4r4fnf708","tag_id":"cjr0l2cqa002xslm4r9chyfxf","_id":"cjr0l2cqb0033slm4597norqg"},{"post_id":"cjr0l2cpx001hslm4r4fnf708","tag_id":"cjr0l2cqa002yslm4zp61zbbw","_id":"cjr0l2cqb0034slm4sltlwv74"},{"post_id":"cjr0l2cpy001kslm4gejwvnne","tag_id":"cjr0l2cqa002zslm4mpxmfvzo","_id":"cjr0l2cqb0036slm4ajqc1lna"},{"post_id":"cjr0l2cq0001pslm4vi6jzbce","tag_id":"cjr0l2cqa0032slm40kqj48ga","_id":"cjr0l2cqb0037slm4tzbobfmz"},{"post_id":"cjr0l2cq2001tslm42j7ekj78","tag_id":"cjr0l2cqa002zslm4mpxmfvzo","_id":"cjr0l2cqc0039slm43aep08x1"},{"post_id":"cjr0l2cq3001wslm4porlyt2e","tag_id":"cjr0l2cqb0038slm4ix1c00z2","_id":"cjr0l2cqd003cslm49093n4kw"},{"post_id":"cjr0l2cq3001wslm4porlyt2e","tag_id":"cjr0l2cqc003aslm4t3lon1l6","_id":"cjr0l2cqd003dslm4aqhur6zi"},{"post_id":"cjr0l2cq3001wslm4porlyt2e","tag_id":"cjr0l2cq6002bslm4ziyd504a","_id":"cjr0l2cqd003eslm46ntfgf5y"}],"Tag":[{"name":"Golang","_id":"cjr0l2cpb0005slm4j5fjsg7m"},{"name":"配置方案","_id":"cjr0l2cpg000bslm4tv2fpa8x"},{"name":"微服务","_id":"cjr0l2cpk000fslm40o4iumnj"},{"name":"Node.js","_id":"cjr0l2cpn000lslm448cifnde"},{"name":"APM","_id":"cjr0l2cpp000sslm4x60iejtj"},{"name":"MySQL","_id":"cjr0l2cps0010slm4afridj63"},{"name":"主从复制","_id":"cjr0l2cpu0017slm4pxsvjik2"},{"name":"码梦为生","_id":"cjr0l2cpw001cslm4eimka6ia"},{"name":"URL","_id":"cjr0l2cpy001jslm4ml9g450n"},{"name":"HTTP","_id":"cjr0l2cq1001rslm4zs5dknix"},{"name":"王小波","_id":"cjr0l2cq4001yslm4a71wfur4"},{"name":"一只特立独行的猪","_id":"cjr0l2cq40022slm4pys5xlj5"},{"name":"技术书籍","_id":"cjr0l2cq50024slm46gc0havg"},{"name":"Chrome","_id":"cjr0l2cq60028slm4hfl5p0xu"},{"name":"快捷键","_id":"cjr0l2cq6002bslm4ziyd504a"},{"name":"Docker","_id":"cjr0l2cq6002cslm4gnt58nz5"},{"name":"JavaScript","_id":"cjr0l2cq6002fslm4cjzxmo60"},{"name":"博客搭建","_id":"cjr0l2cq7002hslm4sqsto0g2"},{"name":"Gitlab","_id":"cjr0l2cq7002jslm4bvjgf93d"},{"name":"Markdown","_id":"cjr0l2cq7002lslm4iha5nf2q"},{"name":"OS","_id":"cjr0l2cq8002qslm4f4nq88pv"},{"name":"Node","_id":"cjr0l2cq9002uslm4fbkpcbg5"},{"name":"模块","_id":"cjr0l2cq9002wslm435uod8gv"},{"name":"源码","_id":"cjr0l2cqa002xslm4r9chyfxf"},{"name":"循环依赖","_id":"cjr0l2cqa002yslm4zp61zbbw"},{"name":"Protocol Buffer","_id":"cjr0l2cqa002zslm4mpxmfvzo"},{"name":"微信小程序","_id":"cjr0l2cqa0032slm40kqj48ga"},{"name":"VS Code","_id":"cjr0l2cqb0038slm4ix1c00z2"},{"name":"editor","_id":"cjr0l2cqc003aslm4t3lon1l6"}]}}